{
    "componentChunkName": "component---theme-src-templates-post-query-js",
    "path": "/dev/link-reference-definition-improvements/",
    "result": {"data":{"mdx":{"id":"a529c440-b845-52a0-b0f3-1da4f35fd043","tableOfContents":{"items":[{"url":"#link-reference-definition-improvements","title":"Link Reference Definition Improvements","items":[{"url":"#current-problems","title":"Current Problems"},{"url":"#improvement-proposal","title":"Improvement Proposal"},{"url":"#links","title":"Links"}]}]},"fields":{"title":"Link Reference Definition Improvements","slug":"/dev/link-reference-definition-improvements/","url":"https://demo-wiki.owenyoung.com/wiki/dev/link-reference-definition-improvements/","editUrl":"https://github.com/theowenyoung/gatsby-theme-primer-wiki/tree/main/example/foam-content/dev/link-reference-definition-improvements.md","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021","gitCreatedAt":"2021-08-31T04:06:30.000Z","shouldShowTitle":false},"frontmatter":{"title":"","description":null,"imageAlt":null,"tags":["Dev"],"date":null,"dateModified":null,"language":null,"seoTitle":null,"image":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"link-reference-definition-improvements\"\n  }, \"Link Reference Definition Improvements\"), mdx(\"h2\", {\n    \"id\": \"current-problems\"\n  }, \"Current Problems\"), mdx(\"h3\", {\n    \"id\": \"file-by-file-insertion\"\n  }, \"File-by-file Insertion\"), mdx(\"p\", null, \"For the time being, if you want to get \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/wikilinks/\",\n    \"title\": \"Wikilinks\"\n  }, \"wikilinks\"), \" into all files within the workspace, you'll need to generate the link reference definitions yourself file-by-file (with the assistance of Foam).\"), mdx(\"h3\", {\n    \"id\": \"wikilinks-dont-work-on-github\"\n  }, \"Wikilinks don't work on GitHub\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TL;DR;\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/#workaround/\"\n  }, \"workaround\"), \" in the end of the chapter.\")), mdx(\"p\", null, \"If you click any of the wikilinks on GitHub web UI (such as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"README.md\"), \" of a project), you'll notice that the links break with a 404 error.\"), mdx(\"p\", null, \"At the time of writing (June 28 2020) this is a known, but unsolved error. To understand why this is the case, we need to understand what we are trading off.\"), mdx(\"p\", null, \"So, why don't they work on GitHub?\"), mdx(\"p\", null, \"The three components of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/features/link-reference-definitions/\",\n    \"title\": \"Link Reference Definitions\"\n  }, \"link-reference-definitions\"), \" are link label, link destination and Link Title.\"), mdx(\"p\", null, \"The issue is the middle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"link destination\"), \" component. It's configured to point to the file name \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"without file extension\"), \", i.e. \\\"file-name\\\" instead of \\\"file-name.md\\\". This is to make the GitHub Pages rendering work, because if we generated the links to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"file-name.md\"), \", the links would point to the raw markdown files instead of their generated HTML versions.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Environment\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"file-name\")), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"file-name.md\")))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"VS Code\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Works\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Works\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"GitHub pages\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Works\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Breaks\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"GitHub UI\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Breaks\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Works\")))), mdx(\"p\", null, \"So as you can see, we've prioritised GitHub Pages over GitHub Web UI for the time being.\"), mdx(\"p\", null, \"Ideally, we'd like a solution that works with both, but it's not defined yet (see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/features/link-reference-definitions/\",\n    \"title\": \"Link Reference Definitions\"\n  }, \"link-reference-definitions\"), \" for more details)\"), mdx(\"h4\", {\n    \"id\": \"workaround\"\n  }, \"Workaround\"), mdx(\"p\", null, \"For the time being, you can use relative \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[markdown links](markdown-link.md)\"), \" syntax.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Pros:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This will work on all platforms.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Cons:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It will break the Markdown Notes \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/backlinking/\",\n    \"title\": \"Backlinking\"\n  }, \"backlinking\"), \" support\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Less convenient to write\")), mdx(\"h3\", {\n    \"id\": \"finding-certain-words-clutter-the-vs-code-search-results\"\n  }, \"Finding certain words clutter the VS Code search results\"), mdx(\"p\", null, \"Since link reference definitions have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[//begin]\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[//end]\"), \" guards with explanatory text that use certain words, these words (like \\\"generate\\\") appear in VS Code search results if you happen to search matching strings from the workspace.\"), mdx(\"h2\", {\n    \"id\": \"improvement-proposal\"\n  }, \"Improvement Proposal\"), mdx(\"p\", null, \"Problem space in essence:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"During edit-time (when modifying the markdown files in an editor)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"link reference definitions are needed if user uses editor extensions that don't understand wikilinks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"link reference definitions may be annoying since they\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add content to files that the user hasn't typed in by themselves\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"get out of date if user uses a tool that doesn't autogenerate them\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"may clutter the search results\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"During build-time (when converting markdown to html for publishing purposes)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"link reference definitions are needed, if the files are published via such tools (or to such platforms) that don't understand wikilinks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"link reference definitions might have to be in different formats depending on the publish target (e.g. GitHub pages vs GitHub UI)\")))), mdx(\"p\", null, \"The potential solution:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For edit-time\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make edit-time link reference definition generation optional via user settings. They should be on by default, and generating valid markdown links with a relative path to a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".md\"), \" file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make format of the link reference definition configurable (whether to include '.md' or not)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Out of recommended extensions, currently only \\\"markdown links\\\" doesn't support them (?). However even its \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/tchayen/markdown-links/blob/master/src/parsing.ts#L25\"\n  }, \"code\"), \" seems to include wikilink parser, so it might just be a bug?\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For build-time\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To satisfy mutually incompatible constraints between GitHub UI, VSCode UI, and GitHub Pages, we should add a pre-processing/build step for pushing to GitHub Pages.\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This would be a GitHub action (or a local script, ran via foam-cli) that outputs publish-friendly markdown format for static site generators and other publishing tools\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This build step should be pluggable, so that other transformations could be ran during it\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Have publish targets defined in settings, that support both turning the link reference definitions on/off and defining their format (.md or not). Example draft (including also edit-time aspect):\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"// settings json\\n// see enumerations below for explanations on values\\n{\\n  \\\"foam\\\": {\\n    \\\"publish\\\": [\\n      {\\n        \\\"name\\\": \\\"Gitlab Mirror\\\",     // name of the publish target\\n        \\\"linkTranspilation\\\": \\\"Off\\\",\\n        \\\"linkReferenceDefinitions\\\": \\\"withExtensions\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"GitHub Pages\\\",\\n        \\\"linkTranspilation\\\": \\\"Off\\\",\\n        \\\"linkReferenceDefinitions\\\": \\\"withoutExtensions\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"Blog\\\",\\n        \\\"linkTranspilation\\\": \\\"Off\\\",\\n        \\\"linkReferenceDefinitions\\\": \\\"Off\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"My Amazing PDF book\\\",\\n        \\\"linkTranspilation\\\": \\\"WikiLinksToMarkdown\\\"\\n      }\\n    ],\\n    \\\"edit\\\": {\\n      \\\"linkReferenceDefinitions\\\": \\\"Off\\\"\\n    }\\n  }\\n}\\n\\n// Defines if and how links in markdown files are somehow converted (in-place) during build time\\n// Note that this enumeration is not valid edit-time, since we (probably) don't want to change text like this while user is editing it\\nenum LinkTranspilation {\\n  Off,                   // links are not transpiled\\n  WikiLinksToMarkdown,   // links using wiki-format [[link]] are converted to normal md links: [link](./some/file.md)\\n                         // if this is set, not link reference definitions are generated (not needed)\\n}\\n\\n// Defines if and how link reference definition section is generated\\nenum LinkReferenceDefinitions {\\n  Off,               // link reference definitions are not generated\\n  WithExtensions,    // link reference definitions contain .md (or similar) file extensions\\n  WithoutExtensions  // link reference definitions do not contain file extenions\\n}\\n\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"With Foam repo, just use edit-time link reference definitions with '.md' extension - this makes the links work in the GitHub UI\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Have publish target defined for GitHub pages, that doesn't use '.md' extension, but still has the link reference definitions. Generate the output into gh-pages branch (or separate repo) with automation.\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This naturally requires first removing the existing link reference definitions during the build\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Other\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To clean up the search results, remove link reference definition section guards (assuming that these are not defined by the markdown spec). Use unifiedjs parse trees to identify if there's missing (or surplus) definitions (check if they are identified properly by the library), and just add the needed definitions to the bottom of the file (without guards) AND remove them if they are not needed (anywhere from the file).\")))), mdx(\"p\", null, \"Note that the proposal above supports both (build-time) inline transpilation of wikilinks as well as creation reference definitions. Depending on the direction of Foam, also only one of them could be selected. In that case the other could be implemented at later point of time.\"), mdx(\"p\", null, \"UI-wise, the publish targets could be picked in some similar fashion as the run/debug targets in vscode by implementing a separate panel, or maybe through command execution (CTRL+SHIFT+P) - not yet defined at this point.\"), mdx(\"h2\", {\n    \"id\": \"links\"\n  }, \"Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/foam/issues/16\"\n  }, \"tracking issue on GitHub\"))));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\r\ntags:\r\n  - Dev\r\n---\r\n\r\n# Link Reference Definition Improvements\r\n\r\n## Current Problems\r\n\r\n### File-by-file Insertion\r\n\r\nFor the time being, if you want to get [[wikilinks]] into all files within the workspace, you'll need to generate the link reference definitions yourself file-by-file (with the assistance of Foam).\r\n\r\n### Wikilinks don't work on GitHub\r\n\r\n> **TL;DR;** [workaround](#workaround) in the end of the chapter.\r\n\r\nIf you click any of the wikilinks on GitHub web UI (such as the `README.md` of a project), you'll notice that the links break with a 404 error.\r\n\r\nAt the time of writing (June 28 2020) this is a known, but unsolved error. To understand why this is the case, we need to understand what we are trading off.\r\n\r\nSo, why don't they work on GitHub?\r\n\r\nThe three components of [[link-reference-definitions]] are link label, link destination and Link Title.\r\n\r\nThe issue is the middle **link destination** component. It's configured to point to the file name **without file extension**, i.e. \"file-name\" instead of \"file-name.md\". This is to make the GitHub Pages rendering work, because if we generated the links to `file-name.md`, the links would point to the raw markdown files instead of their generated HTML versions.\r\n\r\n| Environment      | `file-name` | `file-name.md` |\r\n| ---------------- | ----------- | -------------- |\r\n| **VS Code**      | Works       | Works          |\r\n| **GitHub pages** | Works       | Breaks         |\r\n| **GitHub UI**    | Breaks      | Works          |\r\n\r\nSo as you can see, we've prioritised GitHub Pages over GitHub Web UI for the time being.\r\n\r\nIdeally, we'd like a solution that works with both, but it's not defined yet (see [[link-reference-definitions]] for more details)\r\n\r\n#### Workaround\r\n\r\nFor the time being, you can use relative `[markdown links](markdown-link.md)` syntax.\r\n\r\n**Pros:**\r\n\r\n- This will work on all platforms.\r\n\r\n**Cons:**\r\n\r\n- It will break the Markdown Notes [[backlinking]] support\r\n- Less convenient to write\r\n\r\n### Finding certain words clutter the VS Code search results\r\n\r\nSince link reference definitions have `[//begin]` and `[//end]` guards with explanatory text that use certain words, these words (like \"generate\") appear in VS Code search results if you happen to search matching strings from the workspace.\r\n\r\n## Improvement Proposal\r\n\r\nProblem space in essence:\r\n\r\n- During edit-time (when modifying the markdown files in an editor)\r\n  - link reference definitions are needed if user uses editor extensions that don't understand wikilinks\r\n  - link reference definitions may be annoying since they\r\n    - add content to files that the user hasn't typed in by themselves\r\n    - get out of date if user uses a tool that doesn't autogenerate them\r\n    - may clutter the search results\r\n- During build-time (when converting markdown to html for publishing purposes)\r\n  - link reference definitions are needed, if the files are published via such tools (or to such platforms) that don't understand wikilinks\r\n  - link reference definitions might have to be in different formats depending on the publish target (e.g. GitHub pages vs GitHub UI)\r\n\r\nThe potential solution:\r\n\r\n- For edit-time\r\n  - Make edit-time link reference definition generation optional via user settings. They should be on by default, and generating valid markdown links with a relative path to a `.md` file.\r\n  - Make format of the link reference definition configurable (whether to include '.md' or not)\r\n  - Out of recommended extensions, currently only \"markdown links\" doesn't support them (?). However even its [code](https://github.com/tchayen/markdown-links/blob/master/src/parsing.ts#L25) seems to include wikilink parser, so it might just be a bug?\r\n- For build-time\r\n\r\n  - To satisfy mutually incompatible constraints between GitHub UI, VSCode UI, and GitHub Pages, we should add a pre-processing/build step for pushing to GitHub Pages.\r\n    - This would be a GitHub action (or a local script, ran via foam-cli) that outputs publish-friendly markdown format for static site generators and other publishing tools\r\n    - This build step should be pluggable, so that other transformations could be ran during it\r\n  - Have publish targets defined in settings, that support both turning the link reference definitions on/off and defining their format (.md or not). Example draft (including also edit-time aspect):\r\n\r\n    ```typescript\r\n    // settings json\r\n    // see enumerations below for explanations on values\r\n    {\r\n      \"foam\": {\r\n        \"publish\": [\r\n          {\r\n            \"name\": \"Gitlab Mirror\",     // name of the publish target\r\n            \"linkTranspilation\": \"Off\",\r\n            \"linkReferenceDefinitions\": \"withExtensions\"\r\n          },\r\n          {\r\n            \"name\": \"GitHub Pages\",\r\n            \"linkTranspilation\": \"Off\",\r\n            \"linkReferenceDefinitions\": \"withoutExtensions\"\r\n          },\r\n          {\r\n            \"name\": \"Blog\",\r\n            \"linkTranspilation\": \"Off\",\r\n            \"linkReferenceDefinitions\": \"Off\"\r\n          },\r\n          {\r\n            \"name\": \"My Amazing PDF book\",\r\n            \"linkTranspilation\": \"WikiLinksToMarkdown\"\r\n          }\r\n        ],\r\n        \"edit\": {\r\n          \"linkReferenceDefinitions\": \"Off\"\r\n        }\r\n      }\r\n    }\r\n\r\n    // Defines if and how links in markdown files are somehow converted (in-place) during build time\r\n    // Note that this enumeration is not valid edit-time, since we (probably) don't want to change text like this while user is editing it\r\n    enum LinkTranspilation {\r\n      Off,                   // links are not transpiled\r\n      WikiLinksToMarkdown,   // links using wiki-format [[link]] are converted to normal md links: [link](./some/file.md)\r\n                             // if this is set, not link reference definitions are generated (not needed)\r\n    }\r\n\r\n    // Defines if and how link reference definition section is generated\r\n    enum LinkReferenceDefinitions {\r\n      Off,               // link reference definitions are not generated\r\n      WithExtensions,    // link reference definitions contain .md (or similar) file extensions\r\n      WithoutExtensions  // link reference definitions do not contain file extenions\r\n    }\r\n\r\n    ```\r\n\r\n  - With Foam repo, just use edit-time link reference definitions with '.md' extension - this makes the links work in the GitHub UI\r\n  - Have publish target defined for GitHub pages, that doesn't use '.md' extension, but still has the link reference definitions. Generate the output into gh-pages branch (or separate repo) with automation.\r\n    - This naturally requires first removing the existing link reference definitions during the build\r\n\r\n- Other\r\n  - To clean up the search results, remove link reference definition section guards (assuming that these are not defined by the markdown spec). Use unifiedjs parse trees to identify if there's missing (or surplus) definitions (check if they are identified properly by the library), and just add the needed definitions to the bottom of the file (without guards) AND remove them if they are not needed (anywhere from the file).\r\n\r\nNote that the proposal above supports both (build-time) inline transpilation of wikilinks as well as creation reference definitions. Depending on the direction of Foam, also only one of them could be selected. In that case the other could be implemented at later point of time.\r\n\r\nUI-wise, the publish targets could be picked in some similar fashion as the run/debug targets in vscode by implementing a separate panel, or maybe through command execution (CTRL+SHIFT+P) - not yet defined at this point.\r\n\r\n## Links\r\n\r\n- [tracking issue on GitHub](https://github.com/foambubble/foam/issues/16)\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[wikilinks]: ../wikilinks.md \"Wikilinks\"\r\n[link-reference-definitions]: ../features/link-reference-definitions.md \"Link Reference Definitions\"\r\n[backlinking]: ../features/backlinking.md \"Backlinking\"\r\n[//end]: # \"Autogenerated link references\"\r\n","excerpt":"Link Reference Definition Improvements Current Problems File-by-file Insertion For the time being, if you want to get [ wikilinks ] into al…","outboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Wikilinks\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"wikilinks\"\n  }, \"Wikilinks\"), mdx(\"p\", null, \"Foam enables you to Link pages together using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[file-name]]\"), \" annotations (i.e. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[MediaWiki]]\"), \" links).\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Type \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[\"), \" and start typing a file name for autocompletion.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Note that your file names should be in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"lower-dash-case.md\"), \", and your wikilinks should reference file names exactly: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[lower-dash-case]]\"), \", not \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[Lower Dash Case]]\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"See [\", \"[link-formatting-and-autocompletion]\", \"] for more information, and how to setup your link autocompletions to make this easier.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Cmd\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Click\"), \" ( \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Click\"), \" on Windows ) on file name to navigate to file (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"F12\"), \" also works while your cursor is on the file name)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Cmd\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Click\"), \" ( \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Click\"), \" on Windows ) on non-existent file to create that file in the workspace.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The note creation makes use of the special \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/note-templates/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"new-note.md\"), \" note template\"))))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"F12\"), \" shortcut feels unnatural you can rebind it at File > Preferences > Keyboard Shortcuts by searching for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"editor.action.revealDefinition\"), \".\")), mdx(\"h2\", {\n    \"id\": \"markdown-compatibility\"\n  }, \"Markdown compatibility\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=foam.foam-vscode\"\n  }, \"Foam for VSCode\"), \" extension automatically generates \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/features/link-reference-definitions/\",\n    \"title\": \"Link Reference Definitions\"\n  }, \"link-reference-definitions\"), \" at the bottom of the file to make wikilinks compatible with Markdown tools and parsers.\"), mdx(\"h2\", {\n    \"id\": \"read-more\"\n  }, \"Read more\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/foam-file-format/\",\n    \"title\": \"Foam File Format\"\n  }, \"foam-file-format\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/note-templates/\",\n    \"title\": \"Note Templates\"\n  }, \"note-templates\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[link-formatting-and-autocompletion]\", \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"See \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/link-reference-definition-improvements/\",\n    \"title\": \"Link Reference Definition Improvements\"\n  }, \"link-reference-definition-improvements\"), \" for further discussion on current problems and potential solutions.\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/wikilinks/","title":"Wikilinks","shouldShowTitle":false}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Features\", \"Backlink\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"backlinking\"\n  }, \"Backlinking\"), mdx(\"p\", null, \"When using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/wikilinks/\",\n    \"title\": \"Wikilinks\"\n  }, \"wikilinks\"), \", you can find all notes that link to a specific note in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=kortina.vscode-markdown-notes\"\n  }, \"VS Code Markdown Notes\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Backlinks Explorer\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Cmd\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Shift\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"P\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Shift\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"P\"), \" for Windows), type \\\"backlinks\\\" and run the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Explorer: Focus on Backlinks\"), \" view.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keep this pane always visible to discover relationships between your thoughts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can drag the backlinks pane to a different section in VS Code if you prefer. See: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/recipes/make-backlinks-more-prominent/\",\n    \"title\": \"Make Backlinks More Prominent\"\n  }, \"make-backlinks-more-prominent\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Finding backlinks in published Foam workspaces via \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/materialized-backlinks/\",\n    \"title\": \"Materialized Backlinks (stub)\"\n  }, \"materialized-backlinks\"), \" is on the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/roadmap/\",\n    \"title\": \"Roadmap\"\n  }, \"roadmap\"), \" but not yet implemented.\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/features/backlinking/","title":"Backlinking","shouldShowTitle":false}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Features\", \"Link\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"link-reference-definitions\"\n  }, \"Link Reference Definitions\"), mdx(\"h2\", {\n    \"id\": \"introduction\"\n  }, \"Introduction\"), mdx(\"p\", null, \"When you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[wikilinks]]\"), \", the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/foambubble/foam/tree/master/packages/foam-vscode\"\n  }, \"foam-vscode\"), \" extension will automatically generate \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://spec.commonmark.org/0.29/#link-reference-definitions\"\n  }, \"Markdown Link Reference Definitions\"), \" at the bottom of the file. This is done to make the content of the file compatible with various Markdown tools (e.g. parsers, static site generators, VS code plugins etc), which don't support \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[wikilinks]]\"), \".\"), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, \"The following example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-md\"\n  }, \"- [[wikilinks]]\\n- [[github-pages]]\\n\")), mdx(\"p\", null, \"...generates the following link reference definitions to the bottom of the file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-md\"\n  }, \"[wikilinks]: wikilinks \\\"Wikilinks\\\"\\n[github-pages]: github-pages \\\"GitHub Pages\\\"\\n\")), mdx(\"p\", null, \"You can open the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://foambubble.github.io/foam/features/link-reference-definitions.md\"\n  }, \"raw markdown\"), \" to see them at the bottom of this file\"), mdx(\"h2\", {\n    \"id\": \"specification\"\n  }, \"Specification\"), mdx(\"p\", null, \"The three components of a link reference definition are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[link-label]: link-target \\\"Link Title\\\"\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"link label:\"), \" The link text to match in the surrounding markdown document. This matches the inner bracket of the double-bracketed \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[wikilink]]\"), \" notation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"link destination\"), \" The target of the matched link\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"By default we generate links without extension. This can be overridden, see \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/#configuration/\"\n  }, \"Configuration\"), \" below\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\\"Link Title\\\"\"), \" Optional title for link (The Foam template has a snippet of JavaScript to replace this on the website at runtime)\")), mdx(\"h2\", {\n    \"id\": \"configuration\"\n  }, \"Configuration\"), mdx(\"p\", null, \"You can choose to generate link reference definitions with or without file extensions, depending on the target, or to disable the generation altogether. As a rule of thumb:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Links with file extensions work better with standard markdown-based tools, such as GitHub web UI.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Links without file extensions work better with certain web publishing tools that treat links as literal urls and don't transform them automatically, such as the standard GitHub pages installation.\")), mdx(\"p\", null, \"By default, Foam generates links without file extensions for legacy reasons, but this may change in future versions.\"), mdx(\"p\", null, \"You can override this setting in your Foam workspace's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"settings.json\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"foam.edit.linkReferenceDefinitions\\\": \\\"withoutExtensions\\\"\"), \" (default)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"foam.edit.linkReferenceDefinitions\\\": \\\"withExtensions\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"foam.edit.linkReferenceDefinitions\\\": \\\"off\\\"\"))), mdx(\"h3\", {\n    \"id\": \"ignoring-files\"\n  }, \"Ignoring files\"), mdx(\"p\", null, \"Sometimes, you may want to ignore certain files or folders, so that Foam doesn't generate link reference definitions to them.\"), mdx(\"p\", null, \"For instance, if you're using a local instance of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jekyllrb.com/\"\n  }, \"Jekyll\"), \", you may find that it writes copies of each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".md\"), \" file into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_site\"), \" directory, which may lead to Foam generating references to them instead of the original source notes.\"), mdx(\"p\", null, \"You can ignore the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_site\"), \" directory by adding the following to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".vscode/settings.json\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"  \\\"files.exclude\\\": {\\n    \\\"**/_site\\\": true\\n  },\\n  \\\"files.watcherExclude\\\": {\\n    \\\"**/_site\\\": true\\n  },\\n\")), mdx(\"p\", null, \"After changing the setting in your workspace, you can run the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/features/workspace-janitor/\",\n    \"title\": \"Janitor\"\n  }, \"workspace-janitor\"), \" command to convert all existing definitions.\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \" \", \"_\", \"Implement a `foam.eclude\"), mdx(\"h2\", {\n    \"id\": \"future-improvements\"\n  }, \"Future improvements\"), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/link-reference-definition-improvements/\",\n    \"title\": \"Link Reference Definition Improvements\"\n  }, \"link-reference-definition-improvements\"), \" for further discussion on current problems and potential solutions.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/features/link-reference-definitions/","title":"Link Reference Definitions","shouldShowTitle":false}}],"inboundReferences":[]},"tagsOutbound":{"nodes":[{"frontmatter":{"title":"","tags":["architecture","Dev"]},"fields":{"slug":"/dev/architecture/","title":"Architecture","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Dev"]},"fields":{"slug":"/dev/build-vs-assemble/","title":"Build vs Assemble","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Dev","Core"]},"fields":{"slug":"/dev/foam-core/","title":"Foam Core","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Dev","Format"]},"fields":{"slug":"/dev/foam-file-format/","title":"Foam File Format","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Dev","Task"]},"fields":{"slug":"/dev/good-first-task/","title":"Good First Task","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Dev"]},"fields":{"slug":"/dev/link-reference-definition-improvements/","title":"Link Reference Definition Improvements","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Dev"]},"fields":{"slug":"/dev/materialized-backlinks/","title":"Materialized Backlinks (stub)","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Dev","Mdx"]},"fields":{"slug":"/dev/mdx-by-default/","title":"MDX by Default(stub)","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Dev"]},"fields":{"slug":"/dev/publishing-permissions/","title":"Publishing Permissions(stub)","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Dev","Roadmap"]},"fields":{"slug":"/dev/roadmap/","title":"Roadmap","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Dev","Todo"]},"fields":{"slug":"/dev/todo/","title":"Todo","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Dev"]},"fields":{"slug":"/dev/unlinked-references/","title":"Unlinked references (stub)","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}}]}},"pageContext":{"tags":["Dev"],"slug":"/dev/link-reference-definition-improvements/","sidebarItems":[{"title":"","items":[{"title":"Links","url":"","external":false,"items":[{"title":"Foam Template","url":"https://github.com/theowenyoung/foam-template-gatsby-theme-primer-wiki","external":true,"items":[]},{"title":"Obsidian Template","url":"https://github.com/theowenyoung/obsidian-template-gatsby-theme-primer-wiki","external":true,"items":[]},{"title":"Real World Wiki","url":"https://wiki.owenyoung.com","external":true,"items":[]}],"indent":false,"collapse":true}],"collapse":true},{"title":"","items":[{"title":"Recently Updated","url":"/latest/","collapse":true,"indent":false,"items":[{"title":"10-14: Summary","url":"/SUMMARY/"},{"title":"09-09: Foam","url":"/"},{"title":"08-31: Page not found!","url":"/404/"},{"title":"08-31: Big Vision","url":"/big-vision/"},{"title":"08-31: Code of Conduct","url":"/code-of-conduct/"},{"title":"08-31: Contribution Guide","url":"/contribution-guide/"},{"title":"08-31: Frequently Asked Questions","url":"/frequently-asked-questions/"},{"title":"08-31: Inbox","url":"/inbox/"},{"title":"08-31: Principles","url":"/principles/"},{"title":"08-31: Reading list","url":"/reading-list/"}]}]},{"title":"Tags","items":[{"title":"Awesome","type":"tag","url":"/tags/awesome/","items":[{"title":"Reading list","url":"/reading-list/"},{"title":"Terminology","url":"/terminology/"}]},{"title":"Backlink","type":"tag","url":"/tags/backlink/","items":[{"title":"Backlinking","url":"/features/backlinking/"}]},{"title":"CLI","type":"tag","url":"/tags/cli/","items":[{"title":"Command Line Interface","url":"/features/cli/"}]},{"title":"Conduct","type":"tag","url":"/tags/conduct/","items":[{"title":"Code of Conduct","url":"/code-of-conduct/"}]},{"title":"Contribution","type":"tag","url":"/tags/contribution/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]},{"title":"Core","type":"tag","url":"/tags/core/","items":[{"title":"Foam Core","url":"/dev/foam-core/"}]},{"title":"Dev","type":"tag","url":"/tags/dev/","items":[{"title":"Architecture","url":"/dev/architecture/"},{"title":"Build vs Assemble","url":"/dev/build-vs-assemble/"},{"title":"Foam Core","url":"/dev/foam-core/"},{"title":"Foam File Format","url":"/dev/foam-file-format/"},{"title":"Good First Task","url":"/dev/good-first-task/"},{"title":"Link Reference Definition Improvements","url":"/dev/link-reference-definition-improvements/"},{"title":"Materialized Backlinks (stub)","url":"/dev/materialized-backlinks/"},{"title":"MDX by Default(stub)","url":"/dev/mdx-by-default/"},{"title":"Publishing Permissions(stub)","url":"/dev/publishing-permissions/"},{"title":"Roadmap","url":"/dev/roadmap/"},{"title":"Todo","url":"/dev/todo/"},{"title":"Unlinked references (stub)","url":"/dev/unlinked-references/"}]},{"title":"Extensions","type":"tag","url":"/tags/extensions/","items":[{"title":"Recommended Extensions","url":"/recommended-extensions/"}]},{"title":"FAQ","type":"tag","url":"/tags/faq/","items":[{"title":"Frequently Asked Questions","url":"/frequently-asked-questions/"}]},{"title":"Features","type":"tag","url":"/tags/features/","items":[{"title":"Backlinking","url":"/features/backlinking/"},{"title":"Command Line Interface","url":"/features/cli/"},{"title":"Creating New Notes","url":"/features/creating-new-notes/"},{"title":"Custom Markdown Preview Styles","url":"/features/custom-markdown-preview-styles/"},{"title":"Adding Custom Snippets","url":"/features/custom-snippets/"},{"title":"Daily notes","url":"/features/daily-notes/"},{"title":"Foam logging in VsCode","url":"/features/foam-logging-in-vscode/"},{"title":"Git Integration","url":"/features/git-integration/"},{"title":"Graph Visualisation","url":"/features/graph-visualisation/"},{"title":"Key Bindings","url":"/features/key-bindings/"},{"title":"Link Reference Definitions","url":"/features/link-reference-definitions/"},{"title":"Note Templates","url":"/features/note-templates/"},{"title":"Orphans","url":"/features/orphans/"},{"title":"Tags","url":"/features/tags/"},{"title":"Janitor","url":"/features/workspace-janitor/"}]},{"title":"Foam","type":"tag","url":"/tags/foam/","items":[{"title":"Foam","url":"/"}]},{"title":"Format","type":"tag","url":"/tags/format/","items":[{"title":"Foam File Format","url":"/dev/foam-file-format/"}]},{"title":"Gatsby","type":"tag","url":"/tags/gatsby/","items":[{"title":"Generate a site using Gatsby","url":"/publishing/generate-gatsby-site/"}]},{"title":"Git","type":"tag","url":"/tags/git/","items":[{"title":"Git Integration","url":"/features/git-integration/"}]},{"title":"Github","type":"tag","url":"/tags/github/","items":[{"title":"GitHub Pages","url":"/publishing/publish-to-github-pages/"}]},{"title":"Graph-Visualisation","type":"tag","url":"/tags/graph-visualisation/","items":[{"title":"Graph Visualisation","url":"/features/graph-visualisation/"}]},{"title":"Inbox","type":"tag","url":"/tags/inbox/","items":[{"title":"Inbox","url":"/inbox/"}]},{"title":"Link","type":"tag","url":"/tags/link/","items":[{"title":"Link Reference Definitions","url":"/features/link-reference-definitions/"}]},{"title":"Mdx","type":"tag","url":"/tags/mdx/","items":[{"title":"MDX by Default(stub)","url":"/dev/mdx-by-default/"}]},{"title":"Meetings","type":"tag","url":"/tags/meetings/","items":[{"title":"Foam Core 2020-07-11","url":"/meeting-notes/foam-core-2020-07-11/"}]},{"title":"New","type":"tag","url":"/tags/new/","items":[{"title":"Creating New Notes","url":"/features/creating-new-notes/"}]},{"title":"Orphans","type":"tag","url":"/tags/orphans/","items":[{"title":"Orphans","url":"/features/orphans/"}]},{"title":"Principles","type":"tag","url":"/tags/principles/","items":[{"title":"Principles","url":"/principles/"}]},{"title":"Publish","type":"tag","url":"/tags/publish/","items":[{"title":"Generate a site using Gatsby","url":"/publishing/generate-gatsby-site/"},{"title":"Publishing pages","url":"/publishing/"},{"title":"Katex Math Rendering","url":"/publishing/math-support-with-katex/"},{"title":"Math Support","url":"/publishing/math-support-with-mathjax/"},{"title":"Publish to Azure DevOps Wiki","url":"/publishing/publish-to-azure-devops-wiki/"},{"title":"GitHub Pages","url":"/publishing/publish-to-github-pages/"},{"title":"Publish to GitHub","url":"/publishing/publish-to-github/"},{"title":"GitLab Pages","url":"/publishing/publish-to-gitlab-pages/"},{"title":"Publish to Netlify with Eleventy","url":"/publishing/publish-to-netlify-with-eleventy/"},{"title":"Publish to Vercel","url":"/publishing/publish-to-vercel/"}]},{"title":"Recipes","type":"tag","url":"/tags/recipes/","items":[{"title":"Add images to your notes","url":"/recipes/add-images-to-notes/"},{"title":"Automatically Sync with Git","url":"/recipes/automatic-git-syncing/"},{"title":"Automatically Expand URLs to Well-Titled Links","url":"/recipes/automatically-expand-urls-to-well-titled-links/"},{"title":"Capture Notes With Drafts Pro","url":"/recipes/capture-notes-with-drafts-pro/"},{"title":"Capture Notes With Shortcuts and GitHub Actions","url":"/recipes/capture-notes-with-shortcuts-and-github-actions/"},{"title":"Diagrams in Markdown","url":"/recipes/diagrams-in-markdown/"},{"title":"How to Write Recipes","url":"/recipes/how-to-write-recipes/"},{"title":"Make Backlinks More Prominent","url":"/recipes/make-backlinks-more-prominent/"},{"title":"Migrating from Obsidian (stub)","url":"/recipes/migrating-from-obsidian/"},{"title":"Migrating from OneNote","url":"/recipes/migrating-from-onenote/"},{"title":"Migrating from Roam (stub)","url":"/recipes/migrating-from-roam/"},{"title":"Custom Note Macros","url":"/recipes/note-macros/"},{"title":"Pre-defined User Snippets","url":"/recipes/predefined-user-snippets/"},{"title":"Real-time Collaboration","url":"/recipes/real-time-collaboration/"},{"title":"Recipes","url":"/recipes/recipes/"},{"title":"Search for Notes","url":"/recipes/search-for-notes/"},{"title":"Shows Image Preview on Hover","url":"/recipes/shows-image-preview-on-hover/"},{"title":"Take notes on mobile phones","url":"/recipes/take-notes-from-mobile-phone/"},{"title":"Web Clipper","url":"/recipes/web-clipper/"},{"title":"Write your notes in GitHub Gist","url":"/recipes/write-your-notes-in-github-gist/"}]},{"title":"Roadmap","type":"tag","url":"/tags/roadmap/","items":[{"title":"Roadmap","url":"/dev/roadmap/"}]},{"title":"Tags","type":"tag","url":"/tags/tags/","items":[{"title":"Tags","url":"/features/tags/"}]},{"title":"Task","type":"tag","url":"/tags/task/","items":[{"title":"Good First Task","url":"/dev/good-first-task/"}]},{"title":"Template","type":"tag","url":"/tags/template/","items":[{"title":"Note Templates","url":"/features/note-templates/"}]},{"title":"Templates","type":"tag","url":"/tags/templates/","items":[{"title":"Templates v2 Proposal <!-- omit in TOC -->","url":"/proposals/templates-v2/"}]},{"title":"Todo","type":"tag","url":"/tags/todo/","items":[{"title":"Todo","url":"/dev/todo/"}]},{"title":"Vercel","type":"tag","url":"/tags/vercel/","items":[{"title":"Publish to Vercel","url":"/publishing/publish-to-vercel/"}]},{"title":"Vision","type":"tag","url":"/tags/vision/","items":[{"title":"Big Vision","url":"/big-vision/"}]},{"title":"Wikilinks","type":"tag","url":"/tags/wikilinks/","items":[{"title":"Wikilinks","url":"/wikilinks/"}]},{"title":"architecture","type":"tag","url":"/tags/architecture/","items":[{"title":"Architecture","url":"/dev/architecture/"}]},{"title":"good-first-task","type":"tag","url":"/tags/good-first-task/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]},{"title":"todo","type":"tag","url":"/tags/todo/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]}]}],"tagsGroups":[{"title":"Awesome","type":"tag","url":"/tags/awesome/","items":[{"title":"Reading list","url":"/reading-list/"},{"title":"Terminology","url":"/terminology/"}]},{"title":"Backlink","type":"tag","url":"/tags/backlink/","items":[{"title":"Backlinking","url":"/features/backlinking/"}]},{"title":"CLI","type":"tag","url":"/tags/cli/","items":[{"title":"Command Line Interface","url":"/features/cli/"}]},{"title":"Conduct","type":"tag","url":"/tags/conduct/","items":[{"title":"Code of Conduct","url":"/code-of-conduct/"}]},{"title":"Contribution","type":"tag","url":"/tags/contribution/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]},{"title":"Core","type":"tag","url":"/tags/core/","items":[{"title":"Foam Core","url":"/dev/foam-core/"}]},{"title":"Dev","type":"tag","url":"/tags/dev/","items":[{"title":"Architecture","url":"/dev/architecture/"},{"title":"Build vs Assemble","url":"/dev/build-vs-assemble/"},{"title":"Foam Core","url":"/dev/foam-core/"},{"title":"Foam File Format","url":"/dev/foam-file-format/"},{"title":"Good First Task","url":"/dev/good-first-task/"},{"title":"Link Reference Definition Improvements","url":"/dev/link-reference-definition-improvements/"},{"title":"Materialized Backlinks (stub)","url":"/dev/materialized-backlinks/"},{"title":"MDX by Default(stub)","url":"/dev/mdx-by-default/"},{"title":"Publishing Permissions(stub)","url":"/dev/publishing-permissions/"},{"title":"Roadmap","url":"/dev/roadmap/"},{"title":"Todo","url":"/dev/todo/"},{"title":"Unlinked references (stub)","url":"/dev/unlinked-references/"}]},{"title":"Extensions","type":"tag","url":"/tags/extensions/","items":[{"title":"Recommended Extensions","url":"/recommended-extensions/"}]},{"title":"FAQ","type":"tag","url":"/tags/faq/","items":[{"title":"Frequently Asked Questions","url":"/frequently-asked-questions/"}]},{"title":"Features","type":"tag","url":"/tags/features/","items":[{"title":"Backlinking","url":"/features/backlinking/"},{"title":"Command Line Interface","url":"/features/cli/"},{"title":"Creating New Notes","url":"/features/creating-new-notes/"},{"title":"Custom Markdown Preview Styles","url":"/features/custom-markdown-preview-styles/"},{"title":"Adding Custom Snippets","url":"/features/custom-snippets/"},{"title":"Daily notes","url":"/features/daily-notes/"},{"title":"Foam logging in VsCode","url":"/features/foam-logging-in-vscode/"},{"title":"Git Integration","url":"/features/git-integration/"},{"title":"Graph Visualisation","url":"/features/graph-visualisation/"},{"title":"Key Bindings","url":"/features/key-bindings/"},{"title":"Link Reference Definitions","url":"/features/link-reference-definitions/"},{"title":"Note Templates","url":"/features/note-templates/"},{"title":"Orphans","url":"/features/orphans/"},{"title":"Tags","url":"/features/tags/"},{"title":"Janitor","url":"/features/workspace-janitor/"}]},{"title":"Foam","type":"tag","url":"/tags/foam/","items":[{"title":"Foam","url":"/"}]},{"title":"Format","type":"tag","url":"/tags/format/","items":[{"title":"Foam File Format","url":"/dev/foam-file-format/"}]},{"title":"Gatsby","type":"tag","url":"/tags/gatsby/","items":[{"title":"Generate a site using Gatsby","url":"/publishing/generate-gatsby-site/"}]},{"title":"Git","type":"tag","url":"/tags/git/","items":[{"title":"Git Integration","url":"/features/git-integration/"}]},{"title":"Github","type":"tag","url":"/tags/github/","items":[{"title":"GitHub Pages","url":"/publishing/publish-to-github-pages/"}]},{"title":"Graph-Visualisation","type":"tag","url":"/tags/graph-visualisation/","items":[{"title":"Graph Visualisation","url":"/features/graph-visualisation/"}]},{"title":"Inbox","type":"tag","url":"/tags/inbox/","items":[{"title":"Inbox","url":"/inbox/"}]},{"title":"Link","type":"tag","url":"/tags/link/","items":[{"title":"Link Reference Definitions","url":"/features/link-reference-definitions/"}]},{"title":"Mdx","type":"tag","url":"/tags/mdx/","items":[{"title":"MDX by Default(stub)","url":"/dev/mdx-by-default/"}]},{"title":"Meetings","type":"tag","url":"/tags/meetings/","items":[{"title":"Foam Core 2020-07-11","url":"/meeting-notes/foam-core-2020-07-11/"}]},{"title":"New","type":"tag","url":"/tags/new/","items":[{"title":"Creating New Notes","url":"/features/creating-new-notes/"}]},{"title":"Orphans","type":"tag","url":"/tags/orphans/","items":[{"title":"Orphans","url":"/features/orphans/"}]},{"title":"Principles","type":"tag","url":"/tags/principles/","items":[{"title":"Principles","url":"/principles/"}]},{"title":"Publish","type":"tag","url":"/tags/publish/","items":[{"title":"Generate a site using Gatsby","url":"/publishing/generate-gatsby-site/"},{"title":"Publishing pages","url":"/publishing/"},{"title":"Katex Math Rendering","url":"/publishing/math-support-with-katex/"},{"title":"Math Support","url":"/publishing/math-support-with-mathjax/"},{"title":"Publish to Azure DevOps Wiki","url":"/publishing/publish-to-azure-devops-wiki/"},{"title":"GitHub Pages","url":"/publishing/publish-to-github-pages/"},{"title":"Publish to GitHub","url":"/publishing/publish-to-github/"},{"title":"GitLab Pages","url":"/publishing/publish-to-gitlab-pages/"},{"title":"Publish to Netlify with Eleventy","url":"/publishing/publish-to-netlify-with-eleventy/"},{"title":"Publish to Vercel","url":"/publishing/publish-to-vercel/"}]},{"title":"Recipes","type":"tag","url":"/tags/recipes/","items":[{"title":"Add images to your notes","url":"/recipes/add-images-to-notes/"},{"title":"Automatically Sync with Git","url":"/recipes/automatic-git-syncing/"},{"title":"Automatically Expand URLs to Well-Titled Links","url":"/recipes/automatically-expand-urls-to-well-titled-links/"},{"title":"Capture Notes With Drafts Pro","url":"/recipes/capture-notes-with-drafts-pro/"},{"title":"Capture Notes With Shortcuts and GitHub Actions","url":"/recipes/capture-notes-with-shortcuts-and-github-actions/"},{"title":"Diagrams in Markdown","url":"/recipes/diagrams-in-markdown/"},{"title":"How to Write Recipes","url":"/recipes/how-to-write-recipes/"},{"title":"Make Backlinks More Prominent","url":"/recipes/make-backlinks-more-prominent/"},{"title":"Migrating from Obsidian (stub)","url":"/recipes/migrating-from-obsidian/"},{"title":"Migrating from OneNote","url":"/recipes/migrating-from-onenote/"},{"title":"Migrating from Roam (stub)","url":"/recipes/migrating-from-roam/"},{"title":"Custom Note Macros","url":"/recipes/note-macros/"},{"title":"Pre-defined User Snippets","url":"/recipes/predefined-user-snippets/"},{"title":"Real-time Collaboration","url":"/recipes/real-time-collaboration/"},{"title":"Recipes","url":"/recipes/recipes/"},{"title":"Search for Notes","url":"/recipes/search-for-notes/"},{"title":"Shows Image Preview on Hover","url":"/recipes/shows-image-preview-on-hover/"},{"title":"Take notes on mobile phones","url":"/recipes/take-notes-from-mobile-phone/"},{"title":"Web Clipper","url":"/recipes/web-clipper/"},{"title":"Write your notes in GitHub Gist","url":"/recipes/write-your-notes-in-github-gist/"}]},{"title":"Roadmap","type":"tag","url":"/tags/roadmap/","items":[{"title":"Roadmap","url":"/dev/roadmap/"}]},{"title":"Tags","type":"tag","url":"/tags/tags/","items":[{"title":"Tags","url":"/features/tags/"}]},{"title":"Task","type":"tag","url":"/tags/task/","items":[{"title":"Good First Task","url":"/dev/good-first-task/"}]},{"title":"Template","type":"tag","url":"/tags/template/","items":[{"title":"Note Templates","url":"/features/note-templates/"}]},{"title":"Templates","type":"tag","url":"/tags/templates/","items":[{"title":"Templates v2 Proposal <!-- omit in TOC -->","url":"/proposals/templates-v2/"}]},{"title":"Todo","type":"tag","url":"/tags/todo/","items":[{"title":"Todo","url":"/dev/todo/"}]},{"title":"Vercel","type":"tag","url":"/tags/vercel/","items":[{"title":"Publish to Vercel","url":"/publishing/publish-to-vercel/"}]},{"title":"Vision","type":"tag","url":"/tags/vision/","items":[{"title":"Big Vision","url":"/big-vision/"}]},{"title":"Wikilinks","type":"tag","url":"/tags/wikilinks/","items":[{"title":"Wikilinks","url":"/wikilinks/"}]},{"title":"architecture","type":"tag","url":"/tags/architecture/","items":[{"title":"Architecture","url":"/dev/architecture/"}]},{"title":"good-first-task","type":"tag","url":"/tags/good-first-task/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]},{"title":"todo","type":"tag","url":"/tags/todo/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]}],"latestPosts":[{"fields":{"slug":"/SUMMARY/","title":"Summary","lastUpdatedAt":"2021-10-14T22:16:45.000Z","lastUpdated":"10/14/2021"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/","title":"Foam","lastUpdatedAt":"2021-09-09T14:55:13.000Z","lastUpdated":"9/9/2021"},"frontmatter":{"draft":false,"tags":["Foam"]}},{"fields":{"slug":"/404/","title":"Page not found!","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/big-vision/","title":"Big Vision","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["Vision"]}},{"fields":{"slug":"/code-of-conduct/","title":"Code of Conduct","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["Conduct"]}},{"fields":{"slug":"/contribution-guide/","title":"Contribution Guide","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["todo","good-first-task","Contribution"]}},{"fields":{"slug":"/frequently-asked-questions/","title":"Frequently Asked Questions","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["FAQ"]}},{"fields":{"slug":"/inbox/","title":"Inbox","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["Inbox"]}},{"fields":{"slug":"/principles/","title":"Principles","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["Principles"]}},{"fields":{"slug":"/reading-list/","title":"Reading list","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["Awesome"]}}]}},
    "staticQueryHashes": ["2230547434","2320115945","3495835395","451533639"]}