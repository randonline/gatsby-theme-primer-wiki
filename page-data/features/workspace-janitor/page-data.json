{
    "componentChunkName": "component---theme-src-templates-post-query-js",
    "path": "/features/workspace-janitor/",
    "result": {"data":{"mdx":{"id":"7eab45e1-3fd3-59d7-8f35-fa0b2b208e4a","tableOfContents":{"items":[{"url":"#janitor","title":"Janitor","items":[{"url":"#using-janitor-from-vs-code-experimental","title":"Using Janitor from VS Code (Experimental)"},{"url":"#using-janitor-from-command-line-experimental","title":"Using Janitor from command line (Experimental)"}]}]},"fields":{"title":"Janitor","slug":"/features/workspace-janitor/","url":"https://demo-wiki.owenyoung.com/features/workspace-janitor/","editUrl":"https://github.com/theowenyoung/gatsby-theme-primer-wiki/tree/main/example/foam-content/features/workspace-janitor.md","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021","gitCreatedAt":"2021-08-31T04:06:30.000Z","shouldShowTitle":false},"frontmatter":{"title":"","description":null,"imageAlt":null,"tags":["Features"],"date":null,"dateModified":null,"language":null,"seoTitle":null,"image":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Features\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"janitor\"\n  }, \"Janitor\"), mdx(\"p\", null, \"To store your personal knowledge graph in markdown files instead of a database, we need some additional tooling to create and maintain relationships with notes.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Foam Janitor\"), \" (inspired by Andy Matuschak's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/andymatuschak/note-link-janitor\"\n  }, \"note-link-janitor\"), \") helps you migrate existing notes to Foam, and maintain your Foam's health over time.\"), mdx(\"p\", null, \"Currently, Foam's Janitor helps you to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ensure your \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/link-reference-definitions/\",\n    \"title\": \"Link Reference Definitions\"\n  }, \"link-reference-definitions\"), \" are up to date\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ensure every document has a well-formatted title (required for Markdown Links, Markdown Notes, and Foam Gatsby Template compatibility)\")), mdx(\"p\", null, \"In the future, Janitor can help you with\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Updating \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/materialized-backlinks/\",\n    \"title\": \"Materialized Backlinks (stub)\"\n  }, \"materialized-backlinks\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lint, format and structure notes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rename and move notes around while keeping their references up to date.\")), mdx(\"h2\", {\n    \"id\": \"using-janitor-from-vs-code-experimental\"\n  }, \"Using Janitor from VS Code (Experimental)\"), mdx(\"p\", null, \"Execute the \\\"Foam: Run Janitor\\\" command from the command palette.\"), mdx(\"img\", {\n    \"src\": \"/fb14baa5377fbf1ab939d13def09a1c7/foam-janitor-demo.gif\",\n    \"alt\": \"Foam Janitor demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"using-janitor-from-command-line-experimental\"\n  }, \"Using Janitor from command line (Experimental)\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u26A0\\uFE0F Improvements to this documentation are welcome!\")), mdx(\"p\", null, \"The Janitor can be installed from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/\"\n  }, \"NPM\"), \" and executed as a standalone CLI tool:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"> npm install -g foam-cli\\n> foam janitor path/to/workspace\\n\")), mdx(\"p\", null, \"You can run the Janitor as a git hook on every commit to ensure your workspace links are up to date. This can be especially helpful if you edit your markdown documents from other apps.\"), mdx(\"p\", null, \"You can also run the Janitor from a GitHub action to ensure that all changes coming to your workspace are up to date. This can be useful when editing your Foam notes from mobile (i.e. via \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gitjournal.io\"\n  }, \"GitJournal\"), \"), or your Foam has multiple contributors and you want to ensure that all changes are correctly integrated.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\r\ntags:\r\n  - Features\r\n---\r\n\r\n# Janitor\r\n\r\nTo store your personal knowledge graph in markdown files instead of a database, we need some additional tooling to create and maintain relationships with notes.\r\n\r\n**Foam Janitor** (inspired by Andy Matuschak's [note-link-janitor](https://github.com/andymatuschak/note-link-janitor)) helps you migrate existing notes to Foam, and maintain your Foam's health over time.\r\n\r\nCurrently, Foam's Janitor helps you to:\r\n\r\n- Ensure your [[link-reference-definitions]] are up to date\r\n- Ensure every document has a well-formatted title (required for Markdown Links, Markdown Notes, and Foam Gatsby Template compatibility)\r\n\r\nIn the future, Janitor can help you with\r\n\r\n- Updating [[materialized-backlinks]]\r\n- Lint, format and structure notes\r\n- Rename and move notes around while keeping their references up to date.\r\n\r\n## Using Janitor from VS Code (Experimental)\r\n\r\nExecute the \"Foam: Run Janitor\" command from the command palette.\r\n\r\n![Foam Janitor demo](../assets/images/foam-janitor-demo.gif)\r\n\r\n## Using Janitor from command line (Experimental)\r\n\r\n> ⚠️ Improvements to this documentation are welcome!\r\n\r\nThe Janitor can be installed from [NPM](https://www.npmjs.com/) and executed as a standalone CLI tool:\r\n\r\n```sh\r\n> npm install -g foam-cli\r\n> foam janitor path/to/workspace\r\n```\r\n\r\nYou can run the Janitor as a git hook on every commit to ensure your workspace links are up to date. This can be especially helpful if you edit your markdown documents from other apps.\r\n\r\nYou can also run the Janitor from a GitHub action to ensure that all changes coming to your workspace are up to date. This can be useful when editing your Foam notes from mobile (i.e. via [GitJournal](https://gitjournal.io)), or your Foam has multiple contributors and you want to ensure that all changes are correctly integrated.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[link-reference-definitions]: link-reference-definitions.md \"Link Reference Definitions\"\r\n[materialized-backlinks]: ../dev/materialized-backlinks.md \"Materialized Backlinks (stub)\"\r\n[//end]: # \"Autogenerated link references\"\r\n","excerpt":"Janitor To store your personal knowledge graph in markdown files instead of a database, we need some additional tooling to create and maint…","outboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"materialized-backlinks-stub\"\n  }, \"Materialized Backlinks (stub)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \" This \", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/dev/roadmap/\",\n    \"title\": \"Roadmap\"\n  }, \"roadmap\"), \" item needs more specification work.\")), mdx(\"p\", null, \"If you're interested in working on it, please start a conversation in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/foambubble/foam/issues\"\n  }, \"GitHub issues\"), \".\"), mdx(\"h2\", {\n    \"id\": \"notes\"\n  }, \"Notes\"), mdx(\"p\", null, \"The idea would be to automatically generate lists of backlinks (and optionally, also forward links) into the bottom of every markdown document to\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make every link two-way navigable in published sites\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make Foam notes more portable to different apps and long-term storage\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/materialized-backlinks/","title":"Materialized Backlinks (stub)","shouldShowTitle":false}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Features\", \"Link\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"link-reference-definitions\"\n  }, \"Link Reference Definitions\"), mdx(\"h2\", {\n    \"id\": \"introduction\"\n  }, \"Introduction\"), mdx(\"p\", null, \"When you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[wikilinks]]\"), \", the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/foambubble/foam/tree/master/packages/foam-vscode\"\n  }, \"foam-vscode\"), \" extension will automatically generate \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://spec.commonmark.org/0.29/#link-reference-definitions\"\n  }, \"Markdown Link Reference Definitions\"), \" at the bottom of the file. This is done to make the content of the file compatible with various Markdown tools (e.g. parsers, static site generators, VS code plugins etc), which don't support \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[wikilinks]]\"), \".\"), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, \"The following example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-md\"\n  }, \"- [[wikilinks]]\\n- [[github-pages]]\\n\")), mdx(\"p\", null, \"...generates the following link reference definitions to the bottom of the file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-md\"\n  }, \"[wikilinks]: wikilinks \\\"Wikilinks\\\"\\n[github-pages]: github-pages \\\"GitHub Pages\\\"\\n\")), mdx(\"p\", null, \"You can open the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://foambubble.github.io/foam/features/link-reference-definitions.md\"\n  }, \"raw markdown\"), \" to see them at the bottom of this file\"), mdx(\"h2\", {\n    \"id\": \"specification\"\n  }, \"Specification\"), mdx(\"p\", null, \"The three components of a link reference definition are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[link-label]: link-target \\\"Link Title\\\"\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"link label:\"), \" The link text to match in the surrounding markdown document. This matches the inner bracket of the double-bracketed \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[wikilink]]\"), \" notation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"link destination\"), \" The target of the matched link\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"By default we generate links without extension. This can be overridden, see \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/#configuration/\"\n  }, \"Configuration\"), \" below\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\\"Link Title\\\"\"), \" Optional title for link (The Foam template has a snippet of JavaScript to replace this on the website at runtime)\")), mdx(\"h2\", {\n    \"id\": \"configuration\"\n  }, \"Configuration\"), mdx(\"p\", null, \"You can choose to generate link reference definitions with or without file extensions, depending on the target, or to disable the generation altogether. As a rule of thumb:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Links with file extensions work better with standard markdown-based tools, such as GitHub web UI.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Links without file extensions work better with certain web publishing tools that treat links as literal urls and don't transform them automatically, such as the standard GitHub pages installation.\")), mdx(\"p\", null, \"By default, Foam generates links without file extensions for legacy reasons, but this may change in future versions.\"), mdx(\"p\", null, \"You can override this setting in your Foam workspace's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"settings.json\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"foam.edit.linkReferenceDefinitions\\\": \\\"withoutExtensions\\\"\"), \" (default)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"foam.edit.linkReferenceDefinitions\\\": \\\"withExtensions\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"foam.edit.linkReferenceDefinitions\\\": \\\"off\\\"\"))), mdx(\"h3\", {\n    \"id\": \"ignoring-files\"\n  }, \"Ignoring files\"), mdx(\"p\", null, \"Sometimes, you may want to ignore certain files or folders, so that Foam doesn't generate link reference definitions to them.\"), mdx(\"p\", null, \"For instance, if you're using a local instance of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jekyllrb.com/\"\n  }, \"Jekyll\"), \", you may find that it writes copies of each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".md\"), \" file into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_site\"), \" directory, which may lead to Foam generating references to them instead of the original source notes.\"), mdx(\"p\", null, \"You can ignore the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_site\"), \" directory by adding the following to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".vscode/settings.json\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"  \\\"files.exclude\\\": {\\n    \\\"**/_site\\\": true\\n  },\\n  \\\"files.watcherExclude\\\": {\\n    \\\"**/_site\\\": true\\n  },\\n\")), mdx(\"p\", null, \"After changing the setting in your workspace, you can run the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/features/workspace-janitor/\",\n    \"title\": \"Janitor\"\n  }, \"workspace-janitor\"), \" command to convert all existing definitions.\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \" \", \"_\", \"Implement a `foam.eclude\"), mdx(\"h2\", {\n    \"id\": \"future-improvements\"\n  }, \"Future improvements\"), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/link-reference-definition-improvements/\",\n    \"title\": \"Link Reference Definition Improvements\"\n  }, \"link-reference-definition-improvements\"), \" for further discussion on current problems and potential solutions.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/features/link-reference-definitions/","title":"Link Reference Definitions","shouldShowTitle":false}}],"inboundReferences":[{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\", \"Core\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"foam-core\"\n  }, \"Foam Core\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foam-core\"), \" is a (future) package that powers the core functionality in Foam across all platforms:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"VS Code Extension\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/workspace-janitor/\",\n    \"title\": \"Janitor\"\n  }, \"workspace-janitor\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/cli/\",\n    \"title\": \"Command Line Interface\"\n  }, \"cli\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Future initiatives\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Visualizations\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tag clouds\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Graph\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Should we have a package for visualisation?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/build-vs-assemble/\",\n    \"title\": \"Build vs Assemble\"\n  }, \"build-vs-assemble\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not everything needs to live in the Foam repo\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Web based UI (Monaco)\")))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foam-core\"), \"'s primary responsibility is to build an API on top of a workspace of markdown files, which allows us to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Treat files as a graph, based on links\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can be either \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/wikilinks/\",\n    \"title\": \"Wikilinks\"\n  }, \"wikilinks\"), \" or relative \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[markdown](links.md)\"), \" style\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We need to know about the edges (connections) as well as nodes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What link points to what other file, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Needs to have the exact link text, e.g. even if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[some-page]]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[some-page.md]]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[Some Page]]\"), \" point to the same document (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./some-page.md\"), \"), we need to know which format was used, so \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/link-reference-definitions/\",\n    \"title\": \"Link Reference Definitions\"\n  }, \"link-reference-definitions\"), \" can be generated correctly\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Treat each file as semi-structured data\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Title, headings, lists, paragraphs, images, links, data, code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Also, possible Foam-specific meta stuff, like \\\"backlinks\\\" or \\\"block references\\\".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This can power advanced search features (e.g. showing entire context of paragraph in back links, find all documents)\")))), mdx(\"p\", null, \"Ideally, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foam-core\"), \" will be generic enough that in can be used by third parties to build their own tools that operate on markdown directories.\"), mdx(\"h2\", {\n    \"id\": \"technical-requirements\"\n  }, \"Technical requirements\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The graph should be relatively inexpensive to compute (for running in CI, mobile etc)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If necessary, we can implement caching inside a dot folder, but ideally not\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In memory cache already exist, can prime from disk if needed\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The graph should be mutable (or immutable but easy to deep clone) so that persistent processes (VS Code) can cheaply update it when\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Document content changes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Links update -> Graph change\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Heading changes -> Metadata change\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Anything in the document changes, update AST for individual note\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Files are added\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Files are removed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Files are renamed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Aliasing, call the same thing by multiple names\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Doesn't exist yet, should we support?\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The graph should be observable (EventEmitter?) so changes can be applied\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"EventEmitter w/ cross platform dependency\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Wonka (staltz's callbag)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can be a long term goal\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Short term fix: Just run the build fully on every change\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ideally, the it should accept file/structure changes from the outside from some sort of event source, so we can decouple source of updates (VS Code Workspace events, file system events...)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If this gets complicated, we can delay this for now\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We should not take on platform-specific dependencies\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Should work in any JS environment\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Written in TypeScript (preferably tsdx)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Published to NPM\")), mdx(\"h2\", {\n    \"id\": \"use-cases\"\n  }, \"Use cases\"), mdx(\"p\", null, \"Here are some example use cases that the core should support. They don't need to be built into the core, but may help us design correct solutions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Adding and editing page content\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/materialized-backlinks/\",\n    \"title\": \"Materialized Backlinks (stub)\"\n  }, \"materialized-backlinks\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/link-reference-definitions/\",\n    \"title\": \"Link Reference Definitions\"\n  }, \"link-reference-definitions\"), \" for \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/wikilinks/\",\n    \"title\": \"Wikilinks\"\n  }, \"wikilinks\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://jekyllrb.com/docs/front-matter/\"\n  }, \"Frontmatter\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Finding all documents with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#tag\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Finding all documents with instances of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[link]]\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Visualisations\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Full text search\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or, if search is too expensive/complex, when given a list of file names and line/column positions from VS Code search API, can return the document context (e.g. full paragraph, preceding/following line etc)\")))), mdx(\"h2\", {\n    \"id\": \"collaboration\"\n  }, \"Collaboration\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This week\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"List of things to work in order\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provide more vision on future state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Write about working and collaboration philosophy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \" Prioritise roadmap\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Week of July 13\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jani is available full time to work on this\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Janne: Write proposals, maybe more\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Riccardo: Available\")))), mdx(\"h2\", {\n    \"id\": \"configuration-management\"\n  }, \"Configuration management\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Other tools may not be able to use vscode\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \" Discuss with Janne and Riccardo\")), mdx(\"h2\", {\n    \"id\": \"feature-comparison\"\n  }, \"Feature comparison\"), mdx(\"p\", null, \"Useful for knowing what needs to be supported. See [\", \"[feature-comparison]\", \"].\"), mdx(\"h2\", {\n    \"id\": \"meeting-notes\"\n  }, \"Meeting notes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/meeting-notes/foam-core-2020-07-11/\",\n    \"title\": \"Foam Core 2020-07-11\"\n  }, \"foam-core-2020-07-11\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/foam-core/","title":"Foam Core"}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Features\", \"CLI\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"command-line-interface\"\n  }, \"Command Line Interface\"), mdx(\"p\", null, \"Create a CLI tool to allow running common Foam commands. These may include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"foam init\"), \" - create a new foam workspace\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"foam janitor\"), \" - run \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/workspace-janitor/\",\n    \"title\": \"Janitor\"\n  }, \"workspace-janitor\"), \" in current workspace\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"foam migrate <tool>\"), \" - migrate from tools like roam exports, obsidian and more\")), mdx(\"p\", null, \"More commands to be added.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/features/cli/","title":"Command Line Interface"}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Features\", \"Link\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"link-reference-definitions\"\n  }, \"Link Reference Definitions\"), mdx(\"h2\", {\n    \"id\": \"introduction\"\n  }, \"Introduction\"), mdx(\"p\", null, \"When you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[wikilinks]]\"), \", the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/foambubble/foam/tree/master/packages/foam-vscode\"\n  }, \"foam-vscode\"), \" extension will automatically generate \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://spec.commonmark.org/0.29/#link-reference-definitions\"\n  }, \"Markdown Link Reference Definitions\"), \" at the bottom of the file. This is done to make the content of the file compatible with various Markdown tools (e.g. parsers, static site generators, VS code plugins etc), which don't support \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[wikilinks]]\"), \".\"), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, \"The following example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-md\"\n  }, \"- [[wikilinks]]\\n- [[github-pages]]\\n\")), mdx(\"p\", null, \"...generates the following link reference definitions to the bottom of the file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-md\"\n  }, \"[wikilinks]: wikilinks \\\"Wikilinks\\\"\\n[github-pages]: github-pages \\\"GitHub Pages\\\"\\n\")), mdx(\"p\", null, \"You can open the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://foambubble.github.io/foam/features/link-reference-definitions.md\"\n  }, \"raw markdown\"), \" to see them at the bottom of this file\"), mdx(\"h2\", {\n    \"id\": \"specification\"\n  }, \"Specification\"), mdx(\"p\", null, \"The three components of a link reference definition are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[link-label]: link-target \\\"Link Title\\\"\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"link label:\"), \" The link text to match in the surrounding markdown document. This matches the inner bracket of the double-bracketed \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[wikilink]]\"), \" notation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"link destination\"), \" The target of the matched link\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"By default we generate links without extension. This can be overridden, see \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/#configuration/\"\n  }, \"Configuration\"), \" below\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\\"Link Title\\\"\"), \" Optional title for link (The Foam template has a snippet of JavaScript to replace this on the website at runtime)\")), mdx(\"h2\", {\n    \"id\": \"configuration\"\n  }, \"Configuration\"), mdx(\"p\", null, \"You can choose to generate link reference definitions with or without file extensions, depending on the target, or to disable the generation altogether. As a rule of thumb:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Links with file extensions work better with standard markdown-based tools, such as GitHub web UI.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Links without file extensions work better with certain web publishing tools that treat links as literal urls and don't transform them automatically, such as the standard GitHub pages installation.\")), mdx(\"p\", null, \"By default, Foam generates links without file extensions for legacy reasons, but this may change in future versions.\"), mdx(\"p\", null, \"You can override this setting in your Foam workspace's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"settings.json\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"foam.edit.linkReferenceDefinitions\\\": \\\"withoutExtensions\\\"\"), \" (default)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"foam.edit.linkReferenceDefinitions\\\": \\\"withExtensions\\\"\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"foam.edit.linkReferenceDefinitions\\\": \\\"off\\\"\"))), mdx(\"h3\", {\n    \"id\": \"ignoring-files\"\n  }, \"Ignoring files\"), mdx(\"p\", null, \"Sometimes, you may want to ignore certain files or folders, so that Foam doesn't generate link reference definitions to them.\"), mdx(\"p\", null, \"For instance, if you're using a local instance of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://jekyllrb.com/\"\n  }, \"Jekyll\"), \", you may find that it writes copies of each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".md\"), \" file into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_site\"), \" directory, which may lead to Foam generating references to them instead of the original source notes.\"), mdx(\"p\", null, \"You can ignore the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_site\"), \" directory by adding the following to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".vscode/settings.json\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"  \\\"files.exclude\\\": {\\n    \\\"**/_site\\\": true\\n  },\\n  \\\"files.watcherExclude\\\": {\\n    \\\"**/_site\\\": true\\n  },\\n\")), mdx(\"p\", null, \"After changing the setting in your workspace, you can run the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/features/workspace-janitor/\",\n    \"title\": \"Janitor\"\n  }, \"workspace-janitor\"), \" command to convert all existing definitions.\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \" \", \"_\", \"Implement a `foam.eclude\"), mdx(\"h2\", {\n    \"id\": \"future-improvements\"\n  }, \"Future improvements\"), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/link-reference-definition-improvements/\",\n    \"title\": \"Link Reference Definition Improvements\"\n  }, \"link-reference-definition-improvements\"), \" for further discussion on current problems and potential solutions.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/features/link-reference-definitions/","title":"Link Reference Definitions"}},{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Recipes\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"take-notes-on-mobile-phones\"\n  }, \"Take notes on mobile phones\"), mdx(\"p\", null, \"This #recipe offers solutions to taking Foam notes on the go.\"), mdx(\"p\", null, \"For the time being we have decided to not build a mobile app, but rely on third parties (see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/build-vs-assemble/\",\n    \"title\": \"Build vs Assemble\"\n  }, \"build-vs-assemble\"), \").\"), mdx(\"p\", null, \"The most promising options are:\"), mdx(\"h3\", {\n    \"id\": \"gitjournal\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://gitjournal.io/\"\n  }, \"GitJournal\")), mdx(\"p\", null, \"Pros\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open source\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Already a usable solution.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provides functionality to edit, create, and browser markdown files.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Support journal mode, todo lists, and free writing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Syncs to GitHub repo\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supports Wikilinks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supports Backlinks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Developer is happy to prioritize Foam compatibility\")), mdx(\"p\", null, \"Cons\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Doesn't generate link reference lists (but this is ok, since \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/workspace-janitor/\",\n    \"title\": \"Janitor\"\n  }, \"workspace-janitor\"), \" as a GitHub action can solve this)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not as sleek as Apple/Google notes, some keyboard state glitching on Android, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lack of control over roadmap. Established product with a paid plan, so may not be open to Foam-supportive changes and additions that don't benefit most users.\")), mdx(\"p\", null, \"Verdict: Good. By far best effort/outcome ratio would be to help improve GitJournal rather than building a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/recipes/#bespoke-mobile-app-for-foam/\"\n  }, \"bespoke mobile app\"), \".\"), mdx(\"h3\", {\n    \"id\": \"github-codespaces\"\n  }, \"GitHub Codespaces\"), mdx(\"p\", null, \"Pros\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Works out of the box just like the desktop app\")), mdx(\"p\", null, \"Cons\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"not generally available quite yet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/about-billing-for-codespaces\"\n  }, \"Pricing\"))), mdx(\"p\", null, \"For a quick demo, see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.youtube.com/watch?v=KI5m4Uy8_4I\"\n  }, \"https://www.youtube.com/watch?v=KI5m4Uy8_4I\"), \".\"), mdx(\"p\", null, \"Verdict: Good. Pricing should be reasonable for taking notes on the fly. Harder to assess for people who would constantly use Foam from mobile phone.\"), mdx(\"h2\", {\n    \"id\": \"bespoke-mobile-app-for-foam\"\n  }, \"Bespoke mobile app for Foam\"), mdx(\"p\", null, \"Given we already have a solution, why would we spend time and effort building a bespoke mobile app?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Taking notes on the go is a key part of a good note taking process, and the process should feel effortless\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Having a custom app could help us support key user workflows in a more Foam-specific manner\")), mdx(\"p\", null, \"If such an app was worth building, it would have to have the following features:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instant loading and syncing for quick notes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sleek, simple, beautifully designed user experience.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ability to search and navigate forward links and back links (onlly in paid GitJournal version)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Killer feature that makes it the best note taking tool for Foam (?)\")), mdx(\"p\", null, \"Given the effort vs reward ratio, it's a low priority for core team, but if someone wants to work on this, we can provide support! Talk to us on the #mobile-apps channel on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://foambubble.github.io/join-discord/w\"\n  }, \"Foam Discord\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/recipes/take-notes-from-mobile-phone/","title":"Take notes on mobile phones"}}]},"tagsOutbound":{"nodes":[{"frontmatter":{"title":"","tags":["Features","Backlink"]},"fields":{"slug":"/features/backlinking/","title":"Backlinking","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features","CLI"]},"fields":{"slug":"/features/cli/","title":"Command Line Interface","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features","New"]},"fields":{"slug":"/features/creating-new-notes/","title":"Creating New Notes","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features"]},"fields":{"slug":"/features/custom-markdown-preview-styles/","title":"Custom Markdown Preview Styles","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features"]},"fields":{"slug":"/features/custom-snippets/","title":"Adding Custom Snippets","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features"]},"fields":{"slug":"/features/daily-notes/","title":"Daily notes","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features"]},"fields":{"slug":"/features/foam-logging-in-vscode/","title":"Foam logging in VsCode","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features","Git"]},"fields":{"slug":"/features/git-integration/","title":"Git Integration","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features","Graph-Visualisation"]},"fields":{"slug":"/features/graph-visualisation/","title":"Graph Visualisation","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features"]},"fields":{"slug":"/features/key-bindings/","title":"Key Bindings","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features","Link"]},"fields":{"slug":"/features/link-reference-definitions/","title":"Link Reference Definitions","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features","Template"]},"fields":{"slug":"/features/note-templates/","title":"Note Templates","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Orphans","Features"]},"fields":{"slug":"/features/orphans/","title":"Orphans","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features","Tags"]},"fields":{"slug":"/features/tags/","title":"Tags","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","tags":["Features"]},"fields":{"slug":"/features/workspace-janitor/","title":"Janitor","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}}]}},"pageContext":{"tags":["Features"],"slug":"/features/workspace-janitor/","sidebarItems":[{"title":"","items":[{"title":"Links","url":"","external":false,"items":[{"title":"Foam Template","url":"https://github.com/theowenyoung/foam-template-gatsby-theme-primer-wiki","external":true,"items":[]},{"title":"Obsidian Template","url":"https://github.com/theowenyoung/obsidian-template-gatsby-theme-primer-wiki","external":true,"items":[]},{"title":"Real World Wiki","url":"https://wiki.owenyoung.com","external":true,"items":[]}],"indent":false,"collapse":true}],"collapse":true},{"title":"","items":[{"title":"Recently Updated","url":"/latest/","collapse":true,"indent":false,"items":[{"title":"10-14: Summary","url":"/SUMMARY/"},{"title":"09-09: Foam","url":"/"},{"title":"08-31: Page not found!","url":"/404/"},{"title":"08-31: Big Vision","url":"/big-vision/"},{"title":"08-31: Code of Conduct","url":"/code-of-conduct/"},{"title":"08-31: Contribution Guide","url":"/contribution-guide/"},{"title":"08-31: Frequently Asked Questions","url":"/frequently-asked-questions/"},{"title":"08-31: Inbox","url":"/inbox/"},{"title":"08-31: Principles","url":"/principles/"},{"title":"08-31: Reading list","url":"/reading-list/"}]}]},{"title":"Tags","items":[{"title":"Awesome","type":"tag","url":"/tags/awesome/","items":[{"title":"Reading list","url":"/reading-list/"},{"title":"Terminology","url":"/terminology/"}]},{"title":"Backlink","type":"tag","url":"/tags/backlink/","items":[{"title":"Backlinking","url":"/features/backlinking/"}]},{"title":"CLI","type":"tag","url":"/tags/cli/","items":[{"title":"Command Line Interface","url":"/features/cli/"}]},{"title":"Conduct","type":"tag","url":"/tags/conduct/","items":[{"title":"Code of Conduct","url":"/code-of-conduct/"}]},{"title":"Contribution","type":"tag","url":"/tags/contribution/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]},{"title":"Core","type":"tag","url":"/tags/core/","items":[{"title":"Foam Core","url":"/dev/foam-core/"}]},{"title":"Dev","type":"tag","url":"/tags/dev/","items":[{"title":"Architecture","url":"/dev/architecture/"},{"title":"Build vs Assemble","url":"/dev/build-vs-assemble/"},{"title":"Foam Core","url":"/dev/foam-core/"},{"title":"Foam File Format","url":"/dev/foam-file-format/"},{"title":"Good First Task","url":"/dev/good-first-task/"},{"title":"Materialized Backlinks (stub)","url":"/dev/materialized-backlinks/"},{"title":"Link Reference Definition Improvements","url":"/dev/link-reference-definition-improvements/"},{"title":"MDX by Default(stub)","url":"/dev/mdx-by-default/"},{"title":"Publishing Permissions(stub)","url":"/dev/publishing-permissions/"},{"title":"Roadmap","url":"/dev/roadmap/"},{"title":"Todo","url":"/dev/todo/"},{"title":"Unlinked references (stub)","url":"/dev/unlinked-references/"}]},{"title":"Extensions","type":"tag","url":"/tags/extensions/","items":[{"title":"Recommended Extensions","url":"/recommended-extensions/"}]},{"title":"FAQ","type":"tag","url":"/tags/faq/","items":[{"title":"Frequently Asked Questions","url":"/frequently-asked-questions/"}]},{"title":"Features","type":"tag","url":"/tags/features/","items":[{"title":"Backlinking","url":"/features/backlinking/"},{"title":"Command Line Interface","url":"/features/cli/"},{"title":"Creating New Notes","url":"/features/creating-new-notes/"},{"title":"Custom Markdown Preview Styles","url":"/features/custom-markdown-preview-styles/"},{"title":"Adding Custom Snippets","url":"/features/custom-snippets/"},{"title":"Daily notes","url":"/features/daily-notes/"},{"title":"Foam logging in VsCode","url":"/features/foam-logging-in-vscode/"},{"title":"Git Integration","url":"/features/git-integration/"},{"title":"Graph Visualisation","url":"/features/graph-visualisation/"},{"title":"Key Bindings","url":"/features/key-bindings/"},{"title":"Link Reference Definitions","url":"/features/link-reference-definitions/"},{"title":"Note Templates","url":"/features/note-templates/"},{"title":"Orphans","url":"/features/orphans/"},{"title":"Tags","url":"/features/tags/"},{"title":"Janitor","url":"/features/workspace-janitor/"}]},{"title":"Foam","type":"tag","url":"/tags/foam/","items":[{"title":"Foam","url":"/"}]},{"title":"Format","type":"tag","url":"/tags/format/","items":[{"title":"Foam File Format","url":"/dev/foam-file-format/"}]},{"title":"Gatsby","type":"tag","url":"/tags/gatsby/","items":[{"title":"Generate a site using Gatsby","url":"/publishing/generate-gatsby-site/"}]},{"title":"Git","type":"tag","url":"/tags/git/","items":[{"title":"Git Integration","url":"/features/git-integration/"}]},{"title":"Github","type":"tag","url":"/tags/github/","items":[{"title":"GitHub Pages","url":"/publishing/publish-to-github-pages/"}]},{"title":"Graph-Visualisation","type":"tag","url":"/tags/graph-visualisation/","items":[{"title":"Graph Visualisation","url":"/features/graph-visualisation/"}]},{"title":"Inbox","type":"tag","url":"/tags/inbox/","items":[{"title":"Inbox","url":"/inbox/"}]},{"title":"Link","type":"tag","url":"/tags/link/","items":[{"title":"Link Reference Definitions","url":"/features/link-reference-definitions/"}]},{"title":"Mdx","type":"tag","url":"/tags/mdx/","items":[{"title":"MDX by Default(stub)","url":"/dev/mdx-by-default/"}]},{"title":"Meetings","type":"tag","url":"/tags/meetings/","items":[{"title":"Foam Core 2020-07-11","url":"/meeting-notes/foam-core-2020-07-11/"}]},{"title":"New","type":"tag","url":"/tags/new/","items":[{"title":"Creating New Notes","url":"/features/creating-new-notes/"}]},{"title":"Orphans","type":"tag","url":"/tags/orphans/","items":[{"title":"Orphans","url":"/features/orphans/"}]},{"title":"Principles","type":"tag","url":"/tags/principles/","items":[{"title":"Principles","url":"/principles/"}]},{"title":"Publish","type":"tag","url":"/tags/publish/","items":[{"title":"Generate a site using Gatsby","url":"/publishing/generate-gatsby-site/"},{"title":"Publishing pages","url":"/publishing/"},{"title":"Katex Math Rendering","url":"/publishing/math-support-with-katex/"},{"title":"Math Support","url":"/publishing/math-support-with-mathjax/"},{"title":"Publish to Azure DevOps Wiki","url":"/publishing/publish-to-azure-devops-wiki/"},{"title":"GitHub Pages","url":"/publishing/publish-to-github-pages/"},{"title":"Publish to GitHub","url":"/publishing/publish-to-github/"},{"title":"GitLab Pages","url":"/publishing/publish-to-gitlab-pages/"},{"title":"Publish to Netlify with Eleventy","url":"/publishing/publish-to-netlify-with-eleventy/"},{"title":"Publish to Vercel","url":"/publishing/publish-to-vercel/"}]},{"title":"Recipes","type":"tag","url":"/tags/recipes/","items":[{"title":"Add images to your notes","url":"/recipes/add-images-to-notes/"},{"title":"Automatically Sync with Git","url":"/recipes/automatic-git-syncing/"},{"title":"Automatically Expand URLs to Well-Titled Links","url":"/recipes/automatically-expand-urls-to-well-titled-links/"},{"title":"Capture Notes With Drafts Pro","url":"/recipes/capture-notes-with-drafts-pro/"},{"title":"Capture Notes With Shortcuts and GitHub Actions","url":"/recipes/capture-notes-with-shortcuts-and-github-actions/"},{"title":"Diagrams in Markdown","url":"/recipes/diagrams-in-markdown/"},{"title":"How to Write Recipes","url":"/recipes/how-to-write-recipes/"},{"title":"Make Backlinks More Prominent","url":"/recipes/make-backlinks-more-prominent/"},{"title":"Migrating from Obsidian (stub)","url":"/recipes/migrating-from-obsidian/"},{"title":"Migrating from OneNote","url":"/recipes/migrating-from-onenote/"},{"title":"Migrating from Roam (stub)","url":"/recipes/migrating-from-roam/"},{"title":"Custom Note Macros","url":"/recipes/note-macros/"},{"title":"Pre-defined User Snippets","url":"/recipes/predefined-user-snippets/"},{"title":"Real-time Collaboration","url":"/recipes/real-time-collaboration/"},{"title":"Recipes","url":"/recipes/recipes/"},{"title":"Search for Notes","url":"/recipes/search-for-notes/"},{"title":"Shows Image Preview on Hover","url":"/recipes/shows-image-preview-on-hover/"},{"title":"Take notes on mobile phones","url":"/recipes/take-notes-from-mobile-phone/"},{"title":"Web Clipper","url":"/recipes/web-clipper/"},{"title":"Write your notes in GitHub Gist","url":"/recipes/write-your-notes-in-github-gist/"}]},{"title":"Roadmap","type":"tag","url":"/tags/roadmap/","items":[{"title":"Roadmap","url":"/dev/roadmap/"}]},{"title":"Tags","type":"tag","url":"/tags/tags/","items":[{"title":"Tags","url":"/features/tags/"}]},{"title":"Task","type":"tag","url":"/tags/task/","items":[{"title":"Good First Task","url":"/dev/good-first-task/"}]},{"title":"Template","type":"tag","url":"/tags/template/","items":[{"title":"Note Templates","url":"/features/note-templates/"}]},{"title":"Templates","type":"tag","url":"/tags/templates/","items":[{"title":"Templates v2 Proposal <!-- omit in TOC -->","url":"/proposals/templates-v2/"}]},{"title":"Todo","type":"tag","url":"/tags/todo/","items":[{"title":"Todo","url":"/dev/todo/"}]},{"title":"Vercel","type":"tag","url":"/tags/vercel/","items":[{"title":"Publish to Vercel","url":"/publishing/publish-to-vercel/"}]},{"title":"Vision","type":"tag","url":"/tags/vision/","items":[{"title":"Big Vision","url":"/big-vision/"}]},{"title":"Wikilinks","type":"tag","url":"/tags/wikilinks/","items":[{"title":"Wikilinks","url":"/wikilinks/"}]},{"title":"architecture","type":"tag","url":"/tags/architecture/","items":[{"title":"Architecture","url":"/dev/architecture/"}]},{"title":"good-first-task","type":"tag","url":"/tags/good-first-task/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]},{"title":"todo","type":"tag","url":"/tags/todo/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]}]}],"tagsGroups":[{"title":"Awesome","type":"tag","url":"/tags/awesome/","items":[{"title":"Reading list","url":"/reading-list/"},{"title":"Terminology","url":"/terminology/"}]},{"title":"Backlink","type":"tag","url":"/tags/backlink/","items":[{"title":"Backlinking","url":"/features/backlinking/"}]},{"title":"CLI","type":"tag","url":"/tags/cli/","items":[{"title":"Command Line Interface","url":"/features/cli/"}]},{"title":"Conduct","type":"tag","url":"/tags/conduct/","items":[{"title":"Code of Conduct","url":"/code-of-conduct/"}]},{"title":"Contribution","type":"tag","url":"/tags/contribution/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]},{"title":"Core","type":"tag","url":"/tags/core/","items":[{"title":"Foam Core","url":"/dev/foam-core/"}]},{"title":"Dev","type":"tag","url":"/tags/dev/","items":[{"title":"Architecture","url":"/dev/architecture/"},{"title":"Build vs Assemble","url":"/dev/build-vs-assemble/"},{"title":"Foam Core","url":"/dev/foam-core/"},{"title":"Foam File Format","url":"/dev/foam-file-format/"},{"title":"Good First Task","url":"/dev/good-first-task/"},{"title":"Materialized Backlinks (stub)","url":"/dev/materialized-backlinks/"},{"title":"Link Reference Definition Improvements","url":"/dev/link-reference-definition-improvements/"},{"title":"MDX by Default(stub)","url":"/dev/mdx-by-default/"},{"title":"Publishing Permissions(stub)","url":"/dev/publishing-permissions/"},{"title":"Roadmap","url":"/dev/roadmap/"},{"title":"Todo","url":"/dev/todo/"},{"title":"Unlinked references (stub)","url":"/dev/unlinked-references/"}]},{"title":"Extensions","type":"tag","url":"/tags/extensions/","items":[{"title":"Recommended Extensions","url":"/recommended-extensions/"}]},{"title":"FAQ","type":"tag","url":"/tags/faq/","items":[{"title":"Frequently Asked Questions","url":"/frequently-asked-questions/"}]},{"title":"Features","type":"tag","url":"/tags/features/","items":[{"title":"Backlinking","url":"/features/backlinking/"},{"title":"Command Line Interface","url":"/features/cli/"},{"title":"Creating New Notes","url":"/features/creating-new-notes/"},{"title":"Custom Markdown Preview Styles","url":"/features/custom-markdown-preview-styles/"},{"title":"Adding Custom Snippets","url":"/features/custom-snippets/"},{"title":"Daily notes","url":"/features/daily-notes/"},{"title":"Foam logging in VsCode","url":"/features/foam-logging-in-vscode/"},{"title":"Git Integration","url":"/features/git-integration/"},{"title":"Graph Visualisation","url":"/features/graph-visualisation/"},{"title":"Key Bindings","url":"/features/key-bindings/"},{"title":"Link Reference Definitions","url":"/features/link-reference-definitions/"},{"title":"Note Templates","url":"/features/note-templates/"},{"title":"Orphans","url":"/features/orphans/"},{"title":"Tags","url":"/features/tags/"},{"title":"Janitor","url":"/features/workspace-janitor/"}]},{"title":"Foam","type":"tag","url":"/tags/foam/","items":[{"title":"Foam","url":"/"}]},{"title":"Format","type":"tag","url":"/tags/format/","items":[{"title":"Foam File Format","url":"/dev/foam-file-format/"}]},{"title":"Gatsby","type":"tag","url":"/tags/gatsby/","items":[{"title":"Generate a site using Gatsby","url":"/publishing/generate-gatsby-site/"}]},{"title":"Git","type":"tag","url":"/tags/git/","items":[{"title":"Git Integration","url":"/features/git-integration/"}]},{"title":"Github","type":"tag","url":"/tags/github/","items":[{"title":"GitHub Pages","url":"/publishing/publish-to-github-pages/"}]},{"title":"Graph-Visualisation","type":"tag","url":"/tags/graph-visualisation/","items":[{"title":"Graph Visualisation","url":"/features/graph-visualisation/"}]},{"title":"Inbox","type":"tag","url":"/tags/inbox/","items":[{"title":"Inbox","url":"/inbox/"}]},{"title":"Link","type":"tag","url":"/tags/link/","items":[{"title":"Link Reference Definitions","url":"/features/link-reference-definitions/"}]},{"title":"Mdx","type":"tag","url":"/tags/mdx/","items":[{"title":"MDX by Default(stub)","url":"/dev/mdx-by-default/"}]},{"title":"Meetings","type":"tag","url":"/tags/meetings/","items":[{"title":"Foam Core 2020-07-11","url":"/meeting-notes/foam-core-2020-07-11/"}]},{"title":"New","type":"tag","url":"/tags/new/","items":[{"title":"Creating New Notes","url":"/features/creating-new-notes/"}]},{"title":"Orphans","type":"tag","url":"/tags/orphans/","items":[{"title":"Orphans","url":"/features/orphans/"}]},{"title":"Principles","type":"tag","url":"/tags/principles/","items":[{"title":"Principles","url":"/principles/"}]},{"title":"Publish","type":"tag","url":"/tags/publish/","items":[{"title":"Generate a site using Gatsby","url":"/publishing/generate-gatsby-site/"},{"title":"Publishing pages","url":"/publishing/"},{"title":"Katex Math Rendering","url":"/publishing/math-support-with-katex/"},{"title":"Math Support","url":"/publishing/math-support-with-mathjax/"},{"title":"Publish to Azure DevOps Wiki","url":"/publishing/publish-to-azure-devops-wiki/"},{"title":"GitHub Pages","url":"/publishing/publish-to-github-pages/"},{"title":"Publish to GitHub","url":"/publishing/publish-to-github/"},{"title":"GitLab Pages","url":"/publishing/publish-to-gitlab-pages/"},{"title":"Publish to Netlify with Eleventy","url":"/publishing/publish-to-netlify-with-eleventy/"},{"title":"Publish to Vercel","url":"/publishing/publish-to-vercel/"}]},{"title":"Recipes","type":"tag","url":"/tags/recipes/","items":[{"title":"Add images to your notes","url":"/recipes/add-images-to-notes/"},{"title":"Automatically Sync with Git","url":"/recipes/automatic-git-syncing/"},{"title":"Automatically Expand URLs to Well-Titled Links","url":"/recipes/automatically-expand-urls-to-well-titled-links/"},{"title":"Capture Notes With Drafts Pro","url":"/recipes/capture-notes-with-drafts-pro/"},{"title":"Capture Notes With Shortcuts and GitHub Actions","url":"/recipes/capture-notes-with-shortcuts-and-github-actions/"},{"title":"Diagrams in Markdown","url":"/recipes/diagrams-in-markdown/"},{"title":"How to Write Recipes","url":"/recipes/how-to-write-recipes/"},{"title":"Make Backlinks More Prominent","url":"/recipes/make-backlinks-more-prominent/"},{"title":"Migrating from Obsidian (stub)","url":"/recipes/migrating-from-obsidian/"},{"title":"Migrating from OneNote","url":"/recipes/migrating-from-onenote/"},{"title":"Migrating from Roam (stub)","url":"/recipes/migrating-from-roam/"},{"title":"Custom Note Macros","url":"/recipes/note-macros/"},{"title":"Pre-defined User Snippets","url":"/recipes/predefined-user-snippets/"},{"title":"Real-time Collaboration","url":"/recipes/real-time-collaboration/"},{"title":"Recipes","url":"/recipes/recipes/"},{"title":"Search for Notes","url":"/recipes/search-for-notes/"},{"title":"Shows Image Preview on Hover","url":"/recipes/shows-image-preview-on-hover/"},{"title":"Take notes on mobile phones","url":"/recipes/take-notes-from-mobile-phone/"},{"title":"Web Clipper","url":"/recipes/web-clipper/"},{"title":"Write your notes in GitHub Gist","url":"/recipes/write-your-notes-in-github-gist/"}]},{"title":"Roadmap","type":"tag","url":"/tags/roadmap/","items":[{"title":"Roadmap","url":"/dev/roadmap/"}]},{"title":"Tags","type":"tag","url":"/tags/tags/","items":[{"title":"Tags","url":"/features/tags/"}]},{"title":"Task","type":"tag","url":"/tags/task/","items":[{"title":"Good First Task","url":"/dev/good-first-task/"}]},{"title":"Template","type":"tag","url":"/tags/template/","items":[{"title":"Note Templates","url":"/features/note-templates/"}]},{"title":"Templates","type":"tag","url":"/tags/templates/","items":[{"title":"Templates v2 Proposal <!-- omit in TOC -->","url":"/proposals/templates-v2/"}]},{"title":"Todo","type":"tag","url":"/tags/todo/","items":[{"title":"Todo","url":"/dev/todo/"}]},{"title":"Vercel","type":"tag","url":"/tags/vercel/","items":[{"title":"Publish to Vercel","url":"/publishing/publish-to-vercel/"}]},{"title":"Vision","type":"tag","url":"/tags/vision/","items":[{"title":"Big Vision","url":"/big-vision/"}]},{"title":"Wikilinks","type":"tag","url":"/tags/wikilinks/","items":[{"title":"Wikilinks","url":"/wikilinks/"}]},{"title":"architecture","type":"tag","url":"/tags/architecture/","items":[{"title":"Architecture","url":"/dev/architecture/"}]},{"title":"good-first-task","type":"tag","url":"/tags/good-first-task/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]},{"title":"todo","type":"tag","url":"/tags/todo/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]}],"latestPosts":[{"fields":{"slug":"/SUMMARY/","title":"Summary","lastUpdatedAt":"2021-10-14T22:16:45.000Z","lastUpdated":"10/14/2021"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/","title":"Foam","lastUpdatedAt":"2021-09-09T14:55:13.000Z","lastUpdated":"9/9/2021"},"frontmatter":{"draft":false,"tags":["Foam"]}},{"fields":{"slug":"/404/","title":"Page not found!","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":[]}},{"fields":{"slug":"/big-vision/","title":"Big Vision","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["Vision"]}},{"fields":{"slug":"/code-of-conduct/","title":"Code of Conduct","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["Conduct"]}},{"fields":{"slug":"/contribution-guide/","title":"Contribution Guide","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["todo","good-first-task","Contribution"]}},{"fields":{"slug":"/frequently-asked-questions/","title":"Frequently Asked Questions","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["FAQ"]}},{"fields":{"slug":"/inbox/","title":"Inbox","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["Inbox"]}},{"fields":{"slug":"/principles/","title":"Principles","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["Principles"]}},{"fields":{"slug":"/reading-list/","title":"Reading list","lastUpdatedAt":"2021-08-31T04:06:30.000Z","lastUpdated":"8/31/2021"},"frontmatter":{"draft":false,"tags":["Awesome"]}}]}},
    "staticQueryHashes": ["2230547434","2320115945","3495835395","451533639"]}