{"data":{"allMdx":{"nodes":[{"fields":{"slug":"/404/","title":"Page not found!"},"frontmatter":{"draft":false},"rawBody":"# Page not found!\r\n\r\nWell, that shouldn't have happened!\r\n\r\nIf you got here via a link from another document, please file an [issue](https://github.com/foambubble/foam/issues) on our GitHub repo including:\r\n\r\n- the page you came from\r\n- the link you followed\r\n\r\nThanks!\r\n\r\n-The Foam Team\r\n"},{"fields":{"slug":"/big-vision/","title":"Big Vision"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Vision\r\n---\r\n\r\n# Big Vision\r\n\r\n[[todo]]\r\n\r\n- What methodologies do we want to support?\r\n  - Zettelkasten?\r\n  - GTD? (Get Things Done)\r\n  - Digital gardening?\r\n  - Blogging/publishing\r\n  - Others?\r\n- Be an educational tool as much as a tool to implement these methodologies\r\n- What use cases are we working towards? -[[todo]] User round table\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[todo]: dev/todo.md \"Todo\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/code-of-conduct/","title":"Code of Conduct"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Conduct\r\n---\r\n\r\n# Code of Conduct\r\n\r\nWe follow the [Contributor Covenant](https://www.contributor-covenant.org/) code of conduct.\r\n\r\n## Our Pledge\r\n\r\nWe as members, contributors, and leaders pledge to make participation in our\r\ncommunity a harassment-free experience for everyone, regardless of age, body\r\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\r\nidentity and expression, level of experience, education, socio-economic status,\r\nnationality, personal appearance, race, religion, or sexual identity\r\nand orientation.\r\n\r\nWe pledge to act and interact in ways that contribute to an open, welcoming,\r\ndiverse, inclusive, and healthy community.\r\n\r\n## Our Standards\r\n\r\nExamples of behavior that contributes to a positive environment for our\r\ncommunity include:\r\n\r\n- Demonstrating empathy and kindness toward other people\r\n- Being respectful of differing opinions, viewpoints, and experiences\r\n- Giving and gracefully accepting constructive feedback\r\n- Accepting responsibility and apologizing to those affected by our mistakes,\r\n  and learning from the experience\r\n- Focusing on what is best not just for us as individuals, but for the\r\n  overall community\r\n\r\nExamples of unacceptable behavior include:\r\n\r\n- The use of sexualized language or imagery, and sexual attention or\r\n  advances of any kind\r\n- Trolling, insulting or derogatory comments, and personal or political attacks\r\n- Public or private harassment\r\n- Publishing others' private information, such as a physical or email\r\n  address, without their explicit permission\r\n- Other conduct which could reasonably be considered inappropriate in a\r\n  professional setting\r\n\r\n## Enforcement Responsibilities\r\n\r\nCommunity leaders are responsible for clarifying and enforcing our standards of\r\nacceptable behavior and will take appropriate and fair corrective action in\r\nresponse to any behavior that they deem inappropriate, threatening, offensive,\r\nor harmful.\r\n\r\nCommunity leaders have the right and responsibility to remove, edit, or reject\r\ncomments, commits, code, wiki edits, issues, and other contributions that are\r\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\r\ndecisions when appropriate.\r\n\r\n## Scope\r\n\r\nThis Code of Conduct applies within all community spaces, and also applies when\r\nan individual is officially representing the community in public spaces.\r\nExamples of representing our community include using an official e-mail address,\r\nposting via an official social media account, or acting as an appointed\r\nrepresentative at an online or offline event.\r\n\r\n## Enforcement\r\n\r\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\r\nreported to the community leaders responsible for enforcement at `riki.code+foam@gmail.com`.\r\n\r\nAll complaints will be reviewed and investigated promptly and fairly.\r\n\r\nAll community leaders are obligated to respect the privacy and security of the\r\nreporter of any incident.\r\n\r\n## Enforcement Guidelines\r\n\r\nCommunity leaders will follow these Community Impact Guidelines in determining\r\nthe consequences for any action they deem in violation of this Code of Conduct:\r\n\r\n### 1. Correction\r\n\r\n**Community Impact**: Use of inappropriate language or other behavior deemed\r\nunprofessional or unwelcome in the community.\r\n\r\n**Consequence**: A private, written warning from community leaders, providing\r\nclarity around the nature of the violation and an explanation of why the\r\nbehavior was inappropriate. A public apology may be requested.\r\n\r\n### 2. Warning\r\n\r\n**Community Impact**: A violation through a single incident or series\r\nof actions.\r\n\r\n**Consequence**: A warning with consequences for continued behavior. No\r\ninteraction with the people involved, including unsolicited interaction with\r\nthose enforcing the Code of Conduct, for a specified period of time. This\r\nincludes avoiding interactions in community spaces as well as external channels\r\nlike social media. Violating these terms may lead to a temporary or\r\npermanent ban.\r\n\r\n### 3. Temporary Ban\r\n\r\n**Community Impact**: A serious violation of community standards, including\r\nsustained inappropriate behavior.\r\n\r\n**Consequence**: A temporary ban from any sort of interaction or public\r\ncommunication with the community for a specified period of time. No public or\r\nprivate interaction with the people involved, including unsolicited interaction\r\nwith those enforcing the Code of Conduct, is allowed during this period.\r\nViolating these terms may lead to a permanent ban.\r\n\r\n### 4. Permanent Ban\r\n\r\n**Community Impact**: Demonstrating a pattern of violation of community\r\nstandards, including sustained inappropriate behavior, harassment of an\r\nindividual, or aggression toward or disparagement of classes of individuals.\r\n\r\n**Consequence**: A permanent ban from any sort of public interaction within\r\nthe community.\r\n\r\n## Attribution\r\n\r\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\r\nversion 2.0, available at\r\n<https://www.contributor-covenant.org/version/2/0/code_of_conduct.html>.\r\n\r\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\r\nenforcement ladder](https://github.com/mozilla/diversity).\r\n\r\n[homepage]: https://www.contributor-covenant.org\r\n\r\nFor answers to common questions about this code of conduct, see the FAQ at\r\n<https://www.contributor-covenant.org/faq>. Translations are available at\r\n<https://www.contributor-covenant.org/translations>.\r\n"},{"fields":{"slug":"/contribution-guide/","title":"Contribution Guide"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - todo\r\n  - good-first-task\r\n  - Contribution\r\n---\r\n\r\n# Contribution Guide\r\n\r\nFoam is open to contributions of any kind, including but not limited to code, documentation, ideas, and feedback.\r\nThis guide aims to help guide new and seasoned contributors getting around the Foam codebase.\r\n\r\n## Getting Up To Speed\r\n\r\nBefore you start contributing we recommend that you read the following links:\r\n\r\n- [[principles]] - This document describes the guiding principles behind Foam.\r\n- [[code-of-conduct]] - Rules we hope every contributor aims to follow, allowing everyone to participate in our community!\r\n\r\n## Diving In\r\n\r\nWe understand that diving in an unfamiliar codebase may seem scary,\r\nto make it easier for new contributors we provide some resources:\r\n\r\n- [[architecture]] - This document describes the architecture of Foam and how the repository is structured.\r\n\r\nYou can also see [existing issues](https://github.com/foambubble/foam/issues) and help out!\r\nFinally, the easiest way to help, is to use it and provide feedback by [submitting issues](https://github.com/foambubble/foam/issues/new/choose) or participating in the [Foam Community Discord](https://foambubble.github.io/join-discord/g)!\r\n\r\n## Contributing\r\n\r\nIf you're interested in contributing, this short guide will help you get things set up locally.\r\n\r\n1. Clone the repo locally:\r\n\r\n   `git clone https://github.com/foambubble/foam.git`\r\n\r\n2. Install the necessary dependencies by running this command from the root:\r\n\r\n   `yarn install`\r\n\r\n3. This project uses [Yarn workspaces](https://classic.yarnpkg.com/en/docs/workspaces/). `foam-vscode` relies on `foam-core`. This means we need to compile it before we do any extension development. From the root, run the command:\r\n\r\n   `yarn build`\r\n\r\nYou should now be ready to start working!\r\n\r\n### Testing\r\n\r\nCode needs to come with tests.\r\nWe use the following convention in Foam:\r\n\r\n- \\*.test.ts are unit tests\r\n- \\*.spec.ts are integration tests\r\n\r\nAlso, note that tests in `foam-core` live in the `test` directory.\r\nTests in `foam-vscode` live alongside the code in `src`.\r\n\r\n### The VS Code Extension\r\n\r\nThis guide assumes you read the previous instructions and you're set up to work on Foam.\r\n\r\n1. Now we'll use the launch configuration defined at [`.vscode/launch.json`](https://github.com/foambubble/foam/blob/master/.vscode/launch.json) to start a new extension host of VS Code. Open the \"Run and Debug\" Activity (the icon with the bug on the far left) and select \"Run VSCode Extension\" in the pop-up menu. Now hit F5 or click the green arrow \"play\" button to fire up a new copy of VS Code with your extension installed.\r\n\r\n2. In the new extension host of VS Code that launched, open a Foam workspace (e.g. your personal one, or a test-specific one created from [foam-template](https://github.com/foambubble/foam-template)). This is strictly not necessary, but the extension won't auto-run unless it's in a workspace with a `.vscode/foam.json` file.\r\n\r\n3. Test a command to make sure it's working as expected. Open the Command Palette (Ctrl/Cmd + Shift + P) and select \"Foam: Update Markdown Reference List\". If you see no errors, it's good to go!\r\n\r\n---\r\n\r\nFeel free to modify and submit a PR if this guide is out-of-date or contains errors!\r\n\r\n---\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[principles]: principles.md \"Principles\"\r\n[code-of-conduct]: code-of-conduct.md \"Code of Conduct\"\r\n[architecture]: dev/architecture.md \"Architecture\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/frequently-asked-questions/","title":"Frequently Asked Questions"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - FAQ\r\n---\r\n\r\n# Frequently Asked Questions\r\n\r\n> ⚠️ Foam is still in preview. Expect the experience to be a little rough.\r\n\r\n- [Frequently Asked Questions](#frequently-asked-questions)\r\n  - [Links/Graphs/BackLinks don't work. How do I enable them?](#linksgraphsbacklinks-dont-work-how-do-i-enable-them)\r\n  - [I don't want Foam enabled for all my workspaces](#i-dont-want-foam-enabled-for-all-my-workspaces)\r\n\r\n## Links/Graphs/BackLinks don't work. How do I enable them?\r\n\r\n- Ensure that you have all the [[recommended-extensions]] installed in Visual Studio Code\r\n- Reload Visual Studio Code by running `Cmd` + `Shift` + `P` (`Ctrl` + `Shift` + `P` for Windows), type \"reload\" and run the **Developer: Reload Window** command to for the updated extensions take effect\r\n- Check the formatting rules for links on [[foam-file-format]], [[wikilinks]] and [[link-formatting-and-autocompletion]]\r\n\r\n## I don't want Foam enabled for all my workspaces\r\n\r\nAny extension you install in Visual Studio Code is enabled by default. Give the philosophy of Foam it works out of the box without doing any configuration upfront. In case you want to disable Foam for a specific workspace, or disable Foam by default and enable it for specific workspaces, it is advised to follow the best practices as [documented by Visual Studio Code](https://code.visualstudio.com/docs/editor/extension-marketplace#_manage-extensions)\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[recommended-extensions]: recommended-extensions.md \"Recommended Extensions\"\r\n[foam-file-format]: dev/foam-file-format.md \"Foam File Format\"\r\n[wikilinks]: wikilinks.md \"Wikilinks\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/inbox/","title":"Inbox"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Inbox\r\n---\r\n\r\n# Inbox\r\n\r\nUncategorised thoughts, to be added\r\n\r\n- Release notes\r\n- Markdown Preview\r\n  - It's possible to customise the markdown preview styling. **Maybe make it use local foam workspace styles for live preview of the site??**\r\n    - See: <https://marketplace.visualstudio.com/items?itemName=bierner.markdown-preview-github-styles>\r\n- Use VS Code [CodeTour](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour) for onboarding\r\n- Investigate other similar extensions:\r\n  - [Unotes](https://marketplace.visualstudio.com/items?itemName=ryanmcalister.Unotes)\r\n  - [vscode-memo](https://github.com/svsool/vscode-memo)\r\n  - [gistpad wiki](https://github.com/jevakallio/gistpad/tree/master/src/repos/wiki)\r\n- Open in Foam\r\n  - When you want to open a Foam published website in your own VS Code, we could have a \"Open in Foam\" link that opens the link in VS Code via a url binding (if possible), downloads the github repo locally, and opens it as a Foam workspace.\r\n  - Every Foam could have a different theme even in the editor, so you'll see it like they see it\r\n    - UI and layout design of your workspace can become a thing\r\n- VS Code Notebooks API\r\n  - <https://code.visualstudio.com/api/extension-guides/notebook>\r\n- Future architecture\r\n  - Could we do publish-related settings as a pre-push git hook, e.g. generating footnote labels\r\n  - Running them on GitHub Actions to edit stuff as it comes in\r\n    - Ideally, we shouldn't have to touch files, should be just markdown\r\n- Looking at the errors/warnings/output panes makes me think, what kind of automated quality tools could we write.\r\n  - Deduplication, finding similarities...\r\n  - Thought Debugger?\r\n  - Knowledge Debugger?\r\n  - Janitor? Gardener?\r\n  - Foam Compiler?\r\n- Should support Netlify deploys out of the box\r\n- Foam should tick at the same frequency as your brain, and the Foam graph you build should match the mental model you have in your head, making navigation effortless.\r\n  - Maps have persistent topologies. As the graph grows, you should be able to visualise where an idea belongs. Maybe a literal map? And island? A DeckGL visualisation?\r\n\r\nTesting: This file is served from the /docs directory.\r\n"},{"fields":{"slug":"/","title":"Foam"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Foam\r\n---\r\n\r\n# Foam\r\n\r\n**Foam** is a personal knowledge management and sharing system inspired by [Roam Research](https://roamresearch.com/), built on [Visual Studio Code](https://code.visualstudio.com/) and [GitHub](https://github.com/).\r\n\r\nYou can use **Foam** for organising your research, keeping re-discoverable notes, writing long-form content and, optionally, publishing it to the web.\r\n\r\n**Foam** is free, open source, and extremely extensible to suit your personal workflow. You own the information you create with Foam, and you're free to share it, and collaborate on it with anyone you want.\r\n\r\n<p class=\"announcement\">\r\n  <b>New!</b> Join <a href=\"https://foambubble.github.io/join-discord/w\" target=\"_blank\">Foam community Discord</a> for users and contributors!\r\n</p>\r\n\r\n<div class=\"website-only\">\r\n    <a class=\"github-button\" href=\"https://github.com/foambubble/foam\" data-icon=\"octicon-star\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star foambubble/foam on GitHub\">Star</a>\r\n    <a class=\"github-button\" href=\"https://github.com/foambubble/foam-template\" data-icon=\"octicon-repo-template\" data-size=\"large\" aria-label=\"Use this template foambubble/foam-template on GitHub\">Use this template</a>\r\n</div>\r\n\r\n## Table of Contents\r\n\r\n- [Foam](#foam)\r\n  - [Table of Contents](#table-of-contents)\r\n  - [How do I use Foam?](#how-do-i-use-foam)\r\n  - [What's in a Foam?](#whats-in-a-foam)\r\n  - [Getting started](#getting-started)\r\n  - [Features](#features)\r\n  - [Call To Adventure](#call-to-adventure)\r\n  - [License](#license)\r\n\r\n## How do I use Foam?\r\n\r\n**Foam** is a tool that supports creating relationships between thoughts and information to help you think better.\r\n\r\n![Foam kitchen sink, showing a few of the key features](assets/images/foam-features-dark-mode-demo.png)\r\n\r\nWhether you want to build a [Second Brain](https://www.buildingasecondbrain.com/) or a [Zettelkasten](https://zettelkasten.de/posts/overview/), write a book, or just get better at long-term learning, **Foam** can help you organise your thoughts if you follow these simple rules:\r\n\r\n1. Create a single **Foam** workspace for all your knowledge and research following the [Getting started](#getting-started) guide.\r\n2. Write your thoughts in markdown documents (I like to call them **Bubbles**, but that might be more than a little twee). These documents should be atomic: Put things that belong together into a single document, and limit its content to that single topic. ([source](https://zettelkasten.de/posts/overview/#principles))\r\n3. Use Foam's shortcuts and autocompletions to link your thoughts together with `[[wikilinks]]`, and navigate between them to explore your knowledge graph.\r\n4. Get an overview of your **Foam** workspace using a [[graph-visualisation]] (⚠️ WIP), and discover relationships between your thoughts with the use of [[backlinking]].\r\n\r\nFoam is a like a bathtub: _What you get out of it depends on what you put into it._\r\n\r\n## What's in a Foam?\r\n\r\nLike the soapy suds it's named after, **Foam** is mostly air.\r\n\r\n1. The editing experience of **Foam** is powered by VS Code, enhanced by workspace settings that glue together [[recommended-extensions]] and preferences optimised for writing and navigating information.\r\n2. To back up, collaborate on and share your content between devices, Foam pairs well with [GitHub](http://github.com/).\r\n3. To publish your content, you can set it up to publish to [GitHub Pages](https://pages.github.com/), or to any website hosting platform like [Netlify](http://netlify.com/) or [Vercel](https://vercel.com).\r\n\r\n> **Fun fact**: This documentation was researched, written and published using **Foam**.\r\n\r\n## Getting started\r\n\r\n> ⚠️ Foam is still in preview. Expect the experience to be a little rough.\r\n\r\nThese instructions assume you have a GitHub account, and you have Visual Studio Code installed.\r\n\r\n1. Use the [foam-template project](https://github.com/foambubble/foam-template) to generate a new repository. If you're logged into GitHub, you can just hit this button:\r\n\r\n   <a class=\"github-button\" href=\"https://github.com/foambubble/foam-template/generate\" data-icon=\"octicon-repo-template\" data-size=\"large\" aria-label=\"Use this template foambubble/foam-template on GitHub\">Use this template</a>\r\n\r\n   _If you want to keep your thoughts to yourself, remember to set the repository private, or if you don't want to use GitHub to host your workspace at all, choose [**Download as ZIP**](https://github.com/foambubble/foam-template/archive/master.zip) instead of **Use this template**._\r\n\r\n2. [Clone the repository locally](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository) and open it in VS Code.\r\n\r\n   _Open the repository as a folder using the `File > Open...` menu item. In VS Code, \"open workspace\" refers to [multi-root workspaces](https://code.visualstudio.com/docs/editor/multi-root-workspaces)._\r\n\r\n3. When prompted to install recommended extensions, click **Install all** (or **Show Recommendations** if you want to review and install them one by one)\r\n\r\nAfter setting up the repository, open `.vscode/settings.json` and edit, add or remove any settings you'd like for your Foam workspace.\r\n\r\nTo learn more about how to use **Foam**, read the [[recipes]].\r\n\r\nGetting stuck in the setup? Read the [[frequently-asked-questions]].\r\n\r\nCheck our [issues on GitHub](http://github.com/foambubble/foam/issues) if you get stuck on something, and create a new one if something doesn't seem right!\r\n\r\n## Features\r\n\r\n**Foam** doesn't have features in the traditional sense. Out of the box, you have access to all features of VS Code and all the [[recommended-extensions]] you choose to install, but it's up to you to discover what you can do with it!\r\n\r\n![Short video of Foam in use](assets/images/foam-navigation-demo.gif)\r\n\r\nHead over to [[recipes]] for some useful patterns and ideas!\r\n\r\n## Call To Adventure\r\n\r\nThe goal of **Foam** is to be your personal companion on your quest for knowledge.\r\n\r\nIt's currently about \"10% ready\" relative to all the features I've thought of, but I've only thought of ~1% of the features it could have, and I'm excited to learn from others.\r\n\r\nI am using it as my personal thinking tool. By making it public, I hope to learn from others not only how to improve Foam, but also to improve how I learn and manage information.\r\n\r\nIf that sounds like something you're interested in, I'd love to have you along on the journey.\r\n\r\n- Read about our [[principles]] to understand Foam's philosophy and direction\r\n- Read the [[contribution-guide]] guide to learn how to participate.\r\n- Feel free to open [GitHub issues](https://github.com/foambubble/foam/issues) to give me feedback and ideas for new features.\r\n\r\n**Foam** was inspired by [Roam Research](https://roamresearch.com/) and the [Zettelkasten methodology](https://zettelkasten.de/posts/overview)\r\n\r\n**Foam** wouldn't be possible without [Visual Studio Code](https://code.visualstudio.com/) and [GitHub](https://github.com/), and relies heavily on our fantastic open source [[recommended-extensions]] and all their contributors!\r\n\r\n## License\r\n\r\nFoam is licensed under the [MIT license](LICENSE.txt).\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[graph-visualisation]: features/graph-visualisation.md \"Graph Visualisation\"\r\n[backlinking]: features/backlinking.md \"Backlinking\"\r\n[recommended-extensions]: recommended-extensions.md \"Recommended Extensions\"\r\n[recipes]: recipes/recipes.md \"Recipes\"\r\n[frequently-asked-questions]: frequently-asked-questions.md \"Frequently Asked Questions\"\r\n[principles]: principles.md \"Principles\"\r\n[contribution-guide]: contribution-guide.md \"Contribution Guide\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/principles/","title":"Principles"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Principles\r\n---\r\n\r\n# Principles\r\n\r\n## Table of Contents\r\n\r\n- [Principles](#principles)\r\n  - [Table of Contents](#table-of-contents)\r\n  - [Foam enables you to do your best thinking](#foam-enables-you-to-do-your-best-thinking)\r\n  - [Foam wants you to own your thoughts](#foam-wants-you-to-own-your-thoughts)\r\n  - [Foam helps you share your thoughts with the world.](#foam-helps-you-share-your-thoughts-with-the-world)\r\n  - [Foam allows people to collaborate in discovering better ways to work, together.](#foam-allows-people-to-collaborate-in-discovering-better-ways-to-work-together)\r\n  - [Foam is for hackers, not only for programmers](#foam-is-for-hackers-not-only-for-programmers)\r\n\r\n## Foam enables you to do your best thinking\r\n\r\n- **Foam works for you, you don't work for Foam.** You should be able to focus on your work and not fight against Foam, or having to perform fiddly operations or maintenance jobs to keep Foam happy.\r\n- **Foam is not a package deal.** You must be able to adopt only the parts of Foam that you want. There must be no tight coupling between Foam's features.\r\n- **Foam is a starting point** You must be able to customise how foam looks and feels, and combine it with other tools you find helpful in your personal workflow.\r\n- **Foam is not a philosophy.** Whether you use a methodology like Zettelkasten is up to you. **You should be able to use Foam without joining a cult.**\r\n\r\n## Foam wants you to own your thoughts\r\n\r\n- **Foam doesn't want your data.** You can store your documents wherever you want. Some of Foam's suggested workflows include GitHub, if you don't want to use it to store your data, or you want to stop using it in the future, you should be able to migrate to alternative storage options. If you choose to not upload your notes to any cloud service or remote repository, remember to keep frequent local and occasional offsite backups of your data!\r\n- **Foam should not lock you in.** Foam's content files, structure and metadata should be in interoperable format that supports migrating it to another tool if you prefer to. Users of Foam should be able to develop and share such tools freely.\r\n- **Foam should not leak your secrets.** Nobody, including the developers of Foam, should have access to your personal knowledge graph unless you choose to give it to them. Foams should always be private by default, but [easy to share](#foam-helps-you-share-your-thoughts-with-the-world) if you choose to.\r\n\r\n## Foam helps you share your thoughts with the world.\r\n\r\nThis principle may seem like it contradicts [Foam wants you to own your thoughts](#foam-wants-you-to-own-your-thoughts), but it's actually a compatible corollary. You should be able to do both, because:\r\n\r\n> [...] environments that build walls around good ideas tend to be less innovative in the long run than more open-ended environments. Good ideas may not want to be free, but they do want to connect, fuse, recombine. —_Steven Johnson, Where Good Ideas Come From_\r\n\r\n- **Foam should make it easy to publish your knowledge graph.** With zero code, you should be able to make your graph public to the world. You should have full control over how it looks, feels, and where it's hosted.\r\n- **Foam should make it easy to collaborate on ideas.** Foam should allow you to work closely together with your collaborators, and accept feedback, input and improvements from others.\r\n- **Foam should make it easy to publish what you choose.** Foam should double as a low-barrier blog/publishing platform, so you can share content to an audience without inviting them to intrude on your entire workspace.\r\n\r\n## Foam allows people to collaborate in discovering better ways to work, together.\r\n\r\n- **Foam is a collection of ideas.** Foam was released to the public not to share the few good ideas in it, but to learn many good ideas from others. As you improve your own workflow, share your work on your own Foam blog.\r\n- **Foam is open for contributions.** If you use a tool or workflow that you like that fits these principles, please contribute them back to the Foam template as [[recipes]], [[recommended-extensions]] or documentation in [this workspace](https://github.com/foambubble/foam). See also: [[contribution-guide]].\r\n- **Foam is open source.** Feel free to fork it, improve it and remix it. Just don't sell it, as per our [license](LICENSE.txt).\r\n- **Foam is not Roam.** This project was inspired by Roam Research, but we're not limited by what Roam does. No idea is too big (though if it doesn't fit with Foam's core workflow, we might make it a [[recipes]] page instead).\r\n\r\n## Foam is for hackers, not only for programmers\r\n\r\nWhile Foam uses tools popular among computer programmers, Foam should be inclusive of everyone who wants to improve their own workflow to improve themselves.\r\n\r\n- **Foam embraces the hacker mindset.** The target audience for Foam are people who look for creative ways to improve their ability to collect and organise information.\r\n- **Foam is not just for programmers.** If you're a programmer, feel free to write scripts and extensions to support your own workflow, and publish them for others to use, but the out of the box Foam experience should not require you to know how to do so. You should, however, be curious and open to adopting new tools that are unfamiliar to you, and evaluate whether they could work for you.\r\n- **Foam is for everyone** As a foam user, you support everyone's quest for knowledge and self-improvement, not only your own, or folks' who look like you. All participants in Foam repositories, discussion forums, physical and virtual meeting spaces etc are expected to respect each other as described in our [[code-of-conduct]]. **Foam is not for toxic tech bros.**\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[recipes]: recipes/recipes.md \"Recipes\"\r\n[recommended-extensions]: recommended-extensions.md \"Recommended Extensions\"\r\n[contribution-guide]: contribution-guide.md \"Contribution Guide\"\r\n[code-of-conduct]: code-of-conduct.md \"Code of Conduct\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/reading-list/","title":"Reading list"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Awesome\r\n---\r\n\r\n# Reading list\r\n\r\n- [Zettelkasten article, recommended by tchayen](https://github.com/alefore/weblog/blob/master/zettelkasten.md)\r\n- [Suping up VS Code as a Markdown editor](https://kortina.nyc/essays/suping-up-vs-code-as-a-markdown-notebook/)\r\n- [VSCode Extensions Packs](https://code.visualstudio.com/blogs/2017/03/07/extension-pack-roundup) [[todo]] Evaluate for deployment\r\n- [Dark mode](https://css-tricks.com/dark-modes-with-css/)\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[todo]: dev/todo.md \"Todo\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/recommended-extensions/","title":"Recommended Extensions"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Extensions\r\n---\r\n\r\n# Recommended Extensions\r\n\r\nThese extensions defined in `.vscode/extensions.json` are automatically installed when you accept the workspace's recommended extensions.\r\n\r\nThis list is subject to change. Especially the Git ones.\r\n\r\n- [Foam for VSCode](https://marketplace.visualstudio.com/items?itemName=foam.foam-vscode) (alpha)\r\n- [Markdown Notes](https://marketplace.visualstudio.com/items?itemName=kortina.vscode-markdown-notes)\r\n- [Markdown Links](https://marketplace.visualstudio.com/items?itemName=tchayen.markdown-links)\r\n- [Markdown All In One](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one)\r\n\r\n## Extensions For Additional Features\r\n\r\nThese extensions are not (yet?) defined in `.vscode/extensions.json`, but have been used by others and shown to play nice with Foam.\r\n\r\n- [Emojisense](https://marketplace.visualstudio.com/items?itemName=bierner.emojisense)\r\n- [Markdown Emoji](https://marketplace.visualstudio.com/items?itemName=bierner.markdown-emoji) (adds `:smile:` syntax, works with emojisense to provide autocomplete for this syntax)\r\n- [Markdown Preview Mermaid Support](https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid)\r\n- [Mermaid Markdown Syntax Highlighting](https://marketplace.visualstudio.com/items?itemName=bpruitt-goddard.mermaid-markdown-syntax-highlighting)\r\n- [VSCode PDF Viewing](https://marketplace.visualstudio.com/items?itemName=tomoki1207.pdf)\r\n- [Git Lens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)\r\n- [Markdown Extended](https://marketplace.visualstudio.com/items?itemName=jebbs.markdown-extended) (with `kbd` option disabled, `kbd` turns wikilinks into non-clickable buttons)\r\n- [GitDoc](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gitdoc) (easy version management via git auto commits)\r\n- [Markdown Footnotes](https://marketplace.visualstudio.com/items?itemName=bierner.markdown-footnotes) (Adds [^footnote] syntax support to VS Code's built-in markdown preview)\r\n- [Todo Tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree) (Searches workspace for TODO and related comments and summarizes those lines in vs-code gutter)\r\n"},{"fields":{"slug":"/terminology/","title":"Terminology"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Awesome\r\n---\r\n\r\n# Terminology\r\n\r\nIt would be good to have some shared terminology to talk about Foam concepts. Some in-group terminology is acceptable, but we shouldn't be obtuse just to be exclusive.\r\n\r\nHere's some ideas, these are open for discussion.\r\n\r\n## Foam, the software project\r\n\r\nThe set of tools and ideas collected in this organisation.\r\n\r\n## (Your) Foam\r\n\r\nThe directory/repository where you keep all your notes.\r\n\r\nAlso happens to sound quite a lot like Home. Funny, that.\r\n\r\n## Bubble\r\n\r\nIndividual Foam note, written in Markdown.\r\n"},{"fields":{"slug":"/wikilinks/","title":"Wikilinks"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Wikilinks\r\n---\r\n\r\n# Wikilinks\r\n\r\nFoam enables you to Link pages together using `[[file-name]]` annotations (i.e. `[[MediaWiki]]` links).\r\n\r\n- Type `[[` and start typing a file name for autocompletion.\r\n  - Note that your file names should be in `lower-dash-case.md`, and your wikilinks should reference file names exactly: `[[lower-dash-case]]`, not `[[Lower Dash Case]]`.\r\n  - See [[link-formatting-and-autocompletion]] for more information, and how to setup your link autocompletions to make this easier.\r\n- `Cmd` + `Click` ( `Ctrl` + `Click` on Windows ) on file name to navigate to file (`F12` also works while your cursor is on the file name)\r\n- `Cmd` + `Click` ( `Ctrl` + `Click` on Windows ) on non-existent file to create that file in the workspace.\r\n  - The note creation makes use of the special [`new-note.md` note template](features/note-templates)\r\n\r\n> If the `F12` shortcut feels unnatural you can rebind it at File > Preferences > Keyboard Shortcuts by searching for `editor.action.revealDefinition`.\r\n\r\n## Markdown compatibility\r\n\r\nThe [Foam for VSCode](https://marketplace.visualstudio.com/items?itemName=foam.foam-vscode) extension automatically generates [[link-reference-definitions]] at the bottom of the file to make wikilinks compatible with Markdown tools and parsers.\r\n\r\n## Read more\r\n\r\n- [[foam-file-format]]\r\n- [[note-templates]]\r\n- [[link-formatting-and-autocompletion]]\r\n- See [[link-reference-definition-improvements]] for further discussion on current problems and potential solutions.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[link-reference-definitions]: features/link-reference-definitions.md \"Link Reference Definitions\"\r\n[foam-file-format]: dev/foam-file-format.md \"Foam File Format\"\r\n[note-templates]: features/note-templates.md \"Note Templates\"\r\n[link-reference-definition-improvements]: dev/link-reference-definition-improvements.md \"Link Reference Definition Improvements\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/dev/architecture/","title":"Architecture"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - architecture\r\n  - Dev\r\n---\r\n\r\n# Architecture\r\n\r\nThis document aims to provide a quick overview of the Foam architecture!\r\n\r\nFoam code and documentation live in the monorepo at [foambubble/foam](https://github.com/foambubble/foam/).\r\n\r\n- [/docs](https://github.com/foambubble/foam/tree/master/docs): documentation and [[recipes]].\r\n- [/packages/foam-core](https://github.com/foambubble/foam/tree/master/packages/foam-core) - Powers the core functionality in Foam across all platforms.\r\n- [/packages/foam-vscode](https://github.com/foambubble/foam/tree/master/packages/foam-vscode) - The core VSCode plugin.\r\n\r\nExceptions to the monorepo are:\r\n\r\n- The starter template at [foambubble/foam-template](https://github.com/foambubble/)\r\n- All other [[recommended-extensions]] live in their respective GitHub repos.\r\n- [foam-cli](https://github.com/foambubble/foam-cli) - The Foam CLI tool.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[recipes]: ../recipes/recipes.md \"Recipes\"\r\n[recommended-extensions]: ../recommended-extensions.md \"Recommended Extensions\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/dev/build-vs-assemble/","title":"Build vs Assemble"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Dev\r\n---\r\n\r\n# Build vs Assemble\r\n\r\nThe Foam prototype is built by assembling third-party extensions, which seems like a good strategy because\r\n\r\n- It supports picking and mixing of tools and workflows\r\n- Less code to write an maintain\r\n\r\nBut there's also a bunch of roadmap items that are hard to implement this way, as the third party plugins don't do exactly what we want them to do (e.g. Markdown All In One is not compatible with [[referencing-notes-by-title]].\r\n\r\nOverall, we should strive to build big things from small things. Focused, interoperable modules are better, because they allow users to pick and mix which features work for them. A good example of why this matters is the Markdown All In One extension we rely on: While it provides many of the things we need, a few of its features are incompatible with how I would like to work, and therefore it becomes a limiter of how well I can improve my own workflow.\r\n\r\nHowever, there becomes a point where we may benefit from implementing a centralised solution, e.g. a syntax, an extension or perhaps a VSCode language server. As much as possible, we should allow users to operate in a decentralised manner.\r\n"},{"fields":{"slug":"/dev/foam-core/","title":"Foam Core"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Dev\r\n  - Core\r\n---\r\n\r\n# Foam Core\r\n\r\n`foam-core` is a (future) package that powers the core functionality in Foam across all platforms:\r\n\r\n- VS Code Extension\r\n- [[workspace-janitor]]\r\n- [[cli]]\r\n- Future initiatives\r\n  - Visualizations\r\n    - Tag clouds\r\n    - Graph\r\n    - Should we have a package for visualisation?\r\n      - [[build-vs-assemble]]\r\n      - Not everything needs to live in the Foam repo\r\n  - Web based UI (Monaco)\r\n\r\n`foam-core`'s primary responsibility is to build an API on top of a workspace of markdown files, which allows us to:\r\n\r\n- Treat files as a graph, based on links\r\n  - Can be either [[wikilinks]] or relative `[markdown](links.md)` style\r\n  - We need to know about the edges (connections) as well as nodes\r\n    - What link points to what other file, etc.\r\n    - Needs to have the exact link text, e.g. even if `[[some-page]]` or `[[some-page.md]]` or `[[Some Page]]` point to the same document (`./some-page.md`), we need to know which format was used, so [[link-reference-definitions]] can be generated correctly\r\n- Treat each file as semi-structured data\r\n  - Title, headings, lists, paragraphs, images, links, data, code\r\n  - Also, possible Foam-specific meta stuff, like \"backlinks\" or \"block references\".\r\n  - This can power advanced search features (e.g. showing entire context of paragraph in back links, find all documents)\r\n\r\nIdeally, `foam-core` will be generic enough that in can be used by third parties to build their own tools that operate on markdown directories.\r\n\r\n## Technical requirements\r\n\r\n- The graph should be relatively inexpensive to compute (for running in CI, mobile etc)\r\n  - If necessary, we can implement caching inside a dot folder, but ideally not\r\n  - In memory cache already exist, can prime from disk if needed\r\n- The graph should be mutable (or immutable but easy to deep clone) so that persistent processes (VS Code) can cheaply update it when\r\n  - Document content changes\r\n    - Links update -> Graph change\r\n    - Heading changes -> Metadata change\r\n    - Anything in the document changes, update AST for individual note\r\n  - Files are added\r\n  - Files are removed\r\n  - Files are renamed\r\n  - Aliasing, call the same thing by multiple names\r\n    - Doesn't exist yet, should we support?\r\n- The graph should be observable (EventEmitter?) so changes can be applied\r\n  - EventEmitter w/ cross platform dependency\r\n  - Wonka (staltz's callbag)\r\n  - Can be a long term goal\r\n    - Short term fix: Just run the build fully on every change\r\n- Ideally, the it should accept file/structure changes from the outside from some sort of event source, so we can decouple source of updates (VS Code Workspace events, file system events...)\r\n  - If this gets complicated, we can delay this for now\r\n- We should not take on platform-specific dependencies\r\n  - Should work in any JS environment\r\n- Written in TypeScript (preferably tsdx)\r\n- Published to NPM\r\n\r\n## Use cases\r\n\r\nHere are some example use cases that the core should support. They don't need to be built into the core, but may help us design correct solutions:\r\n\r\n- Adding and editing page content\r\n  - [[materialized-backlinks]]\r\n  - [[link-reference-definitions]] for [[wikilinks]]\r\n  - [Frontmatter](https://jekyllrb.com/docs/front-matter/)\r\n- Finding all documents with `#tag`\r\n- Finding all documents with instances of `[[link]]`\r\n- Visualisations\r\n- Full text search\r\n\r\n  - Or, if search is too expensive/complex, when given a list of file names and line/column positions from VS Code search API, can return the document context (e.g. full paragraph, preceding/following line etc)\r\n\r\n## Collaboration\r\n\r\n- This week\r\n  - List of things to work in order\r\n  - Provide more vision on future state\r\n  - Write about working and collaboration philosophy\r\n  - [[todo]] Prioritise roadmap\r\n- Week of July 13\r\n  - Jani is available full time to work on this\r\n  - Janne: Write proposals, maybe more\r\n  - Riccardo: Available\r\n\r\n## Configuration management\r\n\r\n- Other tools may not be able to use vscode\r\n- [[todo]] Discuss with Janne and Riccardo\r\n\r\n## Feature comparison\r\n\r\nUseful for knowing what needs to be supported. See [[feature-comparison]].\r\n\r\n## Meeting notes\r\n\r\n- [[foam-core-2020-07-11]]\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[workspace-janitor]: ../features/workspace-janitor.md \"Janitor\"\r\n[cli]: ../features/cli.md \"Command Line Interface\"\r\n[build-vs-assemble]: build-vs-assemble.md \"Build vs Assemble\"\r\n[wikilinks]: ../wikilinks.md \"Wikilinks\"\r\n[link-reference-definitions]: ../features/link-reference-definitions.md \"Link Reference Definitions\"\r\n[materialized-backlinks]: materialized-backlinks.md \"Materialized Backlinks (stub)\"\r\n[todo]: todo.md \"Todo\"\r\n[foam-core-2020-07-11]: ../meeting-notes/foam-core-2020-07-11.md \"Foam Core 2020-07-11\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/dev/foam-file-format/","title":"Foam File Format"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Dev\r\n  - Format\r\n---\r\n\r\n# Foam File Format\r\n\r\nThis file is an example of a valid Foam file. Essentially it's just a markdown file with a bit of additional support for MediaWiki-style `[[wikilinks]]`.\r\n\r\nHere are a few specific constraints, mainly because our tooling is a bit fragmented. Most of these should be eventually lifted, and our requirement should just be \"Markdown with `[[wikilinks]]`:\r\n\r\n- **The first top level `# Heading` will be used as title for the note.**\r\n  - If not available, we will use the file name\r\n- **File name should have extension `.md`**\r\n  - This is a temporary limitation and will be lifted in future versions.\r\n  - At least `.mdx` will be supported, but ideally we'll support any file that you can map to `Markdown` language mode in VS Code\r\n- **In addition to normal Markdown Links syntax you can use `[[MediaWiki]]` links.** See [[wikilinks]] for more details.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[wikilinks]: ../wikilinks.md \"Wikilinks\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/dev/good-first-task/","title":"Good First Task"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Dev\r\n  - Task\r\n---\r\n\r\n# Good First Task\r\n\r\nSee the backlinks of this page for good first contribution opportunities.\r\n\r\n[[materialized-backlinks]] would help here.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[materialized-backlinks]: materialized-backlinks.md \"Materialized Backlinks (stub)\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/dev/link-reference-definition-improvements/","title":"Link Reference Definition Improvements"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Dev\r\n---\r\n\r\n# Link Reference Definition Improvements\r\n\r\n## Current Problems\r\n\r\n### File-by-file Insertion\r\n\r\nFor the time being, if you want to get [[wikilinks]] into all files within the workspace, you'll need to generate the link reference definitions yourself file-by-file (with the assistance of Foam).\r\n\r\n### Wikilinks don't work on GitHub\r\n\r\n> **TL;DR;** [workaround](#workaround) in the end of the chapter.\r\n\r\nIf you click any of the wikilinks on GitHub web UI (such as the `README.md` of a project), you'll notice that the links break with a 404 error.\r\n\r\nAt the time of writing (June 28 2020) this is a known, but unsolved error. To understand why this is the case, we need to understand what we are trading off.\r\n\r\nSo, why don't they work on GitHub?\r\n\r\nThe three components of [[link-reference-definitions]] are link label, link destination and Link Title.\r\n\r\nThe issue is the middle **link destination** component. It's configured to point to the file name **without file extension**, i.e. \"file-name\" instead of \"file-name.md\". This is to make the GitHub Pages rendering work, because if we generated the links to `file-name.md`, the links would point to the raw markdown files instead of their generated HTML versions.\r\n\r\n| Environment      | `file-name` | `file-name.md` |\r\n| ---------------- | ----------- | -------------- |\r\n| **VS Code**      | Works       | Works          |\r\n| **GitHub pages** | Works       | Breaks         |\r\n| **GitHub UI**    | Breaks      | Works          |\r\n\r\nSo as you can see, we've prioritised GitHub Pages over GitHub Web UI for the time being.\r\n\r\nIdeally, we'd like a solution that works with both, but it's not defined yet (see [[link-reference-definitions]] for more details)\r\n\r\n#### Workaround\r\n\r\nFor the time being, you can use relative `[markdown links](markdown-link.md)` syntax.\r\n\r\n**Pros:**\r\n\r\n- This will work on all platforms.\r\n\r\n**Cons:**\r\n\r\n- It will break the Markdown Notes [[backlinking]] support\r\n- Less convenient to write\r\n\r\n### Finding certain words clutter the VS Code search results\r\n\r\nSince link reference definitions have `[//begin]` and `[//end]` guards with explanatory text that use certain words, these words (like \"generate\") appear in VS Code search results if you happen to search matching strings from the workspace.\r\n\r\n## Improvement Proposal\r\n\r\nProblem space in essence:\r\n\r\n- During edit-time (when modifying the markdown files in an editor)\r\n  - link reference definitions are needed if user uses editor extensions that don't understand wikilinks\r\n  - link reference definitions may be annoying since they\r\n    - add content to files that the user hasn't typed in by themselves\r\n    - get out of date if user uses a tool that doesn't autogenerate them\r\n    - may clutter the search results\r\n- During build-time (when converting markdown to html for publishing purposes)\r\n  - link reference definitions are needed, if the files are published via such tools (or to such platforms) that don't understand wikilinks\r\n  - link reference definitions might have to be in different formats depending on the publish target (e.g. GitHub pages vs GitHub UI)\r\n\r\nThe potential solution:\r\n\r\n- For edit-time\r\n  - Make edit-time link reference definition generation optional via user settings. They should be on by default, and generating valid markdown links with a relative path to a `.md` file.\r\n  - Make format of the link reference definition configurable (whether to include '.md' or not)\r\n  - Out of recommended extensions, currently only \"markdown links\" doesn't support them (?). However even its [code](https://github.com/tchayen/markdown-links/blob/master/src/parsing.ts#L25) seems to include wikilink parser, so it might just be a bug?\r\n- For build-time\r\n\r\n  - To satisfy mutually incompatible constraints between GitHub UI, VSCode UI, and GitHub Pages, we should add a pre-processing/build step for pushing to GitHub Pages.\r\n    - This would be a GitHub action (or a local script, ran via foam-cli) that outputs publish-friendly markdown format for static site generators and other publishing tools\r\n    - This build step should be pluggable, so that other transformations could be ran during it\r\n  - Have publish targets defined in settings, that support both turning the link reference definitions on/off and defining their format (.md or not). Example draft (including also edit-time aspect):\r\n\r\n    ```typescript\r\n    // settings json\r\n    // see enumerations below for explanations on values\r\n    {\r\n      \"foam\": {\r\n        \"publish\": [\r\n          {\r\n            \"name\": \"Gitlab Mirror\",     // name of the publish target\r\n            \"linkTranspilation\": \"Off\",\r\n            \"linkReferenceDefinitions\": \"withExtensions\"\r\n          },\r\n          {\r\n            \"name\": \"GitHub Pages\",\r\n            \"linkTranspilation\": \"Off\",\r\n            \"linkReferenceDefinitions\": \"withoutExtensions\"\r\n          },\r\n          {\r\n            \"name\": \"Blog\",\r\n            \"linkTranspilation\": \"Off\",\r\n            \"linkReferenceDefinitions\": \"Off\"\r\n          },\r\n          {\r\n            \"name\": \"My Amazing PDF book\",\r\n            \"linkTranspilation\": \"WikiLinksToMarkdown\"\r\n          }\r\n        ],\r\n        \"edit\": {\r\n          \"linkReferenceDefinitions\": \"Off\"\r\n        }\r\n      }\r\n    }\r\n\r\n    // Defines if and how links in markdown files are somehow converted (in-place) during build time\r\n    // Note that this enumeration is not valid edit-time, since we (probably) don't want to change text like this while user is editing it\r\n    enum LinkTranspilation {\r\n      Off,                   // links are not transpiled\r\n      WikiLinksToMarkdown,   // links using wiki-format [[link]] are converted to normal md links: [link](./some/file.md)\r\n                             // if this is set, not link reference definitions are generated (not needed)\r\n    }\r\n\r\n    // Defines if and how link reference definition section is generated\r\n    enum LinkReferenceDefinitions {\r\n      Off,               // link reference definitions are not generated\r\n      WithExtensions,    // link reference definitions contain .md (or similar) file extensions\r\n      WithoutExtensions  // link reference definitions do not contain file extenions\r\n    }\r\n\r\n    ```\r\n\r\n  - With Foam repo, just use edit-time link reference definitions with '.md' extension - this makes the links work in the GitHub UI\r\n  - Have publish target defined for GitHub pages, that doesn't use '.md' extension, but still has the link reference definitions. Generate the output into gh-pages branch (or separate repo) with automation.\r\n    - This naturally requires first removing the existing link reference definitions during the build\r\n\r\n- Other\r\n  - To clean up the search results, remove link reference definition section guards (assuming that these are not defined by the markdown spec). Use unifiedjs parse trees to identify if there's missing (or surplus) definitions (check if they are identified properly by the library), and just add the needed definitions to the bottom of the file (without guards) AND remove them if they are not needed (anywhere from the file).\r\n\r\nNote that the proposal above supports both (build-time) inline transpilation of wikilinks as well as creation reference definitions. Depending on the direction of Foam, also only one of them could be selected. In that case the other could be implemented at later point of time.\r\n\r\nUI-wise, the publish targets could be picked in some similar fashion as the run/debug targets in vscode by implementing a separate panel, or maybe through command execution (CTRL+SHIFT+P) - not yet defined at this point.\r\n\r\n## Links\r\n\r\n- [tracking issue on GitHub](https://github.com/foambubble/foam/issues/16)\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[wikilinks]: ../wikilinks.md \"Wikilinks\"\r\n[link-reference-definitions]: ../features/link-reference-definitions.md \"Link Reference Definitions\"\r\n[backlinking]: ../features/backlinking.md \"Backlinking\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/dev/materialized-backlinks/","title":"Materialized Backlinks (stub)"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Dev\r\n---\r\n\r\n# Materialized Backlinks (stub)\r\n\r\n**[[todo]] This [[roadmap]] item needs more specification work.**\r\n\r\nIf you're interested in working on it, please start a conversation in [GitHub issues](https://github.com/foambubble/foam/issues).\r\n\r\n## Notes\r\n\r\nThe idea would be to automatically generate lists of backlinks (and optionally, also forward links) into the bottom of every markdown document to\r\n\r\n- Make every link two-way navigable in published sites\r\n- Make Foam notes more portable to different apps and long-term storage\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[todo]: todo.md \"Todo\"\r\n[roadmap]: roadmap.md \"Roadmap\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/dev/mdx-by-default/","title":"MDX by Default(stub)"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Dev\r\n  - Mdx\r\n---\r\n\r\n# MDX by Default(stub)\r\n\r\n**[[todo]] This [[roadmap]] item needs more specification work.**\r\n\r\nIf you're interested in working on it, please start a conversation in [GitHub issues](https://github.com/foambubble/foam/issues).\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[todo]: todo.md \"Todo\"\r\n[roadmap]: roadmap.md \"Roadmap\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/dev/publishing-permissions/","title":"Publishing Permissions(stub)"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Dev\r\n---\r\n\r\n# Publishing Permissions(stub)\r\n\r\n**[[todo]] This [[roadmap]] item needs more specification work.**\r\n\r\nIf you're interested in working on it, please start a conversation in [GitHub issues](https://github.com/foambubble/foam/issues).\r\n\r\n## Notes\r\n\r\n- Public and private pages\r\n- Share specific page (with private hash)\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[todo]: todo.md \"Todo\"\r\n[roadmap]: roadmap.md \"Roadmap\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/dev/roadmap/","title":"Roadmap"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Dev\r\n  - Roadmap\r\n---\r\n\r\n# Roadmap\r\n\r\nSome of these items can be achieved by combining existing tools, but others may require us to build bespoke software solutions. See [[build-vs-assemble]] to understand trade-offs between these approaches. If a feature can be implemented by contributing to [[recipes]], it should.\r\n\r\n## In progress\r\n\r\nItems that are already being worked on. Roadmap items in this stage should have an owner.\r\n\r\n## High priority\r\n\r\nItems we plan on working next. Items in this stage don't need to have an owner, but before we start working on them should have enough specification that they can be picked up and worked on without having to seek consensus.\r\n\r\nIf you want to pick up work in this category, you should have a plan on how long the implementation will approximately take so we don't block progress by sitting on high priority issues.\r\n\r\n## Backlog\r\n\r\nEverything else, categorised into themes. Just because something is on this list doesn't mean it'll get done. If you're interested in working on items in this category, check the [[contribution-guide]] for how to get started.\r\n\r\nIf a roadmap item is a stub, **consider** opening a [GitHub issue](https://github.com/foambubble/foam/issues) to start a conversation to avoid situations where the implementation does not fit long term vision and roadmap. _Note that this is optional. The only centralised governance in Foam is to decide what ends up in the official [template](https://github.com/foambubble/foam-template), [documentation](https://github.com/foambubble/foam) and [extension](https://github.com/foambubble/foam/tree/master/packages/foam-vscode). You are free to build whatever you want for yourself, and we'd love if you shared it with us, but you are by no means obligated to do so!_\r\n\r\n**When creating GitHub issues to discuss roadmap items, link them here.**\r\n\r\n### Known issues\r\n\r\n- [[improve-default-workspace-settings]]\r\n  - Discussion: [foam#270](https://github.com/foambubble/foam/issues/270)\r\n- Improve [[git-integration]]\r\n- Fix [[wikilinks]] compatibility issues\r\n- Simplify [[foam-file-format]]\r\n\r\n### Core features\r\n\r\n- [[renaming-files]]\r\n- [[unlinked-references]]\r\n- [[block-references]]\r\n- [[improved-backlinking]]\r\n  - UX: [[make-backlinks-more-prominent]]\r\n- [[materialized-backlinks]]\r\n- [[automatic-git-syncing]]\r\n- [[git-flows-for-teams]]\r\n- [[user-settings]]\r\n- [[link-reference-definitions]]\r\n- [[predefined-user-snippets]]\r\n\r\n### Publishing\r\n\r\n- [[officially-support-alternative-templates]]\r\n- [[improved-static-site-generation]]\r\n- [[mdx-by-default]]\r\n- [[search-in-published-workspace]]\r\n- [[graph-in-published-workspace]]\r\n  - Discussion: [foam#58](https://github.com/foambubble/foam/issues/58)\r\n- [[linking-between-published-workspaces]]\r\n  - Discussion: [foam#59](https://github.com/foambubble/foam/issues/59)\r\n- [[publishing-permissions]]\r\n\r\n### Platforms\r\n\r\n- [[cli]]\r\n- [[mobile-apps]]\r\n- [[packaged-desktop-app]]\r\n- [[web-editor]]\r\n\r\n### Migration\r\n\r\nThe community is working on a number of automated scripts to help you migrate to Foam. The main work of developing such a method involves exporting your notes, converting them to the Markdown format, and then making sure that the links between notes (if you had those) still work.\r\n\r\n- [[migrating-from-roam]]\r\n  - Discussion: [foam#55](https://github.com/foambubble/foam/issues/55)\r\n- [[migrating-from-obsidian]]\r\n  - Discussion: [foam#46](https://github.com/foambubble/foam/issues/46)\r\n- [[migrating-from-onenote]]\r\n  - Discussion: [foam#151](https://github.com/foambubble/foam/issues/151)\r\n- _Migration from other tools..._\r\n\r\n### Integration\r\n\r\n- _Integrations to third party tools_...\r\n\r\n### Wild ideas\r\n\r\n- [[foam-linter]]\r\n- [[refactoring-via-language-server-protocol]]\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[build-vs-assemble]: build-vs-assemble.md \"Build vs Assemble\"\r\n[recipes]: ../recipes/recipes.md \"Recipes\"\r\n[contribution-guide]: ../contribution-guide.md \"Contribution Guide\"\r\n[git-integration]: ../features/git-integration.md \"Git Integration\"\r\n[wikilinks]: ../wikilinks.md \"Wikilinks\"\r\n[foam-file-format]: foam-file-format.md \"Foam File Format\"\r\n[unlinked-references]: unlinked-references.md \"Unlinked references (stub)\"\r\n[make-backlinks-more-prominent]: ../recipes/make-backlinks-more-prominent.md \"Make Backlinks More Prominent\"\r\n[materialized-backlinks]: materialized-backlinks.md \"Materialized Backlinks (stub)\"\r\n[automatic-git-syncing]: ../recipes/automatic-git-syncing.md \"Automatically Sync with Git\"\r\n[link-reference-definitions]: ../features/link-reference-definitions.md \"Link Reference Definitions\"\r\n[predefined-user-snippets]: ../recipes/predefined-user-snippets.md \"Pre-defined User Snippets\"\r\n[mdx-by-default]: mdx-by-default.md \"MDX by Default(stub)\"\r\n[publishing-permissions]: publishing-permissions.md \"Publishing Permissions(stub)\"\r\n[cli]: ../features/cli.md \"Command Line Interface\"\r\n[migrating-from-roam]: ../recipes/migrating-from-roam.md \"Migrating from Roam (stub)\"\r\n[migrating-from-obsidian]: ../recipes/migrating-from-obsidian.md \"Migrating from Obsidian (stub)\"\r\n[migrating-from-onenote]: ../recipes/migrating-from-onenote.md \"Migrating from OneNote\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/dev/todo/","title":"Todo"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Dev\r\n  - Todo\r\n---\r\n\r\n# Todo\r\n\r\nFeatures belong on the [[roadmap]].\r\n\r\n- [ ] Write out Roadmap\r\n  - [ ] Isolate tasks for MLH fellows\r\n- [ ] Create better structure for Recipes\r\n- [ ] Connect to folks at GitHub\r\n- [ ] Learn more about VS Code Extension APIs\r\n  - [ ] Workspace fs/events\r\n  - [ ] Reloading changes from outside vscode\r\n  - [ ] Expanding, editable snippets\r\n\r\nFor more things to do, check backlinks for Pages that annotate [[todo]].\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[roadmap]: roadmap.md \"Roadmap\"\r\n[todo]: todo.md \"Todo\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/dev/unlinked-references/","title":"Unlinked references (stub)"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Dev\r\n---\r\n\r\n# Unlinked references (stub)\r\n\r\n**[[todo]] This [[roadmap]] item needs more specification work.**\r\n\r\nIf you're interested in working on it, please start a conversation in [GitHub issues](https://github.com/foambubble/foam/issues).\r\n\r\n## Notes\r\n\r\nOne of Foam's big features is the ability to find all instances of a reference, create a page for it and update all the references to link to the new page.\r\n\r\nImplementing this is on the [[roadmap]], but for the time being you can achieve similar things by:\r\n\r\n- `Cmd` + `Shift` + `F` ( `Ctrl` + `Shift` + `F` on Windows ) to find all the references, e.g. \"Cat food\"\r\n- `Cmd` + `Shift` + `H` ( `Ctrl` + `Shift` + `H` on Windows ) to replace them with [[cat-food]].\r\n- Click any of the references to create a new note.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[todo]: todo.md \"Todo\"\r\n[roadmap]: roadmap.md \"Roadmap\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/features/backlinking/","title":"Backlinking"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n  - Backlink\r\n---\r\n\r\n# Backlinking\r\n\r\nWhen using [[wikilinks]], you can find all notes that link to a specific note in the [VS Code Markdown Notes](https://marketplace.visualstudio.com/items?itemName=kortina.vscode-markdown-notes) **Backlinks Explorer**\r\n\r\n- Run `Cmd` + `Shift` + `P` (`Ctrl` + `Shift` + `P` for Windows), type \"backlinks\" and run the **Explorer: Focus on Backlinks** view.\r\n- Keep this pane always visible to discover relationships between your thoughts\r\n- You can drag the backlinks pane to a different section in VS Code if you prefer. See: [[make-backlinks-more-prominent]]\r\n- Finding backlinks in published Foam workspaces via [[materialized-backlinks]] is on the [[roadmap]] but not yet implemented.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[wikilinks]: ../wikilinks.md \"Wikilinks\"\r\n[make-backlinks-more-prominent]: ../recipes/make-backlinks-more-prominent.md \"Make Backlinks More Prominent\"\r\n[materialized-backlinks]: ../dev/materialized-backlinks.md \"Materialized Backlinks (stub)\"\r\n[roadmap]: ../dev/roadmap.md \"Roadmap\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/features/cli/","title":"Command Line Interface"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n  - CLI\r\n---\r\n\r\n# Command Line Interface\r\n\r\nCreate a CLI tool to allow running common Foam commands. These may include:\r\n\r\n- `foam init` - create a new foam workspace\r\n- `foam janitor` - run [[workspace-janitor]] in current workspace\r\n- `foam migrate <tool>` - migrate from tools like roam exports, obsidian and more\r\n\r\nMore commands to be added.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[workspace-janitor]: workspace-janitor.md \"Janitor\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/features/creating-new-notes/","title":"Creating New Notes"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n  - New\r\n---\r\n\r\n# Creating New Notes\r\n\r\n- Write out a new `[[wikilink]]` and `Cmd` + `Click` to create a new file and enter it.\r\n  - For keyboard navigation, use the 'Follow Definition' key `F12` (or [remap key binding](https://code.visualstudio.com/docs/getstarted/keybindings) to something more ergonomic)\r\n- `Cmd` + `Shift` + `P` (`Ctrl` + `Shift` + `P` for Windows), execute `Foam: Create New Note` and enter a **Title Case Name** to create `Title Case Name.md`\r\n  - Add a keyboard binding to make creating new notes easier.\r\n  - The [[note-templates]] used by this command can be customized.\r\n- You shouldn't worry too much about categorizing your notes. You can always [[search-for-notes]], and explore them using the [[graph-visualisation]].\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[note-templates]: note-templates.md \"Note Templates\"\r\n[search-for-notes]: ../recipes/search-for-notes.md \"Search for Notes\"\r\n[graph-visualisation]: graph-visualisation.md \"Graph Visualisation\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/features/custom-markdown-preview-styles/","title":"Custom Markdown Preview Styles"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n---\r\n\r\n# Custom Markdown Preview Styles\r\n\r\nVisual Studio Code allows you to use your own CSS in the Markdown preview tab.\r\n\r\n## Instructions\r\n\r\nCustom CSS for the Markdown preview can be implemented by using the `\"markdown.styles\": []` setting in `settings.json`. The stylesheets can either be https URLs or relative paths to local files in the current workspace.\r\n\r\nFor example, to load a stylesheet called `Style.css`, we can update `settings.json` with the following line:\r\n\r\n```\r\n{\r\n  \"markdown.styles\": [\"Style.css\"]\r\n}\r\n```\r\n"},{"fields":{"slug":"/features/custom-snippets/","title":"Adding Custom Snippets"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n---\r\n\r\n# Adding Custom Snippets\r\n\r\nYou can add custom snippets whilst the default set of snippets are decided by following the below steps:\r\n\r\n1. `Cmd` + `Shift` + `P` (`Ctrl` + `Shift` + `P` for Windows), type `snippets` and select `Preferences: Configure User Snippets`.\r\n2. The command palette will remain in focus. Search for `markdown` and select the entry entitled `markdown.json (Markdown)`.\r\n3. A JSON file will open. You can author your own snippets using the [documentation](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets) to help you, or if you're using a snippet shared by another Foam user then you can copy and paste it in, as the below GIF demonstrates:\r\n   ![Demonstrating adding a custom snippet](../assets/images/custom-snippet.gif)\r\n\r\nTo get started, you might consider replacing the entire contents of the `markdown.json` file opened by the steps above with the JSON in [this comment](https://github.com/foambubble/foam/pull/192#issuecomment-666736270).\r\n"},{"fields":{"slug":"/features/daily-notes/","title":"Daily notes"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n---\r\n\r\n# Daily notes\r\n\r\nAutomatically create a Daily Note by executing the \"Foam: Open Daily Note\" command. If a Daily Note for today's date already exists, the command opens the existing note.\r\n\r\n![Daily note feature in action](../assets/images/daily-note.gif)\r\n\r\n## Keyboard shortcut\r\n\r\nThe default keyboard shortcut for \"Open Daily Note\" is `alt`+`d`. This can be overridden using the [VS Code Keybindings editor](https://code.visualstudio.com/docs/getstarted/keybindings).\r\n\r\n## Configuration\r\n\r\nBy default, Daily Notes will be created in a file called `yyyy-mm-dd.md` in the workspace root, with a heading `yyyy-mm-dd`.\r\n\r\nThese settings can be overridden in your workspace or global `.vscode/settings.json` file, using the [**dateformat** date masking syntax](https://github.com/felixge/node-dateformat#mask-options):\r\n\r\n```jsonc\r\n  \"foam.openDailyNote.directory\": \"journal\", // a relative directory path will get appended to the workspace root. An absolute directory path will be used unmodified.\r\n  \"foam.openDailyNote.filenameFormat\": \"'daily-note'-yyyy-mm-dd\",\r\n  \"foam.openDailyNote.fileExtension\": \"mdx\",\r\n  \"foam.openDailyNote.titleFormat\": \"'Journal Entry, ' dddd, mmmm d\",\r\n```\r\n\r\nThe above configuration would create a file `journal/note-2020-07-25.mdx`, with the heading `Journal Entry, Sunday, July 25`.\r\n\r\n## Daily Note Templates\r\n\r\nDaily notes can also make use of [templates](note-templates.md), by defining a special `.foam/templates/daily-note.md` template.\r\n\r\nSee [Note Templates](note-templates.md) for details of the features available in templates.\r\n\r\n## Roam-style Automatic Daily Notes\r\n\r\nFoam provides an option for automatically opening your Daily Note when you open your Foam workspace. You can enable it by specifying the following configuration in your `.vscode/settings.json`:\r\n\r\n```json\r\n{\r\n  // ...Other configurations\r\n  \"foam.openDailyNote.onStartup\": true\r\n}\r\n```\r\n\r\n## Extend Functionality (Weekly, Monthly, Quarterly Notes)\r\n\r\nPlease see [[note-macros]]\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[note-macros]: ../recipes/note-macros.md \"Custom Note Macros\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/features/foam-logging-in-vscode/","title":"Foam logging in VsCode"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n---\r\n\r\n# Foam logging in VsCode\r\n\r\n## Find the Foam log\r\n\r\nThe Foam log can be found in the `Output` tab.\r\n\r\n1. To show the tab, click on `View > Output`.\r\n2. In the dropdown on the right of the tab, select `Foam`.\r\n\r\n![Find the foam log](../assets/images/foam-log.png)\r\n\r\n## Change the default logging level\r\n\r\n1. Open workspace settings (`cmd+,`, or execute the `Preferences: Open Workspace Settings` command)\r\n2. Look for the entry `Foam > Logging: Level`\r\n\r\nSet to debug when reporting an issue\r\n\r\n## Change the log level for the session\r\n\r\nExecute the command `Foam: Set log level`.\r\n"},{"fields":{"slug":"/features/git-integration/","title":"Git Integration"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n  - Git\r\n---\r\n\r\n# Git Integration\r\n\r\nThere are (too) many ways to commit your changes to source control:\r\n\r\n- Using VS Code's own git integration\r\n  - The quick and easy way is to use the `Git: Commit All` command after editing files. The default Foam workspace settings will stage & sync all of your changes to the remote:\r\n- Using GitDoc for [[automatic-git-syncing]]\r\n- Whatever way you like to do it (CLI?)\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[automatic-git-syncing]: ../recipes/automatic-git-syncing.md \"Automatically Sync with Git\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/features/graph-visualisation/","title":"Graph Visualisation"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n  - Graph-Visualisation\r\n---\r\n\r\n# Graph Visualisation\r\n\r\nFoam comes with a graph visualisation of your notes. To see the graph execute the `Foam: Show Graph` command.\r\n\r\nThe graph will:\r\n\r\n- allow you to highlight a node by hovering on it, to quickly see how it's connected to the rest of your notes\r\n- allow you to select one or more (by keeping `SHIFT` pressed while selecting) nodes by clicking on them, to better understand the structure of your notes\r\n- allow you to navigate to a note by clicking on it while pressing `CTRL` or `CMD`\r\n- automatically center the graph on the currently edited note, to immediately see it's connections\r\n\r\n## Custom Graph Styles\r\n\r\nCurrently, custom graph styles are supported through the `foam.graph.style` setting.\r\n\r\n![Graph style demo](../assets/images/graph-style.gif)\r\n\r\nA sample configuration object is provided below:\r\n\r\n```json\r\n\"foam.graph.style\": {\r\n    \"background\": \"#202020\",\r\n    \"fontSize\": 12,\r\n    \"lineColor\": \"#277da1\",\r\n    \"lineWidth\": 0.2,\r\n    \"particleWidth\": 1.0,\r\n    \"highlightedForeground\": \"#f9c74f\",\r\n    \"node\": {\r\n        \"note\": \"#277da1\",\r\n        \"placeholder\": \"#545454\",\r\n    }\r\n}\r\n```\r\n\r\n### Style nodes by type\r\n\r\nIt is possible to customize the style of a node based on the `type` property in the YAML frontmatter of the corresponding document.\r\n\r\nFor example the following `backlinking.md` note:\r\n\r\n```\r\n---\r\ntype: feature\r\n---\r\n# Backlinking\r\n\r\n...\r\n```\r\n\r\nAnd the following `settings.json`:\r\n\r\n```json\r\n\"foam.graph.style\": {\r\n    \"node\": {\r\n        \"feature\": \"red\",\r\n    }\r\n}\r\n```\r\n\r\nWill result in the following graph:\r\n\r\n![Style node by type](../assets/images/style-node-by-type.png)\r\n"},{"fields":{"slug":"/features/key-bindings/","title":"Key Bindings"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n---\r\n\r\n# Key Bindings\r\n\r\n## [[todo]]\r\n\r\n- [ ] Document [supported key bindings](#supported-key-bindings)\r\n- [ ] Currently we rely on various key bindings provided by VS Code plugins. Would be nice to harmonise these\r\n- [ ]\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[todo]: ../dev/todo.md \"Todo\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/features/link-reference-definitions/","title":"Link Reference Definitions"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n  - Link\r\n---\r\n\r\n# Link Reference Definitions\r\n\r\n## Introduction\r\n\r\nWhen you use `[[wikilinks]]`, the [foam-vscode](https://github.com/foambubble/foam/tree/master/packages/foam-vscode) extension will automatically generate [Markdown Link Reference Definitions](https://spec.commonmark.org/0.29/#link-reference-definitions) at the bottom of the file. This is done to make the content of the file compatible with various Markdown tools (e.g. parsers, static site generators, VS code plugins etc), which don't support `[[wikilinks]]`.\r\n\r\n## Example\r\n\r\nThe following example:\r\n\r\n```md\r\n- [[wikilinks]]\r\n- [[github-pages]]\r\n```\r\n\r\n...generates the following link reference definitions to the bottom of the file:\r\n\r\n```md\r\n[wikilinks]: wikilinks \"Wikilinks\"\r\n[github-pages]: github-pages \"GitHub Pages\"\r\n```\r\n\r\nYou can open the [raw markdown](https://foambubble.github.io/foam/features/link-reference-definitions.md) to see them at the bottom of this file\r\n\r\n## Specification\r\n\r\nThe three components of a link reference definition are `[link-label]: link-target \"Link Title\"`\r\n\r\n- **link label:** The link text to match in the surrounding markdown document. This matches the inner bracket of the double-bracketed `[[wikilink]]` notation\r\n- **link destination** The target of the matched link\r\n  - By default we generate links without extension. This can be overridden, see [Configuration](#configuration) below\r\n- **\"Link Title\"** Optional title for link (The Foam template has a snippet of JavaScript to replace this on the website at runtime)\r\n\r\n## Configuration\r\n\r\nYou can choose to generate link reference definitions with or without file extensions, depending on the target, or to disable the generation altogether. As a rule of thumb:\r\n\r\n- Links with file extensions work better with standard markdown-based tools, such as GitHub web UI.\r\n- Links without file extensions work better with certain web publishing tools that treat links as literal urls and don't transform them automatically, such as the standard GitHub pages installation.\r\n\r\nBy default, Foam generates links without file extensions for legacy reasons, but this may change in future versions.\r\n\r\nYou can override this setting in your Foam workspace's `settings.json`:\r\n\r\n- `\"foam.edit.linkReferenceDefinitions\": \"withoutExtensions\"` (default)\r\n- `\"foam.edit.linkReferenceDefinitions\": \"withExtensions\"`\r\n- `\"foam.edit.linkReferenceDefinitions\": \"off\"`\r\n\r\n### Ignoring files\r\n\r\nSometimes, you may want to ignore certain files or folders, so that Foam doesn't generate link reference definitions to them.\r\n\r\nFor instance, if you're using a local instance of [Jekyll](https://jekyllrb.com/), you may find that it writes copies of each `.md` file into a `_site` directory, which may lead to Foam generating references to them instead of the original source notes.\r\n\r\nYou can ignore the `_site` directory by adding the following to your `.vscode/settings.json`:\r\n\r\n```json\r\n  \"files.exclude\": {\r\n    \"**/_site\": true\r\n  },\r\n  \"files.watcherExclude\": {\r\n    \"**/_site\": true\r\n  },\r\n```\r\n\r\nAfter changing the setting in your workspace, you can run the [[workspace-janitor]] command to convert all existing definitions.\r\n\r\n[[todo]] \\_Implement a `foam.eclude\r\n\r\n## Future improvements\r\n\r\nSee [[link-reference-definition-improvements]] for further discussion on current problems and potential solutions.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[workspace-janitor]: workspace-janitor.md \"Janitor\"\r\n[todo]: ../dev/todo.md \"Todo\"\r\n[link-reference-definition-improvements]: ../dev/link-reference-definition-improvements.md \"Link Reference Definition Improvements\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/features/note-templates/","title":"Note Templates"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n  - Template\r\n---\r\n\r\n# Note Templates\r\n\r\nFoam supports note templates. Templates are a way to customize the starting content for your notes (instead of always starting from an empty note).\r\n\r\nNote templates are files located in the special `.foam/templates` directory.\r\n\r\n## Quickstart\r\n\r\nCreate a template:\r\n\r\n- Run the `Foam: Create New Template` command from the command palette\r\n- OR manually create a regular `.md` file in the `.foam/templates` directory\r\n\r\n![Create new template GIF](../assets/images/create-new-template.gif)\r\n\r\n_Theme: Ayu Light_\r\n\r\nTo create a note from a template:\r\n\r\n- Run the `Foam: Create New Note From Template` command and follow the instructions. Don't worry if you've not created a template yet! You'll be prompted to create a new template if none exist.\r\n- OR run the `Foam: Create New Note` command, which uses the special default template (`.foam/templates/new-note.md`, if it exists)\r\n\r\n![Create new note from template GIF](../assets/images/create-new-note-from-template.gif)\r\n\r\n_Theme: Ayu Light_\r\n\r\n## Special templates\r\n\r\n### Default template\r\n\r\nThe `.foam/templates/new-note.md` template is special in that it is the template that will be used by the `Foam: Create New Note` command.\r\nCustomize this template to contain content that you want included every time you create a note.\r\n\r\n### Default daily note template\r\n\r\nThe `.foam/templates/daily-note.md` template is special in that it is the template that will be used when creating daily notes (e.g. by using `Foam: Open Daily Note`).\r\nCustomize this template to contain content that you want included every time you create a daily note.\r\n\r\n## Variables\r\n\r\nTemplates can use all the variables available in [VS Code Snippets](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables).\r\n\r\nIn addition, you can also use variables provided by Foam:\r\n\r\n| Name                 | Description                                                                                                                                             |\r\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| `FOAM_SELECTED_TEXT` | Foam will fill it with selected text when creating a new note, if any text is selected. Selected text will be replaced with a wikilink to the new note. |\r\n| `FOAM_TITLE`         | The title of the note. If used, Foam will prompt you to enter a title for the note.                                                                     |\r\n\r\n**Note:** neither the defaulting feature (eg. `${variable:default}`) nor the format feature (eg. `${variable/(.*)/${1:/upcase}/}`) (available to other variables) are available for these Foam-provided variables.\r\n\r\n## Metadata\r\n\r\nTemplates can also contain metadata about the templates themselves. The metadata is defined in YAML \"Frontmatter\" blocks within the templates.\r\n\r\n| Name          | Description                                                                                                                      |\r\n| ------------- | -------------------------------------------------------------------------------------------------------------------------------- |\r\n| `filepath`    | The filepath to use when creating the new note. If the filepath is a relative filepath, it is relative to the current workspace. |\r\n| `name`        | A human readable name to show in the template picker.                                                                            |\r\n| `description` | A human readable description to show in the template picker.                                                                     |\r\n\r\nFoam-specific variables (e.g. `$FOAM_TITLE`) can be used within template metadata. However, VS Code snippet variables are ([currently](https://github.com/foambubble/foam/pull/655)) not supported.\r\n\r\n### `filepath` attribute\r\n\r\nThe `filepath` metadata attribute allows you to define a relative or absolute filepath to use when creating a note using the template.\r\nIf the filepath is a relative filepath, it is relative to the current workspace.\r\n\r\n**Note:** While you can make use of the `filepath` attribute in [daily note](daily-notes.md) templates (`.foam/templates/daily-note.md`), there is currently no way to have `filepath` vary based on the date. This will be improved in the future. For now, you can customize the location of daily notes using the [`foam.openDailyNote` settings](daily-notes.md).\r\n\r\n#### Example of relative `filepath`\r\n\r\nFor example, `filepath` can be used to customize `.foam/templates/new-note.md`, overriding the default `Foam: Create New Note` behaviour of opening the file in the same directory as the active file:\r\n\r\n```yaml\r\n---\r\n# This will create the note in the \"journal\" subdirectory of the current workspace,\r\n# regardless of which file is the active file.\r\nfoam_template:\r\n  filepath: \"journal/$FOAM_TITLE.md\"\r\n---\r\n```\r\n\r\n#### Example of absolute `filepath`\r\n\r\n`filepath` can be an absolute filepath, so that the notes get created in the same location, regardless of which file or workspace the editor currently has open.\r\nThe format of an absolute filepath may vary depending on the filesystem used.\r\n\r\n```yaml\r\n---\r\nfoam_template:\r\n  # Unix / MacOS filesystems\r\n  filepath: '/Users/john.smith/foam/journal/$FOAM_TITLE.md'\r\n\r\n  # Windows filesystems\r\n  filepath: 'C:\\Users\\john.smith\\Documents\\foam\\journal\\$FOAM_TITLE.md'\r\n---\r\n```\r\n\r\n### `name` and `description` attributes\r\n\r\nThese attributes provide a human readable name and description to be shown in the template picker (e.g. When a user uses the `Foam: Create New Note From Template` command):\r\n\r\n![Template Picker annotated with attributes](../assets/images/template-picker-annotated.png)\r\n\r\n### Adding template metadata to an existing YAML Frontmatter block\r\n\r\nIf your template already has a YAML Frontmatter block, you can add the Foam template metadata to it.\r\n\r\n#### Limitations\r\n\r\nFoam only supports adding the template metadata to _YAML_ Frontmatter blocks. If the existing Frontmatter block uses some other format (e.g. JSON), you will have to add the template metadata to its own YAML Frontmatter block.\r\n\r\nFurther, the template metadata must be provided as a [YAML block mapping](https://yaml.org/spec/1.2/spec.html#id2798057), with the attributes placed on the lines immediately following the `foam_template` line:\r\n\r\n```yaml\r\n---\r\nexisting_frontmatter: \"Existing Frontmatter block\"\r\nfoam_template: # this is a YAML \"Block\" mapping (\"Flow\" mappings aren't supported)\r\n  name: My Note Template # Attributes must be on the lines immediately following `foam_template`\r\n  description: This is my note template\r\n  filepath: `journal/$FOAM_TITLE.md`\r\n---\r\nThis is the rest of the template\r\n```\r\n\r\nDue to the technical limitations of parsing the complex YAML format, unless the metadata is provided this specific form, Foam is unable to correctly remove the template metadata before creating the resulting note.\r\n\r\nIf this limitation proves inconvenient to you, please let us know. We may be able to extend our parsing capabilities to cover your use case. In the meantime, you can add the template metadata without this limitation by providing it in its own YAML Frontmatter block.\r\n\r\n### Adding template metadata to its own YAML Frontmatter block\r\n\r\nYou can add the template metadata to its own YAML Frontmatter block at the start of the template:\r\n\r\n```yaml\r\n---\r\nfoam_template:\r\n  name: My Note Template\r\n  description: This is my note template\r\n  filepath: `journal/$FOAM_TITLE.md`\r\n---\r\nThis is the rest of the template\r\n```\r\n\r\nIf the note already has a Frontmatter block, a Foam-specific Frontmatter block can be added to the start of the template. The Foam-specific Frontmatter block must always be placed at the very beginning of the file, and only whitespace can separate the two Frontmatter blocks.\r\n\r\n```yaml\r\n---\r\nfoam_template:\r\n  name: My Note Template\r\n  description: This is my note template\r\n  filepath: `journal/$FOAM_TITLE.md`\r\n---\r\n\r\n---\r\nexisting_frontmatter: \"Existing Frontmatter block\"\r\n---\r\nThis is the rest of the template\r\n```\r\n"},{"fields":{"slug":"/features/orphans/","title":"Orphans"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Orphans\r\n  - Features\r\n---\r\n\r\n# Orphans\r\n\r\nFoam helps you to find orphans: notes that have neither forward links nor backlinks.\r\n\r\nOrphans can be found in the Orphans panel.\r\n\r\nTwo settings allows you to control the behaviour of the Orphans panel:\r\n\r\n- `foam.orphans.exclude`: list of glob patterns that will be used to exclude directories. For example, a value of `[\"journal/**/*\"]` would exclude your daily notes.\r\n- `foam.orphans.groupBy`: sets the default view mode of the Orphans panel: either groups by folder (by default), or lists all orphans. The view can be toggled on the fly from the panel, but it won't overwrite the setting.\r\n"},{"fields":{"slug":"/features/tags/","title":"Tags"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n  - Tags\r\n---\r\n\r\n# Tags\r\n\r\nFoam supports tags.\r\n\r\n## Creating a tag\r\n\r\nThere are two ways of creating a tag:\r\n\r\n- adding a `#tag` anywhere in the text of the note\r\n- using the `tags: tag1, tag2` property in frontmatter\r\n\r\nTags can also be hierarchical, so you can have `#parent/child`.\r\n\r\n## Navigating tags\r\n\r\nIt's possible to navigate tags via the Tag Explorer panel.\r\nIn the future it will be possible to explore tags via the graph as well.\r\n\r\n## Styling tags\r\n\r\nInline tags can be styled using custom CSS with the selector `.foam-tag`.\r\n\r\n## An alternative to tags\r\n\r\nGiven the power of backlinks, some people prefer to use them also as tags.\r\nFor example you can tag your notes about books with [[book]].\r\n"},{"fields":{"slug":"/features/workspace-janitor/","title":"Janitor"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Features\r\n---\r\n\r\n# Janitor\r\n\r\nTo store your personal knowledge graph in markdown files instead of a database, we need some additional tooling to create and maintain relationships with notes.\r\n\r\n**Foam Janitor** (inspired by Andy Matuschak's [note-link-janitor](https://github.com/andymatuschak/note-link-janitor)) helps you migrate existing notes to Foam, and maintain your Foam's health over time.\r\n\r\nCurrently, Foam's Janitor helps you to:\r\n\r\n- Ensure your [[link-reference-definitions]] are up to date\r\n- Ensure every document has a well-formatted title (required for Markdown Links, Markdown Notes, and Foam Gatsby Template compatibility)\r\n\r\nIn the future, Janitor can help you with\r\n\r\n- Updating [[materialized-backlinks]]\r\n- Lint, format and structure notes\r\n- Rename and move notes around while keeping their references up to date.\r\n\r\n## Using Janitor from VS Code (Experimental)\r\n\r\nExecute the \"Foam: Run Janitor\" command from the command palette.\r\n\r\n![Foam Janitor demo](../assets/images/foam-janitor-demo.gif)\r\n\r\n## Using Janitor from command line (Experimental)\r\n\r\n> ⚠️ Improvements to this documentation are welcome!\r\n\r\nThe Janitor can be installed from [NPM](https://www.npmjs.com/) and executed as a standalone CLI tool:\r\n\r\n```sh\r\n> npm install -g foam-cli\r\n> foam janitor path/to/workspace\r\n```\r\n\r\nYou can run the Janitor as a git hook on every commit to ensure your workspace links are up to date. This can be especially helpful if you edit your markdown documents from other apps.\r\n\r\nYou can also run the Janitor from a GitHub action to ensure that all changes coming to your workspace are up to date. This can be useful when editing your Foam notes from mobile (i.e. via [GitJournal](https://gitjournal.io)), or your Foam has multiple contributors and you want to ensure that all changes are correctly integrated.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[link-reference-definitions]: link-reference-definitions.md \"Link Reference Definitions\"\r\n[materialized-backlinks]: ../dev/materialized-backlinks.md \"Materialized Backlinks (stub)\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/SUMMARY/","title":"Summary"},"frontmatter":{"draft":false},"rawBody":"# Summary\r\n\r\n- Links\r\n  - [Foam Template](https://github.com/theowenyoung/foam-template-gatsby-theme-primer-wiki)\r\n  - [Obsidian Template](https://github.com/theowenyoung/obsidian-template-gatsby-theme-primer-wiki)\r\n  - [Real World Wiki](https://wiki.owenyoung.com)\r\n"},{"fields":{"slug":"/proposals/templates-v2/","title":"Templates v2 Proposal <!-- omit in TOC -->"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Templates\r\n---\r\n\r\n# Templates v2 Proposal <!-- omit in TOC -->\r\n\r\nThe current capabilities of templates is limited in some important ways. This document aims to propose a design that addresses these shortcomings.\r\n\r\n**IMPORTANT: This design is merely a proposal of a design that could be implemented. It DOES NOT represent a commitment by `Foam` developers to implement the features outlined in this document. This document is merely a mechanism to facilitate discussion of a possible future direction for `Foam`.**\r\n\r\n- [Introduction](#introduction)\r\n- [Limitations of current templating](#limitations-of-current-templating)\r\n  - [Too much friction to create a new note](#too-much-friction-to-create-a-new-note)\r\n    - [Manual note creation (Mouse + Keyboard)](#manual-note-creation-mouse--keyboard)\r\n    - [Manual note creation (Keyboard)](#manual-note-creation-keyboard)\r\n    - [Foam missing note creation](#foam-missing-note-creation)\r\n    - [`Markdown Notes: New Note` (Keyboard)](#markdown-notes-new-note-keyboard)\r\n    - [Foam template note creation (Keyboard)](#foam-template-note-creation-keyboard)\r\n  - [Templating of daily notes](#templating-of-daily-notes)\r\n  - [Templating of filepaths](#templating-of-filepaths)\r\n- [Goal / Philosophy](#goal--philosophy)\r\n- [Proposal](#proposal)\r\n  - [Summary](#summary)\r\n  - [Add a `${title}` and `${titleSlug}` template variables](#add-a-title-and-titleslug-template-variables)\r\n  - [Add a `Foam: Create New Note` command and hotkey](#add-a-foam-create-new-note-command-and-hotkey)\r\n    - [Case 1: `.foam/templates/new-note.md` doesn't exist](#case-1-foamtemplatesnew-notemd-doesnt-exist)\r\n    - [Case 2: `.foam/templates/new-note.md` exists](#case-2-foamtemplatesnew-notemd-exists)\r\n  - [Change missing wikilinks to use the default template](#change-missing-wikilinks-to-use-the-default-template)\r\n  - [Add a metadata section to templates](#add-a-metadata-section-to-templates)\r\n    - [Example](#example)\r\n  - [Add a replacement for `dateFormat`](#add-a-replacement-for-dateformat)\r\n  - [Add support for daily note templates](#add-support-for-daily-note-templates)\r\n  - [Eliminate all `foam.openDailyNote` settings](#eliminate-all-foamopendailynote-settings)\r\n- [Summary: resulting behaviour](#summary-resulting-behaviour)\r\n  - [`Foam: Create New Note`](#foam-create-new-note)\r\n  - [`Foam: Open Daily Note`](#foam-open-daily-note)\r\n  - [Navigating to missing wikilinks](#navigating-to-missing-wikilinks)\r\n  - [`Foam: Create Note From Template`](#foam-create-note-from-template)\r\n- [Extensions](#extensions)\r\n  - [More variables in templates](#more-variables-in-templates)\r\n  - [`defaultFilepath`](#defaultfilepath)\r\n  - [Arbitrary hotkey -> template mappings?](#arbitrary-hotkey---template-mappings)\r\n\r\n## Introduction\r\n\r\nCreating of new notes in Foam is too cumbersome and slow. Despite their power, Foam templates can currently only be used in very limited scenarios.\r\n\r\nThis proposal aims to address these issues by streamlining note creation and by allowing templates to be used everywhere.\r\n\r\n## Limitations of current templating\r\n\r\n### Too much friction to create a new note\r\n\r\nCreating new notes should an incredibly streamlined operation. There should be no friction to creating new notes.\r\n\r\nUnfortunately, all of the current methods for creating notes are cumbersome.\r\n\r\n#### Manual note creation (Mouse + Keyboard)\r\n\r\n1. Navigate to the directory where you want the note\r\n2. Click the new file button\r\n3. Provide a filename\r\n4. Manually enter the template contents you want\r\n\r\n#### Manual note creation (Keyboard)\r\n\r\n1. Navigate to the directory where you want the note\r\n2. `⌘N` to create a new file\r\n3. `⌘S` to save the file and give it a filename\r\n4. Manually enter the template contents you want\r\n\r\n#### Foam missing note creation\r\n\r\n1. Open an existing note in the directory where you want the note\r\n2. Use the wikilinks syntax to create a link to the title of the note you want to have\r\n3. Use `Ctrl+Click`/`F12` to create the new file\r\n4. Manually enter the template contents you want\r\n\r\n#### `Markdown Notes: New Note` (Keyboard)\r\n\r\n1. Navigate to the directory where you want the note\r\n2. `Shift+⌘P` to open the command pallette\r\n3. Type `New Note` until it appears in the list. Press `Enter/Return` to select it.\r\n4. Enter a title for the note\r\n5. Manually enter the template contents you want\r\n\r\n#### Foam template note creation (Keyboard)\r\n\r\n1. `Shift+⌘P` to open the command pallette\r\n2. Type `Create New Note From Template` until it appears in the list. Press `Enter/Return` to select it.\r\n3. Use the arrow keys (or type the template name) to select the template. Press `Enter/Return` to select it.\r\n4. Modify the filepath to match the desired directory + filename. Press `Enter/Return` to select it.\r\n\r\nAll of these steps are far too cumbersome. And only the last one allows the use of templates.\r\n\r\n### Templating of daily notes\r\n\r\nCurrently `Open Daily Note` opens an otherwise empty note, with a title defined by the `foam.openDailyNote.titleFormat` setting.\r\nDaily notes should be able to be fully templated as well.\r\n\r\n### Templating of filepaths\r\n\r\nAs discussed in [\"Template the filepath in `openDailyNote`\"](https://github.com/foambubble/foam/issues/523), it would be useful to be able to specify the default filepaths of templates. For example, many people include timestamps in their filepaths.\r\n\r\n## Goal / Philosophy\r\n\r\nIn a sentence: **Creating a new note should be a single button press and should use templates.**\r\n\r\n## Proposal\r\n\r\n1. Add a new `Foam: Create New Note` that is the streamlined counterpart to the more flexible `Foam: Create New Note From Template`\r\n2. Use templates everywhere\r\n3. Add metadata into the actual templates themselves in order to template the filepaths themselves.\r\n\r\n### Summary\r\n\r\nThis can be done through a series of changes to the way that templates are implemented:\r\n\r\n1. Add a `${title}` and `${titleSlug}` template variables\r\n2. Add a `Foam: Create New Note` command and hotkey\r\n3. Change missing wikilinks to use the default template\r\n4. Add a metadata section to templates\r\n5. Add a replacement for `dateFormat`\r\n6. Add support for daily note templates\r\n7. Eliminate all `foam.openDailyNote` settings\r\n\r\nI've broken it out into these steps to show that the overall proposal can be implemented piecemeal in independent PRs that build on one another.\r\n\r\n### Add a `${title}` and `${titleSlug}` template variables\r\n\r\nWhen you use `Markdown Notes: New Note`, and give it a title, the title is formatted as a filename and also used as the title in the resulting note.\r\n\r\n**Example:**\r\n\r\nGiven the title `Living in a dream world` to `Markdown Notes: New Note`, the filename is `living-in-a-dream-world.md` and the file contents are:\r\n\r\n```markdown\r\n# Living in a dream world\r\n```\r\n\r\nWhen creating a note from a template in Foam, you should be able to use a `${title}` variable. If the template uses the `${title}` variable, the user will be prompted for a title when they create a note from a template.\r\n\r\nExample:\r\n\r\nGiven this `.foam/templates/my_template.md` template that uses the `${title}` variable:\r\n\r\n```markdown\r\n# ${title}\r\n```\r\n\r\nWhen a user asks for a new note using this template (eg. `Foam: Create New Note From Template`), VSCode will first ask the user for a title then provide it to the template, producing:\r\n\r\n```markdown\r\n# Living in a dream world\r\n```\r\n\r\nThere will also be a `${titleSlug}` variable made available, which will be the \"slugified\" version of the title (eg. `living-in-a-dream-world`). This will be useful in later steps where we want to template the filepath of a template.\r\n\r\n### Add a `Foam: Create New Note` command and hotkey\r\n\r\nInstead of using `Markdown Notes: New Note`, Foam itself will have a `Create New Note` command that creates notes using templates.\r\n\r\nThis would open use the template found at `.foam/templates/new-note.md` to create the new note.\r\n\r\n`Foam: Create New Note` will offer the fastest workflow for creating a note when you don't need customization, while `Foam: Create New Note From Template` will remain to serve a fully customizable (but slower) workflow.\r\n\r\n#### Case 1: `.foam/templates/new-note.md` doesn't exist\r\n\r\nIf `.foam/templates/new-note.md` doesn't exist, it behaves the same as `Markdown Notes: New Note`:\r\n\r\n- it would ask for a title and create the note in the current directory. It would open a note with the note containing the title.\r\n\r\n**Note:** this would use an implicit default template, making use of the `${title}` variable.\r\n\r\n#### Case 2: `.foam/templates/new-note.md` exists\r\n\r\nIf `.foam/templates/new-note.md` exists:\r\n\r\n- it asks for the note title and creates the note in the current directory\r\n\r\n**Progress:** At this point, we have a faster way to create new notes from templates.\r\n\r\n### Change missing wikilinks to use the default template\r\n\r\nClicking on a dangling/missing wikilink should be equivalent to calling `Foam: Create New Note` with the contents of the link as the title.\r\nThat way, creating a note by navigating to a missing note uses the default template.\r\n\r\n### Add a metadata section to templates\r\n\r\n- The `Foam: New Note` command creates a new note in the current directory. This is a sensible default that makes it quick, but lacks flexibility.\r\n- The `Foam: Create New Note From Template` asks the user to confirm/customize the filepath. This is more flexible but slower since there are more steps involved.\r\n\r\nBoth commands use templates. It would be nice if we could template the filepaths as well as the template contents (See [\"Template the filepath in `openDailyNote`\"](https://github.com/foambubble/foam/issues/523) for a more in-depth discussion the benefits of filepath templating).\r\n\r\nIn order to template the filepath, there needs to be a place where metadata like this can be specified.\r\nI think this metadata should be stored alongside the templates themselves. That way, it can make use of all the same template variable available to the templates themselves.\r\n\r\nConceptually, adding metadata to the templates is similar to Markdown frontmatter, though the choice of exact syntax for adding this metadata will have to be done with care since the templates can contain arbitrary contents including frontmatter.\r\n\r\n#### Example\r\n\r\nA workable syntax is still to be determined.\r\nWhile this syntax probably doesn't work as a solution, for this example I will demonstrate the concept using a second frontmatter block:\r\n\r\n```markdown\r\n<!-- The below front-matter block is for foam-specific template settings -->\r\n\r\n## <!-- It is removed when the user creates a new note using this template -->\r\n\r\n<!-- The default filepath to use when using this template -->\r\n<!-- Relative paths are relative to the workspace, absolute paths are absolute -->\r\n<!-- Note that you can include VSCode snippet variables to template the path -->\r\n\r\n## filepath: `journal/${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}_${titleSlug}.md`\r\n\r\n## <!-- The actual contents of the template begin after the `---` thematic break immediately below this line-->\r\n\r\n---\r\n\r\ncreated: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}T${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\r\ntags: []\r\n\r\n---\r\n\r\n# ${title}\r\n```\r\n\r\nIn this example, using this template improves the UX:\r\n\r\nIn `Foam: Create New Note` workflow, having `filepath` metadata within `.foam/templates/new-note.md` allows for control over the filepath without having to introduce any more UX steps to create a new note. It's still just a hotkey away and a title.\r\n\r\nAs we'll see, when it comes to allowing daily notes to be templated, we don't even need to use `${title}` in our template, in which case we don't we don't even need to prompt for a title.\r\n\r\nIn the `Create New Note From Template` workflow, during the step where we allow the user to customize the filepath, it will already templated according to the `filepath` in the template's metadata. This means that the user has to make fewer changes to the path, especially in cases where they want to include things like datetimes in the filenames. This makes it faster (eg. don't have to remember what day it is, and don't have to type it) and less error-prone (eg. when they accidentally type the wrong date).\r\n\r\n### Add a replacement for `dateFormat`\r\n\r\n`foam.openDailyNote.filenameFormat` uses `dateFormat()` to put the current timestamp into the daily notes filename. This is much more flexible than what is available in VSCode Snippet variables. Before daily notes are switched over to use templates, we will have to come up with another mechanism/syntax to allow for calls to `dateFormat()` within template files.\r\n\r\nThis would be especially useful in the migration of users to the new daily notes templates. For example, if `.foam/templates/daily-note.md` is unset, then we could generate an implicit template for use by `Foam: Open Daily Note`. Very roughly something like:\r\n\r\n```markdown\r\n<!-- The below front-matter block is for foam-specific template settings -->\r\n\r\n## <!-- It is removed when the user creates a new note using this template -->\r\n\r\n<!-- The default filepath to use when using this template -->\r\n<!-- Relative paths are relative to the workspace, absolute paths are absolute -->\r\n<!-- Note that you can include VSCode snippet variables to template the path -->\r\n\r\n## filepath: `${foam.openDailyNote.directory}/${foam.openDailyNote.filenameFormat}.${foam.openDailyNote.fileExtension}`\r\n\r\n## <!-- The actual contents of the template begin after the `---` thematic break immediately below this line-->\r\n\r\n# ${foam.openDailyNote.titleFormat}\r\n```\r\n\r\n### Add support for daily note templates\r\n\r\nWith the above features implemented, making daily notes use templates is simple.\r\n\r\nWe define a `.foam/templates/daily-note.md` filepath that the `Foam: Open Daily Note` command will always use to find its daily note template.\r\nIf `.foam/templates/daily-note.md` does not exist, it falls back to a default, implicitly defined daily notes template (which follows the default behaviour of the current `foam.openDailyNote` settings).\r\n\r\nBoth `Foam: Open Daily Note` and `Foam: Create New Note` can share all of the implementation code, with the only differences being the hotkeys used and the template filepath used.\r\n\r\nExample daily note template (again using the example syntax of the foam-specific frontmatter block):\r\n\r\n```markdown\r\n<!-- The below front-matter block is for foam-specific template settings -->\r\n\r\n## <!-- It is removed when the user creates a new note using this template -->\r\n\r\n<!-- The default filepath to use when using this template -->\r\n<!-- Relative paths are relative to the workspace, absolute paths are absolute -->\r\n<!-- Note that you can include VSCode snippet variables to template the path -->\r\n\r\n## filepath: `journal/${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}.md`\r\n\r\n## <!-- The actual contents of the template begin after the `---` thematic break immediately below this line-->\r\n\r\n# ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}\r\n```\r\n\r\nSince there is no use of the `${title}` variable, opening the daily note behaves exactly as it does today and automatically opens the note with no further user interaction.\r\n\r\n### Eliminate all `foam.openDailyNote` settings\r\n\r\nNow that all of the functionality of the `foam.openDailyNote` settings have been obviated, these settings can be removed:\r\n\r\n- `foam.openDailyNote.directory`, `foam.openDailyNote.filenameFormat`, and `foam.openDailyNote.fileExtension` can be specified in the `filepath` metadata of the daily note template.\r\n- `foam.openDailyNote.titleFormat` has been replaced by the ability to fully template the daily note, including the title.\r\n\r\n## Summary: resulting behaviour\r\n\r\n### `Foam: Create New Note`\r\n\r\nA new command optimized for speedy creation of new notes. This will become the default way to create new notes. In its fastest form, it simply opens the new note with no further user interaction.\r\n\r\n### `Foam: Open Daily Note`\r\n\r\nSimplified since it no longer has its custom settings, and re-uses all the same implementation code as `Foam: Create New Note`.\r\nTemplates can now be used with daily notes.\r\n\r\n### Navigating to missing wikilinks\r\n\r\nNow creates the new notes using the default template. Re-uses all the same implementation code as `Foam: Create New Note`\r\nNow uses the contents of the wikilink as the `${title}` parameter for the template.\r\n\r\n### `Foam: Create Note From Template`\r\n\r\nAlmost the exact same as it is today. However, with `${title}` and `filepath` templating, users will have less changes to make in the filepath confirmation step.\r\nIt's the slower but more powerful version of `Foam: Create New Note`, allowing you to pick any template, as well as customize the filepath.\r\n\r\n## Extensions\r\n\r\nIn addition to the ideas of this proposal, there are ways we could imagine extending it. These are all \"out of scope\" for this design, but thinking about them could be useful to guide our thinking about this design.\r\n\r\n### More variables in templates\r\n\r\n`${title}` is necessary in this case to replace the functionality of `Markdown Notes: New Note`.\r\nHowever, one could imagine that this pattern of \"Ask the user for a value for missing variable values\" could be useful in other situations too.\r\nPerhaps users could even define their own (namespaced) template variables, and Foam would ask them for values to use for each when creating a note using a template that used those variables.\r\n\r\n### `defaultFilepath`\r\n\r\nBy using `defaultFilepath` instead of `filepath` in the metadata section, you could have more control over the note creation without having to fall back to the full `Create New Note From Template` workflow.\r\n\r\n- `filepath` will not ask the user for the file path, simply use the value provided (as described above)\r\n- `defaultFilepath` will ask the user for the file path, pre-populating the file path using `defaultFilepath`\r\n\r\nThe first allows \"one-click\" note creation, the second more customization.\r\nThis might not be necessary, or this might not be the right way to solve the problem. We'll see.\r\n\r\n### Arbitrary hotkey -> template mappings?\r\n\r\n`Foam: Open Daily Note` and `Foam: Create New Note` only differ by their hotkey and their default template setting.\r\nIs there a reason/opportunity to abstract this further and allow for users to define custom `hotkey -> template` mappings?\r\n"},{"fields":{"slug":"/meeting-notes/foam-core-2020-07-11/","title":"Foam Core 2020-07-11"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Meetings\r\n---\r\n\r\n# Foam Core 2020-07-11\r\n\r\nPresent: @jevakallio, @riccardoferretti\r\n\r\n### Tests\r\n\r\n- How do we know this approach works?\r\n  - Supports renaming\r\n  - Supports searching with (attribute-x)\r\n  - Find dead links\r\n\r\n### Getting started\r\n\r\n- Land work to master\r\n\r\n  - Create a foam-core package\r\n\r\n  -\r\n\r\n### Open questions\r\n\r\n- How should writing to files work\r\n  - What if affected notes have unsaved changes\r\n\r\n### Graph methods\r\n\r\n- get all\r\n- search by\r\n  - tag\r\n  - free text\r\n  - [[todo]]: how do vs code search editors work? are they pluggable? what do they need?\r\n- find dead links\r\n  - for linters\r\n- serialize/toJSON (for visualizers)\r\n- subscribe to changes\r\n- find if a link exists (and which link) in a given row / column position + return it's start and end position - this would probably be needed e.g. to CTRL-hovering to work properly\r\n\r\n### Node methods\r\n\r\n- rename node and all links to that node\r\n- get links\r\n  - forward links (for link lists)\r\n  - backlinks (with surrounding context)\r\n\r\n### Node definition\r\n\r\nWhat do we need the node (and edge metadata) to contain:\r\n\r\n- `id`: tbd\r\n  - should be unique, needs some kind of unique gen function\r\n  - should be reconstructable even if links are not updated every time\r\n  - what happens during rename? is reparenting the graph going to be hard?\r\n  - do id's need to be persistent, or can we create them per in-memory session, keep them stable despite renames, and then next session generate a new id?\r\n  - Ideally should be a path to file, so it's easy to look up from the graph by id for renaming\r\n- `type`: Note | Image | etc\r\n- `title`: can be read from markdown title or frontmatter metadata\r\n- `path`: full path to file, relative to workspace (graph) root\r\n- `links`:\r\n  - `id`: File to link to\r\n  - `text`: The link label\r\n  - `type` markdown | mediawiki | image | http\r\n  - `section`: : Anchor link to a heading in target note, if we want to add support for linking to sections\r\n  - `block` (ref)\r\n  - Positional data from AST?\r\n- `tags`\r\n\r\n### Markdown layer\r\n\r\n- `source`: raw markdown (rename?)\r\n- `ast`: raw markdown ast\r\n- `checksum`: if we do caching\r\n\r\n### Link text\r\n\r\n// some-file.md\r\n// # Some File\r\n\r\nWrite -> Store on disk\r\n[[Some File]] -> [Some File](some-file.md)\r\n\r\nEditing\r\n[Some File](some-file.md)\r\n\r\nOn disk (could be solved by migration)\r\n[[some-file]]\r\n[[Some File]]\r\n\r\n- docs/index.md -> Index\r\n- notes/index.md -> Index\r\n\r\n[[Index]]\r\n[[Index | notes/index.md]]\r\n\r\n[Index] docs/index.md\r\n[Index | notes/index.md]: notes/index.md\r\n\r\n[[Some File | path/to/some-file.md]]\r\n\r\nDo we apply any constraints:\r\n\r\n- `[[file-name-without-extension]]`\r\n- `[[file-name-with-extension.md]]`\r\n- `[[Title Cased File Name]]`\r\n\r\nNot supported by Markdown Notes:\r\n\r\n- `[[path/to/file-name.md]]` - Just use markdown links\r\n- `[[Target Note Title]]`\r\n\r\nIssues:\r\n\r\n- Name clashes in directories\r\n- Name clashes between extensions\r\n- Renaming\r\n  - Change filename/title needs to reflect everywhere\r\n- Orphaning\r\n\r\n- If we can't rely on in-memory process to rename things correctly while changes happen (e.g. file is renamed, moved, deleted, or titled) <ref id=\"1\" />\r\n\r\nSolving this issue is necessarily heuristic. We could try to write smart solutions, plus a linter for orphans\r\n\r\nHow others solve this:\r\n\r\n- Unique ids -- could support optionally as part of file name or front matter metadata. Should not be required.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[todo]: ../dev/todo.md \"Todo\"\r\n[index]: ../../content3/publishing/index.md \"Publishing pages\"\r\n[index | notes/index.md]: ../../content3/publishing/index.md \"Publishing pages\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/publishing/generate-gatsby-site/","title":"Generate a site using Gatsby"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Publish\r\n  - Gatsby\r\n---\r\n\r\n# Generate a site using Gatsby\r\n\r\n## Using foam-gatsby-template\r\n\r\nYou can use [foam-gatsby-template](https://github.com/mathieudutour/foam-gatsby-template) to generate a static site to host it online on GitHub or [Vercel](https://vercel.com).\r\n\r\n### Publishing your foam to GitHub pages\r\n\r\nIt comes configured with GitHub actions to auto deploy to GitHub pages when changes are pushed to your main branch.\r\n\r\n### Publishing your foam to Vercel\r\n\r\nWhen you're ready to publish, run a local build.\r\n\r\n```bash\r\ncd _layouts\r\nnpm run build\r\n```\r\n\r\nRemove `public` from your .gitignore file then commit and push your public folder in `_layouts` to GitHub.\r\n\r\nLog into your Vercel account. (Create one if you don't have it already.)\r\n\r\nImport your project. Select `_layouts/public` as your root directory and click **Continue**. Then name your project and click **Deploy**.\r\n\r\nThat's it!\r\n\r\n## Using foam-template-gatsby-kb\r\n\r\nYou can use another template [foam-template-gatsby-kb](https://github.com/hikerpig/foam-template-gatsby-kb), and host it on [Vercel](https://vercel.com) or [Netlify](https://www.netlify.com/).\r\n"},{"fields":{"slug":"/publishing/","title":"Publishing pages"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Publish\r\n---\r\n\r\n# Publishing pages\r\n\r\nFoam pages can be published.\r\n\r\n## Foam site generator?\r\n\r\nAnother case of the [[build-vs-assemble]] dilemma. We could provide a better publishing experience by building a bespoke static site generator (or a gatsby plugin) that's aware of Foam conventions (backlinks etc.)\r\n\r\nEventually we should probably do it, as that would unlock a huge amount of power, but we should always strive to keep it optional.\r\n\r\nAt a bare minimum, Foam repos should remain valid markdown, and should be publishable by any sufficiently complete markdown to html generation tools.\r\n\r\nWould be cool if Foam pages could be published. Some ideas here.\r\n\r\n- [x] Easymode: Make your GitHub public\r\n- [x] Static site generator integration, publish from GH actions to GitHub pages / Netlify etc!!!\r\n  - [ ] Add annotations to pages for setting visibility (many ways to do this)\r\n    - [ ] Public by default, and `@private` annotations\r\n    - [ ] Private by default, and `@public` annotations\r\n    - [ ] Only public `/public` folder, just move a document there, no annotation needed\r\n    - [ ] More granular access control? Email someone a link with a hash? [Testing](testing.md)\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[build-vs-assemble]: ../dev/build-vs-assemble.md \"Build vs Assemble\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/publishing/math-support-with-katex/","title":"Katex Math Rendering"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Publish\r\n---\r\n\r\n# Katex Math Rendering\r\n\r\nApart from using the method mentioned in [[math-support-with-mathjax]], we can also use KaTeX to render our math equations in Foam. The caveat is: we can't rely on GitHub Pages to host and deploy our website anymore, because the plugin we'll be using to let Jekyll support KaTeX doesn't play well together with GitHub Pages.\r\n\r\nThe alternative solution is to using [[publish-to-vercel]] for building and publishing our website, so before you start integrating KaTeX into your Foam project, please follow the instructions to host your Foam workspace on [[publish-to-vercel]] first.\r\n\r\n## Adding required plugins\r\n\r\nAdd the plugin `jekyll-katex` to your Foam workspace's `_config.yml` and `Gemfile` if you haven't done so already. For detailed instructions, please refer to the `#Adding a _config.yml` and `#Adding a Gemfile` in [[publish-to-vercel]].\r\n\r\n## Loading KaTeX JS and CSS\r\n\r\nBecause we are using KaTeX to render math, we will also need to import KaTeX's JS and CSS files from CDN. The official method to load these files is documented at: [KaTeX/KaTeX#starter-template](https://github.com/KaTeX/KaTeX#starter-template). In our case, we will need to add the following code snippet to our `_layouts/page.html`:\r\n\r\n```html\r\n<!-- _layouts/page.html -->\r\n--- layout: default ---\r\n\r\n<link\r\n  rel=\"stylesheet\"\r\n  href=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\"\r\n  integrity=\"sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\"\r\n  crossorigin=\"anonymous\"\r\n/>\r\n\r\n<!-- The loading of KaTeX is deferred to speed up page rendering -->\r\n<script\r\n  defer\r\n  src=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\"\r\n  integrity=\"sha384-g7c+Jr9ZivxKLnZTDUhnkOnsh30B4H0rpLUpJ4jAIKs4fnJI+sEnkvrMWph2EDg4\"\r\n  crossorigin=\"anonymous\"\r\n></script>\r\n\r\n<!-- To automatically render math in text elements, include the auto-render extension: -->\r\n<script\r\n  defer\r\n  src=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/contrib/auto-render.min.js\"\r\n  integrity=\"sha384-mll67QQFJfxn0IYznZYonOWZ644AWYC+Pt2cHqMaRhXVrursRwvLnLaebdGIlYNa\"\r\n  crossorigin=\"anonymous\"\r\n  onload=\"renderMathInElement(document.body);\"\r\n></script>\r\n\r\n<!-- ... -->\r\n```\r\n\r\n## Adding liquid tags to wrap page content\r\n\r\nThe plugin `jekyll-katex` focuses on rendering:\r\n\r\n- Single math equations wrapped inside `katex` liquid tags like {% raw %}`{% katex %} ... {% endkatex %}`{% endraw %}.\r\n- Or multiple math equations in paragraphs wrapped inside {% raw %}`{% katexmm %} ... {% endkatexmm %}`{% endraw %}.\r\n\r\nIn our case, we'll be using the latter tag to wrap our {% raw %}`{{ content }}`{% endraw %}. Wrap {% raw %}`{{ content }}`{% endraw %} in the liquid tags inside `_layouts/page.html` like so:\r\n\r\n```html\r\n<!-- _layouts/page.html -->\r\n\r\n<!-- ... -->\r\n{% raw %}{% katexmm %} {{ content }} {% endkatexmm %}{% endraw %}\r\n<!-- ... -->\r\n```\r\n\r\n## Render equations in Foam's homepage as well\r\n\r\nYou may have noticed that we only made modifications to the template `_layouts/page.html`, which means that `_layouts/home.html` won't have KaTeX support. If you wan't to render math in Foam's home page, you'll need to make the same modifications to `_layouts/home.html` as well.\r\n\r\nFinally, if all goes well, then our site hosted on Vercel will support rendering math equations with KaTeX after commiting these changes to GitHub. Here's a demo of the default template with KaTeX support: [Foam Template with KaTeX support](https://foam-template.vercel.app/).\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[math-support-with-mathjax]: math-support-with-mathjax.md \"Math Support\"\r\n[publish-to-vercel]: publish-to-vercel.md \"Publish to Vercel\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/publishing/math-support-with-mathjax/","title":"Math Support"},"frontmatter":{"draft":false},"rawBody":"---\r\nlayout: mathjax\r\ntags:\r\n  - Publish\r\n---\r\n\r\n# Math Support\r\n\r\nPublished Foam pages don't support math formulas by default. To enable this feature, you can add the following code snippet to the end of `_layouts/page.html`:\r\n\r\n```html\r\n<script\r\n  src=\"https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"\r\n  type=\"text/javascript\"\r\n></script>\r\n<script type=\"text/x-mathjax-config\">\r\n  MathJax.Hub.Config({\r\n      tex2jax: {\r\n          skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],\r\n          inlineMath: [['$','$']]\r\n      }\r\n  });\r\n</script>\r\n```\r\n\r\nThis approach uses the [MathJax](https://www.mathjax.org/) library to render anything delimited by `$` (customizable in the snippet above) pairs to inline math and `$$` to blocks of math (like a html div tag) using with the AMS-LaTeX dialect embedded within MathJax.\r\n\r\nExample of inline math using `$...$`:\r\n\r\n`$e^{i \\pi}+1=0$`, becomes $e^{i \\pi}+1=0$\r\n\r\nExample of a math block using `$$...$$`:\r\n\r\n`$$ f_{\\mathbf{X}}\\left(x_{1}, \\ldots, x_{k}\\right)=\\frac{\\exp \\left(-\\frac{1}{2}(\\mathbf{x}-\\boldsymbol{\\mu})^{\\mathrm{T}} \\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\right)}{\\sqrt{(2 \\pi)^{k}|\\mathbf{\\Sigma}|}} $$`\r\n\r\nBecomes:\r\n\r\n$$ f*{\\mathbf{X}}\\left(x*{1}, \\ldots, x\\_{k}\\right)=\\frac{\\exp \\left(-\\frac{1}{2}(\\mathbf{x}-\\boldsymbol{\\mu})^{\\mathrm{T}} \\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\boldsymbol{\\mu})\\right)}{\\sqrt{(2 \\pi)^{k}|\\mathbf{\\Sigma}|}} $$\r\n\r\n## Alternative approaches\r\n\r\nThere are other dialects of LaTeX (instead of AMS), and other JavaScript rendering libraries you may want to use. In a future version of Foam, we may support KaTeX syntax out of the box, but at this time, these integrations are left as an exercise to the user.\r\n\r\n## Why don't my Math expressions work on my Foam's home page?\r\n\r\nIf you want the index page of your Foam site to render maths, you'll need to add that to `_layouts/home.html` as well, or change the layout of the index page to be \"page\" instead of \"home\" by putting this Front Matter on the top of your `readme.md/index.md`:\r\n\r\n```\r\n---\r\nlayout: page\r\n---\r\n\r\n# Your normal title here\r\n```\r\n\r\nReference: [How to support latex in github-pages](https://stackoverflow.com/questions/26275645/how-to-support-latex-in-github-pages)\r\n"},{"fields":{"slug":"/publishing/publish-to-azure-devops-wiki/","title":"Publish to Azure DevOps Wiki"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Publish\r\n---\r\n\r\n# Publish to Azure DevOps Wiki\r\n\r\nPublish your Foam workspace as an Azure DevOps wiki.\r\n\r\n[Azure DevOps](https://azure.microsoft.com/en-us/services/devops/) is Microsoft's collaboration software for software development teams, formerly known as Team Foundation Server (TFS) and Visual Studio Team Services. It is available as an on-premise or SaaS version. The following recipe was tested with the SaaS version, but should work the same way for the on-premise.\r\n\r\nThe following recipe is written with the assumption that you already have an [Azure DevOps](https://azure.microsoft.com/en-us/services/devops/) project.\r\n\r\n## Setup a Foam workspace\r\n\r\n1. Generate a Foam workspace using the [foam-template project](https://github.com/foambubble/foam-template).\r\n2. Change the remote to a git repository in Azure DevOps (Repos -> Import a Repository -> Add Clone URL with Authentication), or copy all the files into a new Azure DevOps git repository.\r\n3. Define which document will be the wiki home page. To do that, create a file called `.order` in the Foam workspace root folder, with first line being the document filename without `.md` extension. For a project created from the Foam template, the file would look like this:\r\n\r\n```\r\nreadme\r\n```\r\n\r\n4. Push the repository to remote in Azure DevOps.\r\n\r\n## Publish repository to a wiki\r\n\r\n1. Navigate to your Azure DevOps project in a web browser.\r\n2. Choose **Overview** > **Wiki**. If you don't have wikis for your project, choose **Publish code as a wiki** on welcome page.\r\n3. Choose repository with your Foam workspace, branch (usually `master` or `main`), folder (for workspace created from foam-template it is `/`), and wiki name, and press **Publish**.\r\n\r\nA published workspace looks like this:\r\n\r\n![Azure DevOps wiki](../assets/images/azure-devops-wiki-demo.png)\r\n\r\nThere is default table of contents pane to the left of the wiki content. Here, you'll find a list of all directories that are present in your Foam workspace, and all wiki pages. Page names are derived from files names, and they are listed in alphabetical order. You may reorder pages by adding filenames without `.md` extension to `.order` file.\r\n\r\n_Note that first entry in `.order` file defines wiki's home page._\r\n\r\n## Update wiki\r\n\r\nWhile you are pushing changes to GitHub, you won't see the wiki updated if you don't add Azure as a remote. You can push to multiple repositories simultaneously.\r\n\r\n1.  First open a terminal and check if Azure is added running: `git remote show origin`. If you don't see Azure add it in the output then follow these steps.\r\n2.  Rename your current remote (most likely named origin) to a different name by running: `git remote rename origin main`\r\n3.  You can then add the remote for your second remote repository, in this case, Azure. e.g `git remote add azure https://<YOUR_ID>@dev.azure.com/<YOUR_ID>/foam-notes/_git/foam-notes`. You can get it from: Repos->Files->Clone and copy the URL.\r\n4.  Now, you need to set up your origin remote to push to both of these. So run: `git config -e` and edit it.\r\n5.  Add the `remote origin` section to the bottom of the file with the URLs from each remote repository you'd like to push to. You'll see something like that:\r\n\r\n```bash\r\n[core]\r\n ...\r\n  (ignore this part)\r\n  ...\r\n[branch \"master\"]\r\n remote = github\r\n merge = refs/heads/master\r\n[remote \"github\"]\r\n url = git@github.com:username/repo.git\r\n fetch = +refs/heads/*:refs/remotes/github/*\r\n[remote \"azure\"]\r\n url = https://<YOUR_ID>@dev.azure.com/<YOUR_ID>/foam-notes/_git/foam-notes\r\n fetch = +refs/heads/*:refs/remotes/azure/*\r\n[remote \"origin\"]\r\n url = git@github.com:username/repo.git\r\n url = https://<YOUR_ID>@dev.azure.com/<YOUR_ID>/foam-notes/_git/foam-notes\r\n```\r\n\r\n6.  You can then push to both repositories by: `git push origin master` or a single one using: `git push github master` or `git push azure master`\r\n\r\nFor more information, read the [Azure DevOps documentation](https://docs.microsoft.com/en-us/azure/devops/project/wiki/publish-repo-to-wiki).\r\n"},{"fields":{"slug":"/publishing/publish-to-github-pages/","title":"GitHub Pages"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Publish\r\n  - Github\r\n---\r\n\r\n# GitHub Pages\r\n\r\n- In VSCode workspace settings set `\"foam.edit.linkReferenceDefinitions\": \"withoutExtensions\"`\r\n- Execute the “Foam: Run Janitor” command from the command palette.\r\n- [Turn **GitHub Pages** on in your repository settings](https://guides.github.com/features/pages/).\r\n- The default GitHub Pages template is called [Primer](https://github.com/pages-themes/primer). See Primer docs for how to customise html layouts and templates.\r\n- GitHub Pages is built on [Jekyll](https://jekyllrb.com/), so it supports things like permalinks, front matter metadata etc.\r\n\r\n## How to publish locally\r\n\r\nIf you want to test your published foam, follow the instructions:\r\n\r\n- <https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/creating-a-github-pages-site-with-jekyll>\r\n- <https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/testing-your-github-pages-site-locally-with-jekyll>\r\n\r\nAssuming you have installed ruby/jekyll and the rest:\r\n\r\n- `touch Gemfile`\r\n  - open the file and paste the following:\r\n\r\n```\r\nsource 'https://rubygems.org'\r\n\r\ngem \"github-pages\", \"VERSION\"\r\n```\r\n\r\nreplacing `VERSION` with the latest from <https://rubygems.org/gems/github-pages> (e.g. `gem \"github-pages\", \"209\"`)\r\n\r\n- `bundle`\r\n- `bundle exec jekyll 3.9.0 new .`\r\n- edit the `Gemfile` according to the instructions at [Creating Your Site](https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/creating-a-github-pages-site-with-jekyll#creating-your-site) Point n.8\r\n- `bundle exec jekyll serve`\r\n\r\n## Other templates\r\n\r\nThere are many other templates which also support publish your foam workspace to github pages\r\n\r\n- gatsby-digital-garden\r\n  - [repo](https://github.com/mathieudutour/gatsby-digital-garden)\r\n  - [demo-website](https://mathieudutour.github.io/gatsby-digital-garden/)\r\n- foam-mkdocs-template\r\n  - [repo](https://github.com/Jackiexiao/foam-mkdocs-template)\r\n  - [demo-website](https://jackiexiao.github.io/foam/)\r\n- foam-jekyll-template\r\n  - [repo](https://github.com/hikerpig/foam-jekyll-template)\r\n  - [demo-website](https://hikerpig.github.io/foam-jekyll-template/)\r\n\r\n[[todo]] [[good-first-task]] Improve this documentation\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[todo]: ../dev/todo.md \"Todo\"\r\n[good-first-task]: ../dev/good-first-task.md \"Good First Task\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/publishing/publish-to-github/","title":"Publish to GitHub"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Publish\r\n---\r\n\r\n# Publish to GitHub\r\n\r\nThe standard [foam-template](https://github.com/foambubble/foam-template) is ready to be published to GitHub, and GitHub pages.\r\n\r\n## Enable navigation in GitHub\r\n\r\nTo allow navigation from within the GitHub repo, make sure to generate the link references, by setting\r\n\r\n- `Foam › Edit: Link Reference Definitions` -> `withExtensions`\r\n\r\nSee [[link-reference-definitions]] for more information.\r\n\r\n## Customising the style\r\n\r\nYou can edit `assets/css/style.scss` to change how published pages look.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[link-reference-definitions]: ../features/link-reference-definitions.md \"Link Reference Definitions\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/publishing/publish-to-gitlab-pages/","title":"GitLab Pages"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Publish\r\n---\r\n\r\n# GitLab Pages\r\n\r\nYou don't have to use GitHub to serve Foam pages. You can also use GitLab.\r\n\r\n## Setup a project\r\n\r\n### Generate the directory from GitHub\r\n\r\nGenerate a solution using the [Foam template].\r\n\r\nChange the remote to GitLab, or copy all the files into a new GitLab repo.\r\n\r\n### Add a \\_config.yaml\r\n\r\nAdd another file to the root directory (the one with `readme.md` in it) called `_config.yaml` (no extension)\r\n\r\n```yaml\r\ntitle: My Awesome Foam Project\r\nbaseurl: \"\" # the subpath of your site, e.g. /blog\r\nurl: \"/\" # the base hostname & protocol for your site\r\ntheme: jekyll-theme-minimal\r\nplugins:\r\n  - jekyll-optional-front-matter\r\noptional_front_matter:\r\n  remove_originals: true\r\ndefaults:\r\n  - scope:\r\n      path: \"\" # we need to add this to properly render layouts\r\n    values:\r\n      layout: \"default\"\r\n```\r\n\r\nYou can choose a theme if you want from places like [Jekyll Themes](https://jekyllthemes.io/)\r\n\r\n### Add a Gemlock file\r\n\r\nAdd another file to the root directory (the one with `readme.md` in it) called `Gemfile` (no extension)\r\n\r\n```ruby\r\nsource \"https://rubygems.org\"\r\n\r\ngem \"jekyll\"\r\ngem \"jekyll-theme-minimal\"\r\ngem \"jekyll-optional-front-matter\"\r\n```\r\n\r\nCommit the file and push it to gitlab.\r\n\r\n## Setup CI/CD\r\n\r\n1. From the project home in GitLab click `Set up CI/CD`\r\n2. Choose `Jekyll` as your template from the template dropdown\r\n3. Click `commit`\r\n4. Now when you go to CI / CD > Pipelines, you should see the code running\r\n\r\n## Troubleshooting\r\n\r\n- _Could not locate Gemfile_ - You didn't follow the steps above to [#Add a Gemlock file]\r\n- _Conversion error: Jekyll::Converters::Scss encountered an error while converting_ You need to reference a theme.\r\n- _Pages are running in CI/CD, but I only ever see `test`, and never deploy_ - Perhaps you've renamed the main branch (from master) - check the settings in `.gitlab-ci.yml` and ensure the deploy command is running to the branch you expect it to.\r\n- _I deployed, but my .msd files don't seem to be being converted into .html files_ - You need a gem that GitHub installs by default - check `gem \"jekyll-optional-front-matter\"` appears in the `Gemfile`\r\n"},{"fields":{"slug":"/publishing/publish-to-netlify-with-eleventy/","title":"Publish to Netlify with Eleventy"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Publish\r\n---\r\n\r\n# Publish to Netlify with Eleventy\r\n\r\nYou can use [foam-eleventy-template](https://github.com/juanfrank77/foam-eleventy-template) to generate a static site with [Eleventy](https://www.11ty.dev/), and host it online on [Netlify](https://www.netlify.com/).\r\n\r\nWith this template you can\r\n\r\n- Have control over what to publish and what to keep private\r\n- Customize the styling of the site to your own liking\r\n\r\n## Publishing your foam\r\n\r\nWhen you're ready to publish, import the GitHub repository you created with **foam-eleventy-template** into your Netlify account. (Create one if you don't have it already.)\r\n\r\nOnce that's done, all you have to do is make changes to your workspace in VS Code and push them to the main branch on GitHub. Netlify will recognize the changes, deploy them automatically and give you a link where your Foam is published.\r\n\r\nThat's it!\r\n\r\nYou can now see it online and use that link to share it with your friends, so that they can see it too.\r\n"},{"fields":{"slug":"/publishing/publish-to-vercel/","title":"Publish to Vercel"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Publish\r\n  - Vercel\r\n---\r\n\r\n# Publish to Vercel\r\n\r\nThis #recipe shows you how to deploy the default Foam website template to Vercel.\r\n\r\n[Vercel](https://vercel.com/) is a static website hosting solution similar to GitHub Pages (see [[publish-to-github-pages]]).\r\n\r\n## Setting up the project\r\n\r\n### Using Foam's template\r\n\r\nGenerate a GitHub repository using the default [Foam template](https://github.com/foambubble/foam-template), this will be the workspace that we will be deploying with Vercel. This workspace is a barebone Jekyll source website, which means we can customize and install plugins just like any other Jekyll websites.\r\n\r\nAs we won't be using GitHub Pages, we will be adding a few configuration files in order to help Vercel pick up on how to build our site.\r\n\r\n### Adding a `_config.yml`\r\n\r\nFirst, we'll need to add a `_config.yml` at the root directory. This is the Jekyll configuration file. In here, we will set the site's title, theme, repository and permalink options, and also tell Jekyll what plugins to use:\r\n\r\n```yaml\r\n# _config.yml\r\ntitle: Foam\r\n# All the plugins we will be installing now that we won't be using GitHub Pages\r\nplugins:\r\n  - jekyll-katex # optional\r\n  - jekyll-default-layout\r\n  - jekyll-relative-links\r\n  - jekyll-readme-index\r\n  - jekyll-titles-from-headings\r\n  - jekyll-optional-front-matter\r\n# The default Jekyll theme we will be using\r\ntheme: jekyll-theme-primer\r\n# The GitHub repository that we are hosting our foam workspace from\r\nrepository: user/repo\r\n# Generate permalinks in format specified in: https://jekyllrb.com/docs/permalinks/#built-in-formats\r\npermalink: pretty\r\n```\r\n\r\nThe `theme` specifies a theme for our deployed Jekyll website. The default GitHub Pages template is called [Primer](https://github.com/pages-themes/primer). See Primer docs for how to customise html layouts and templates. We can also choose a theme if you want from places like [Jekyll Themes](https://jekyllthemes.io/).\r\n\r\nThe `plugins` specifies a list of Jekyll plugins that we will be installing in the next section. As we won't be using GitHub Pages, we'll need to install these plugins that GitHub Pages installs for us under the hood.\r\n\r\n_If you want to use LaTeX rendered with KaTeX (which is what the plugin `jekyll-katex` does), you can specify it here. And yes, one of the benefits of deploying with Vercel is that we can use KaTeX to render LaTeX! More on: [[math-support-with-katex]]_\r\n\r\n### Adding a `Gemfile`\r\n\r\nNext up, we'll create another new file called `Gemfile` in the root directory. This is where we will let Vercel know what plugins to install when building our website.\r\n\r\nIn our `Gemfile`, we need to specify our Ruby packages:\r\n\r\n```ruby\r\n# Gemfile\r\nsource \"https://rubygems.org\"\r\ngem \"jekyll\"\r\ngem \"kramdown-parser-gfm\"\r\ngem \"jekyll-theme-primer\"\r\ngem \"jekyll-optional-front-matter\"\r\ngem \"jekyll-default-layout\"\r\ngem \"jekyll-relative-links\"\r\ngem \"jekyll-readme-index\"\r\ngem \"jekyll-titles-from-headings\"\r\ngem \"jekyll-katex\"  # Optional, the package that enables KaTeX math rendering\r\n```\r\n\r\n### Enable math rendering with KaTeX (optional)\r\n\r\nBesides adding the plugin `jekyll-katex` in `_config.yml` and `Gemfile`, we'll also have to follow the guides in [[math-support-with-katex]] to let our site fully support using KaTeX to render math equations.\r\n\r\n### Commiting changes to GitHub repo\r\n\r\nFinally, commit the newly created files to GitHub.\r\n\r\n## Importing project to Vercel\r\n\r\nFirst, import our foam workspace (GitHub repository) to Vercel with [Vercel's _Import Git Repository_](https://vercel.com/import/git). Paste our GitHub repo's url and Vercel will automatically pull and analyze the tool we use to deploy our website. (In our case: Jekyll.)\r\n\r\nNext, select the folder to deploy from if prompted. If we are using the default template, then Vercel will default to the root directory of our Foam workspace.\r\n\r\nFinally, if all is successful, Vercel will show the detected framework: Jekyll. Press `Deploy` to proceed on publishing our project.\r\n\r\n![](../assets/images/vercel-detect-preset.png)\r\n\r\nAnd now, Vercel will take care of building and rendering our foam workspace each time on push. Vercel will publish our site to `xxx.vercel.app`, we can also define a custom domain name for our Vercel website.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[publish-to-github-pages]: publish-to-github-pages.md \"GitHub Pages\"\r\n[math-support-with-katex]: math-support-with-katex.md \"Katex Math Rendering\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/recipes/add-images-to-notes/","title":"Add images to your notes"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Add images to your notes\r\n\r\nThis #recipe allows you to paste images on to your notes.\r\n\r\nYou can directly link and paste images that are copied to the clipboard using either the [Paste\r\nImage](https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image)\r\nextension, or the [Markdown Image](https://marketplace.visualstudio.com/items?itemName=hancel.markdown-image) extension.\r\n\r\nThe former does not have MDX support (yet), the latter does.\r\n"},{"fields":{"slug":"/recipes/automatic-git-syncing/","title":"Automatically Sync with Git"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Automatically Sync with Git\r\n\r\nWith this #recipe you can regularly commit and push to git, to keep your repo in always synched.\r\nYou can also easily manipulate the git history to reduce clutter.\r\n\r\n## Required Extensions\r\n\r\n- [GitDoc](https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gitdoc)\r\n\r\n## Instructions\r\n\r\nClick on the extension link above to see how to use it.\r\n\r\n**For Foam specific needs, you can add a comment here by following the [[contribution-guide]]**\r\n\r\n## Feedback and issues\r\n\r\n- Feedback and issues with the extension should be reported to the authors themselves\r\n- Feedback and issues with the integration of the extension in Foam can be reported in our [issue tracker](https://github.com/foambubble/foam/issues)\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[contribution-guide]: ../contribution-guide.md \"Contribution Guide\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/recipes/automatically-expand-urls-to-well-titled-links/","title":"Automatically Expand URLs to Well-Titled Links"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Automatically Expand URLs to Well-Titled Links\r\n\r\nWith this #recipe you can convert a link to a fully-formed Markdown link, using the page's title as a display name. Useful for citations and creating link collections.\r\n\r\n## Required Extensions\r\n\r\n- [Markdown Link Expander](https://marketplace.visualstudio.com/items?itemName=skn0tt.markdown-link-expander) (not included in template)\r\n\r\nMarkdown Link Expander will scrape your URL's `<title>` tag to create a nice Markdown-style link.\r\n\r\n## Instructions\r\n\r\n![Demo](../assets/images/prettify-links-demo.gif)\r\n\r\n1. Highlight desired URL\r\n2. `Cmd` + `Shift` + `P`\r\n3. `Expand URL to Markdown`\r\n4. Profit\r\n\r\nTip: If you paste a lot of links, give the action a custom [key binding](https://code.visualstudio.com/docs/getstarted/keybindings)\r\n\r\n## Feedback and issues\r\n\r\nHave an idea for the extension? [Feel free to share! 🎉](https://github.com/Skn0tt/markdown-link-expander/issues)\r\n"},{"fields":{"slug":"/recipes/capture-notes-with-drafts-pro/","title":"Capture Notes With Drafts Pro"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Capture Notes With Drafts Pro\r\n\r\nWith this #recipe you can create notes on your iOS device, which will automatically be imported into Foam.\r\n\r\n## Context\r\n\r\n- You use [Foam for VSCode](https://marketplace.visualstudio.com/items?itemName=foam.foam-vscode) to manage your notes\r\n- You wish to adopt a practice such as [A writing inbox for transient and incomplete notes](https://notes.andymatuschak.org/A%20writing%20inbox%20for%20transient%20and%20incomplete%20notes)\r\n- You wish to use [Drafts Pro](https://docs.getdrafts.com/) to capture quick notes into your Foam notes from your iOS device\r\n\r\n## Other tools\r\n\r\n- We assume you are familiar with how to use GitHub (if you are using Foam this is implicit)\r\n- You have an iOS device with [Drafts](https://getdrafts.com/)\r\n- You have upgraded to [Drafts Pro](https://docs.getdrafts.com/draftspro) (needed to edit actions).\r\n\r\n## Instructions\r\n\r\n1. [Create a new action in Drafts](https://docs.getdrafts.com/docs/actions/editing-actions)\r\n2. Add a single [step](https://docs.getdrafts.com/actions/steps/) of type Script\r\n3. Edit the script adding the code from the block below\r\n4. Edit settings at the top of the script to suit your preferences\r\n5. Set other Action options in Drafts as you wish\r\n6. Save the Action\r\n7. In GitHub [create a Personal Access Token](https://github.com/settings/tokens) and give it `repo` scope - make a note of the token\r\n8. In Drafts create a note\r\n9. Select the action you created in steps 1-6\r\n10. On the first run you will need to add the following information:\r\n    1. your GitHub username\r\n    2. the repository name of your Foam repo\r\n    3. the GitHub access token from step 7\r\n    4. An author name\r\n11. Check your GitHub repo for a commit\r\n12. If you are publishing your Foam to the web you may want to edit your publishing configuration to exclude inbox files - as publishing (and method) is a user choice that is beyond the scope of this recipe\r\n\r\n## Code for Drafts Action\r\n\r\n```javascript\r\n// adapted from https://forums.getdrafts.com/t/script-step-post-to-github-without-working-copy/3594\r\n// post to writing inbox in Foam digital garden\r\n\r\n/*\r\n * edit these lines to suit your preferences\r\n */\r\nconst inboxFolder = \"inbox/\"; // the folder in your Foam repo where notes are saved. MUST have trailing slash, except for root of repo use ''\r\nconst requiredTags = [\"inbox\"]; // all documents will have these added in addition to tags from the Drafts app\r\nconst addLinkToInbox = true; // true = created note will have link to [[index]], false = no link\r\nconst addTimeStamp = true; // true = add a note of capture date/time at foot of note\r\n\r\n/*\r\n * stop editing\r\n */\r\n\r\nconst credential = Credential.create(\r\n  \"GitHub garden repo\",\r\n  \"The repo name, and its credentials, hosting your Foam notes\"\r\n);\r\ncredential.addTextField(\"username\", \"GitHub Username\");\r\ncredential.addTextField(\"repo\", \"Repo name\");\r\ncredential.addPasswordField(\"key\", \"GitHub personal access token\");\r\ncredential.addTextField(\"author\", \"Author\");\r\ncredential.authorize();\r\n\r\nconst githubKey = credential.getValue(\"key\");\r\nconst githubUser = credential.getValue(\"username\");\r\nconst repo = credential.getValue(\"repo\");\r\nconst author = credential.getValue(\"author\");\r\n\r\nconst http = HTTP.create(); // create HTTP object\r\nconst base = \"https://api.github.com\";\r\n\r\nconst posttime = new Date();\r\nconst title = draft.title;\r\nconst txt = draft.processTemplate(\"[[line|3..]]\");\r\nconst mergedTags = [...draft.tags, ...requiredTags];\r\nconst slugbase = title.toLowerCase().replace(/\\s/g, \"-\");\r\n\r\nconst datestr = `${posttime.getFullYear()}-${pad(\r\n  posttime.getMonth() + 1\r\n)}-${pad(posttime.getDate())}`;\r\nconst timestr = `${pad(posttime.getHours())}:${pad(posttime.getMinutes())}:00`;\r\nconst yr = `${posttime.getFullYear()}`;\r\nconst pdOffset = posttime.getTimezoneOffset();\r\nconst offsetChar = pdOffset >= 0 ? \"-\" : \"+\";\r\nvar pdHours = Math.floor(pdOffset / 60);\r\nconsole.log(pdHours);\r\npdHours = pdHours >= 0 ? pdHours : pdHours * -1;\r\nconsole.log(pdHours);\r\nconst tzString = `${offsetChar}${pad(pdHours)}:00`;\r\nconst postdate = `${datestr}T${timestr}${tzString}`;\r\n\r\nconst slug = `${slugbase}`;\r\nconst fn = `${slug}.md`;\r\nlet preamble = `# ${title} \\n\\n`;\r\n\r\nmergedTags.forEach(function (item, index) {\r\n  preamble += `#${item} `;\r\n});\r\n\r\nif (addLinkToInbox) {\r\n  preamble += \"\\n\\n[[inbox]]\\n\";\r\n}\r\n\r\npreamble += \"\\n\\n\";\r\n\r\nvar doc = `${preamble}${txt}`;\r\n\r\nif (addTimeStamp) {\r\n  doc += `\\n\\nCaptured: ${postdate}\\n`;\r\n}\r\n\r\nconst options = {\r\n  url: `https://api.github.com/repos/${githubUser}/${repo}/contents/${inboxFolder}${fn}`,\r\n  method: \"PUT\",\r\n  data: {\r\n    message: `Inbox from Drafts ${datestr}`,\r\n    content: Base64.encode(doc),\r\n  },\r\n  headers: {\r\n    Authorization: `token ${githubKey}`,\r\n  },\r\n};\r\n\r\nvar response = http.request(options);\r\n\r\nif (response.success) {\r\n  // yay\r\n} else {\r\n  console.log(response.statusCode);\r\n  console.log(response.error);\r\n}\r\n\r\nfunction pad(n) {\r\n  let str = String(n);\r\n  while (str.length < 2) {\r\n    str = `0${str}`;\r\n  }\r\n  return str;\r\n}\r\n```\r\n"},{"fields":{"slug":"/recipes/capture-notes-with-shortcuts-and-github-actions/","title":"Capture Notes With Shortcuts and GitHub Actions"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Capture Notes With Shortcuts and GitHub Actions\r\n\r\nWith this #recipe you can create notes on your iOS device, which will automatically be imported into Foam.\r\n\r\n## Context\r\n\r\n- You use [Foam for VSCode](https://marketplace.visualstudio.com/items?itemName=foam.foam-vscode) to manage your notes\r\n- You wish to adopt a practice such as [A writing inbox for transient and incomplete notes](https://notes.andymatuschak.org/A%20writing%20inbox%20for%20transient%20and%20incomplete%20notes)\r\n- You wish to use [Shorcuts](https://support.apple.com/guide/shortcuts/welcome/ios) to capture quick notes into your Foam notes from your iOS device\r\n\r\n## Other tools\r\n\r\n- We assume you are familiar with how to use GitHub (if you are using Foam this is implicit)\r\n- You have an iOS device.\r\n\r\n## Instructions\r\n\r\n1. Setup the [`foam-capture-action`]() in your GitHub Repository, to be triggered by \"Workflow dispatch\" events.\r\n\r\n```\r\nname: Manually triggered workflow\r\non:\r\n  workflow_dispatch:\r\n    inputs:\r\n      data:\r\n        description: 'What information to put in the knowledge base.'\r\n        required: true\r\n\r\njobs:\r\n  store_data:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - uses: actions/checkout@master\r\n    - uses: anglinb/foam-capture-action@main\r\n      with:\r\n        {% raw %}\r\n        capture: ${{ github.event.inputs.data }}\r\n        {% endraw %}\r\n    - run: |\r\n        git config --local user.email \"example@gmail.com\"\r\n        git config --local user.name \"Your name\"\r\n        git commit -m \"Captured from workflow trigger\" -a\r\n        git push -u origin master\r\n```\r\n\r\n2. In GitHub [create a Personal Access Token](https://github.com/settings/tokens) and give it `repo` scope - make a note of the token\r\n3. Run this command to find your `workflow-id` to be used in the Shortcut.\r\n\r\n```bash\r\ncurl \\\r\n  -H \"Accept: application/vnd.github.v3+json\" \\\r\n  -H \"Authorization: Bearer <GITHUB_TOKEN>\" \\\r\n    https://api.github.com/repos/<owner>/<repository>/actions/workflows\r\n```\r\n\r\n4. Copy this [Shortcut](https://www.icloud.com/shortcuts/57d2ed90c40e43a5badcc174ebfaaf1d) to your iOS devices and edit the contents of the last step, `GetContentsOfURL`\r\n\r\n   - Make sure you update the URL of the shortcut step with the `owner`, `repository`, `workflow-id` (from the previous step)\r\n   - Make sure you update the headers of the shortcut step, replaceing `[GITHUB_TOKEN]` with your Personal Access Token (from step 2)\r\n\r\n5. Run the shortcut & celebrate! ✨ (You should see a GitHub Action run start and the text you entered show up in `inbox.md` in your repository.)\r\n"},{"fields":{"slug":"/recipes/diagrams-in-markdown/","title":"Diagrams in Markdown"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Diagrams in Markdown\r\n\r\nWe have two alternative #recipe for displaying diagrams in markdown:\r\n\r\n- [Diagrams in Markdown](#diagrams-in-markdown)\r\n  - [Mermaid](#mermaid)\r\n  - [Draw.io](#drawio)\r\n    - [Using Draw.io](#using-drawio)\r\n\r\n## Mermaid\r\n\r\nYou can use [Mermaid](https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid) plugin to draw and preview diagrams in your content.\r\n\r\n⚠️ Be aware that Mermaid diagrams don't automatically get rendered in published Foams in [[publish-to-github-pages]], and would require you to eject to another static site generation approach that supports Mermaid plugins.\r\n\r\n## Draw.io\r\n\r\n[Draw.io](https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio) extension allows you to create, edit, and display your diagrams without leaving Visual Studio Code. The `.drawio.svg` or `.drawio.png` files can be automatically embedded and displayed in published Foams, no export needed. FYI, the diagram below was made using Draw.io! You can check the diagram [here](../assets/images/diagram-drawio-demo.drawio.svg).\r\n\r\n![diagram-drawio-demo](../assets/images/diagram-drawio-demo.drawio.svg)\r\n\r\n### Using Draw.io\r\n\r\n1. Install [Draw.io](https://marketplace.visualstudio.com/items?itemName=hediet.vscode-drawio) VS Code extension.\r\n2. Create a new `*.drawio.svg` or `*.drawio.png` file.\r\n3. Start drawing your diagram. Once you done, save it.\r\n4. Embed the diagram file as you embedding the image file, for example: `![My Diagram](my-diagram.drawio.svg)`\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[publish-to-github-pages]: ../publishing/publish-to-github-pages.md \"GitHub Pages\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/recipes/how-to-write-recipes/","title":"How to Write Recipes"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# How to Write Recipes\r\n\r\nThis is an example of how to structure a Recipe. The first paragraph or two should explain the purpose of the recipe succinctly, including why it's useful, if that's not obvious.\r\n\r\nRecipes are intended to document:\r\n\r\n- How to use Foam's basic features\r\n- Power user pro-tips\r\n- Useful customisations of the default Foam environment\r\n- Integrations with third party tools and extensions (should be listed below)\r\n\r\n## Required Extensions\r\n\r\n- **[Hacker Typer](https://marketplace.visualstudio.com/items?itemName=jevakallio.vscode-hacker-typer)** (not really required for this recipe, just an example)\r\n- [Foam for VSCode](https://marketplace.visualstudio.com/items?itemName=foam.foam-vscode) (installed by default)\r\n\r\nThe first section should be a bulleted list of extensions required to use this recipe. At a minimum, this section should list all additional, non-standard extensions.\r\n\r\nIdeally, you should also note which Foam [[recommended-extensions]] are responsible for providing this feature, so any issue reports can be directed to the correct repositories.\r\n\r\nWhen creating new recipes, if you don't know which extension does what, you can leave it out.\r\n\r\n## Instructions\r\n\r\nHere we describe how the extension should be used.\r\n\r\n![Demo](../assets/images/foam-navigation-demo.gif)\r\n\r\nYou may include a screenshot or GIF of the feature in action by uploading an image to the `assets/images` directory. Please try to keep GIFs as small as possible by recording them with a low frame rate.\r\n\r\nThat's pretty much it!\r\n\r\n## How to contribute\r\n\r\nYou can add [[recipes]] by creating a pull request to [foambubble/foam](https://github.com/foambubble/foam) on GitHub.\r\n\r\nRead more in our [[contribution-guide]].\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[recommended-extensions]: ../recommended-extensions.md \"Recommended Extensions\"\r\n[recipes]: recipes.md \"Recipes\"\r\n[contribution-guide]: ../contribution-guide.md \"Contribution Guide\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/recipes/make-backlinks-more-prominent/","title":"Make Backlinks More Prominent"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Make Backlinks More Prominent\r\n\r\nOne of the most most common early feature requests in Foam is to make the Markdown Notes Backlinks Explorer more prominent.\r\n\r\nThis #recipe shows you how to do that.\r\n\r\nAt the moment, you can drag the explorer pane to your bottom pane, and either show it side by side with another pane, or have take the full width of the editor:\r\n\r\n![Demo of dragging and dropping the pane](../assets/images/demo-backlinks-explorer.gif)\r\n\r\nIn the future we'll want to improve this feature by\r\n\r\n- [[materialized-backlinks]]\r\n- Providing more context around back link reference\r\n  - Could be done by tweaking Markdown Notes slightly. Maybe a user setting?\r\n- Make back links editable using [VS Code Search Editors](https://code.visualstudio.com/updates/v1_43#_search-editors)\r\n  - [Suggested by @Jash on Discord](https://discordapp.com/channels/729975036148056075/729978910363746315/730999992419876956)\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[materialized-backlinks]: ../dev/materialized-backlinks.md \"Materialized Backlinks (stub)\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/recipes/migrating-from-obsidian/","title":"Migrating from Obsidian (stub)"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Migrating from Obsidian (stub)\r\n\r\n**[[todo]] This [[roadmap]] item needs more specification work.**\r\n\r\nIf you're interested in working on it, please start a conversation in [GitHub issues](https://github.com/foambubble/foam/issues).\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[todo]: ../dev/todo.md \"Todo\"\r\n[roadmap]: ../dev/roadmap.md \"Roadmap\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/recipes/migrating-from-onenote/","title":"Migrating from OneNote"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Migrating from OneNote\r\n\r\nThis guide mostly duplicates the instructions at the repo for the PowerShell [script](https://github.com/nixsee/ConvertOneNote2MarkDown).\r\n\r\n## Summary\r\n\r\nThe powershell script 'ConvertOneNote2MarkDown-v2.ps1' will utilize the OneNote Object Model on your workstation to convert all OneNote pages to Word documents and then utilizes PanDoc to convert the Word documents to Markdown (.md) format. It will also:\r\n\r\n- Create a folder structure for your Notebooks and Sections.\r\n- Process pages that are in sections at the Notebook, Section Group and 1st Nested Section Group levels.\r\n- Allow you you choose between putting all Images in a central '/media' folder for each notebook, or in a separate '/media' folder in each folder of the hierarchy.\r\n- Fix image references in the resulting .md files, generating relative references to the image files within the markdown document.\r\n- A title, description, and date header will be added to each file as well.\r\n- And more (see details at repo)!\r\n\r\n## Usage\r\n\r\n1.  Start the OneNote application. All notebooks currently loaded in [OneNote](https://getonetastic.com/download) will be converted.\r\n2.  It is advised that you install [Onetastic](https://getonetastic.com/download) and the attached macro, which will automatically expand any collapsed paragraphs in the notebook. They won't be exported otherwise.\r\n    - To install the macro, click the New Macro Button within the Onetastic Toolbar and then select File -> Import and select the .xml macro included in the release.\r\n    - Run the macro for each Notebook that is open\r\n3.  For the next sections, it is highly recommended that you use VS Code, and its embedded PowerShell terminal, as this allows you to edit and run the script, as well as check the results of the .md output all in one window.\r\n4.  Whatever you choose, you will need to do the following:\r\n\r\n    1. Clone the script to your computer (see [here](https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository), if you're unfamiliar with git).\r\n    2. Once cloned, navigate to the repo folder. In VS Code, use File -> Add Folder to Workspace, right click on the folder in the left side bar and click [Open In Integrated Terminal](../assets/images/migrating-one-note.png).\r\n    3. Run the script by executing\r\n       `.\\ConvertOnenote2Markdown-v2`\r\n\r\n       - if you receive an error, try running this line to bypass security:\r\n         `Set-ExecutionPolicy Bypass -Scope Process`\r\n       - if you still have trouble, try running both Onenote and Powershell as an administrator.\r\n\r\n5.  It will ask you for the path to store the markdown folder structure. Please use an empty folder. If using VS Code, you might not be able to paste the filepath - right click on the blinking cursor and it will paste from clipboard. **Attention:** use a full absolute path for the destination.\r\n6.  Read the prompts carefully to select your desired options. If you aren't actively editing your pages in Onenote, it is HIGHLY recommended that you don't delete the intermediate word docs, as they take 80+% of the time to generate. They are stored in their own folder, out of the way. You can then quickly re-run the script with different parameters until you find what you like.\r\n7.  Sit back and wait until the process completes.\r\n8.  To stop the process at any time, press Ctrl+C.\r\n9.  If you like, you can inspect some of the .md files prior to completion. If you're not happy with the results, stop the process, delete the .md and re-run with different parameters.\r\n10. At this point, you should be ready to load the new directory into Foam!\r\n"},{"fields":{"slug":"/recipes/migrating-from-roam/","title":"Migrating from Roam (stub)"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Migrating from Roam (stub)\r\n\r\n**[[todo]] This [[roadmap]] item needs more specification work.**\r\n\r\nIf you're interested in working on it, please start a conversation in [GitHub issues](https://github.com/foambubble/foam/issues).\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[todo]: ../dev/todo.md \"Todo\"\r\n[roadmap]: ../dev/roadmap.md \"Roadmap\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/recipes/note-macros/","title":"Custom Note Macros"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Custom Note Macros\r\n\r\nThis #recipe allows you to create custom note macros.\r\n\r\n## Installation\r\n\r\n**This extension is not included in the template**\r\n\r\nTo install search note-macros in vscode or head to [note-macros - Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=NeelyInnovations.note-macros)\r\n\r\n## Instructions\r\n\r\n### Run macro From command pallette\r\n\r\nSimply use `Ctrl+P` or `Alt+P` depend on your os, and type `Note Macros: Run A Macro` then chose the macro you want to execute.\r\n\r\n### Create Custom Note Macros\r\n\r\nCreate your own custom macros by adding them to your `settings.json` (Code|File > Preferences > User Settings). A full example can be found at [settings.json](https://github.com/kneely/note-macros/blob/master/settings.json)\r\n\r\nFor example:\r\n\r\nThis macro creates a Weekly note in the Weekly note Directory.\r\n\r\n```json\r\n{\r\n  \"note-macros\": {\r\n    \"Weekly\": [\r\n      {\r\n        \"type\": \"note\",\r\n        \"directory\": \"Weekly\",\r\n        \"extension\": \".md\",\r\n        \"name\": \"weekly-note\",\r\n        \"date\": \"yyyy-W\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nFor an explanation of the fields please go to [note-macros - Explanation of Fields](https://github.com/kneely/note-macros#explanation-of-fields)\r\n\r\n### Add Keybindings to Run your Macros\r\n\r\nin `keybindings.json` (Code|File > Preferences > Keyboard Shortcuts) add bindings to your macros:\r\n\r\n```json\r\n{\r\n  \"key\": \"ctrl+cmd+/\",\r\n  \"command\": \"note-macros.Weekly\"\r\n}\r\n```\r\n\r\n## Issues and Feedback\r\n\r\nIf you have any issues or questions please look at the [README.md](https://github.com/kneely/note-macros#note-macros) on the [note-macros](https://github.com/kneely/note-macros) GitHub.\r\n\r\nIf you run into any issues that are not fixed by referring to the README or feature requests please open an [issue](https://github.com/kneely/note-macros/issues).\r\n"},{"fields":{"slug":"/recipes/predefined-user-snippets/","title":"Pre-defined User Snippets"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Pre-defined User Snippets\r\n\r\nThis #recipe allows us to introduce Roam style commands to Foam, by using [VS Code Snippets](https://code.visualstudio.com/docs/editor/userdefinedsnippets). Consider the below snippets:\r\n\r\n```json\r\n{\r\n  \"Zettelkasten Id\": {\r\n    \"scope\": \"markdown\",\r\n    \"prefix\": \"/id\",\r\n    \"description\": \"Zettelkasten Id\",\r\n    \"body\": [\r\n      \"${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\"\r\n    ]\r\n  },\r\n  \"Current date\": {\r\n    \"scope\": \"markdown\",\r\n    \"prefix\": \"/date\",\r\n    \"description\": \"Current date\",\r\n    \"body\": [\r\n      \"${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nWhich would look like:\r\n![GIF demonstrating User Snippets](../assets/images/snippets.gif)\r\n\r\nUsing snippets enables Foam users to add [[custom-snippets]] themselves so they live alongside the first-class `/commands`.\r\n\r\n## Notes & Considerations\r\n\r\n- VS Code supplies \"commands\" already via the command palette\r\n  - Consider the UX around this. Users less familiar with VS Code are more likely to be familiar with `/` to trigger a command menu. Experienced VS Code users may be more likely to favour the command palette.\r\n- We can use `TabCompletionProvider` and `snippets` and mix them (maybe) via the following VS Code setting: `\"editor.snippetSuggestions\": \"inline\" | \"top\" | \"bottom\" | \"none\"`\r\n- For more discussion, consult the PR [here](https://github.com/foambubble/foam/pull/192).\r\n\r\n## Simplifying Markdown Syntax\r\n\r\nSome markdown syntax is difficult for users who have never authored markdown before. Take for example a checkbox/todo. The following syntax is required:\r\n\r\n```\r\n- [ ] Something todo...\r\n```\r\n\r\nWe could provide snippets that expand out into the associated markdown syntax, like in the below GIF:\r\n![GIF demonstrating markdown snippets](../assets/images/markdown-snippets.gif)\r\n\r\nThe JSON for these snippets can be found [here](https://github.com/foambubble/foam/pull/192#issuecomment-666736270).\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[custom-snippets]: ../features/custom-snippets.md \"Adding Custom Snippets\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/recipes/real-time-collaboration/","title":"Real-time Collaboration"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Real-time Collaboration\r\n\r\nThis #recipe is here to just tell you that VS Code Live Share will allow you to collaborate live on your notes.\r\n"},{"fields":{"slug":"/recipes/recipes/","title":"Recipes"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n<!-- omit in toc -->\r\n\r\n# Recipes\r\n\r\nA #recipe is a guide, tip or strategy for getting the most out of your Foam workspace!\r\n\r\n- [Recipes](#recipes)\r\n  - [Contribute](#contribute)\r\n  - [Take smart notes](#take-smart-notes)\r\n  - [Discover](#discover)\r\n  - [Organise](#organise)\r\n  - [Write](#write)\r\n  - [Version control](#version-control)\r\n  - [Publish](#publish)\r\n  - [Collaborate](#collaborate)\r\n  - [Workflow](#workflow)\r\n  - [Creative ideas](#creative-ideas)\r\n  - [Other](#other)\r\n\r\n## Contribute\r\n\r\n- Start by reading [[contribution-guide]]\r\n- If you discover features not listed here, we'd love to have them! [[how-to-write-recipes]].\r\n\r\n## Take smart notes\r\n\r\n- Introduction to Zettelkasten [[todo]]\r\n- Clip webpages with [[web-clipper]]\r\n\r\n## Discover\r\n\r\n- Explore your notes using [[graph-visualisation]]\r\n- Discover relationships with [[backlinking]]\r\n- Simulating [[unlinked-references]]\r\n\r\n## Organise\r\n\r\n- Using [[backlinking]] for reference lists.\r\n\r\n## Write\r\n\r\n- Link documents with [[wikilinks]].\r\n- Use shortcuts for [[creating-new-notes]]\r\n- Instantly create and access your [[daily-notes]]\r\n- Add and explore [[tags]]\r\n- Create [[note-templates]]\r\n- Find [[orphans]]\r\n- Use custom [[note-macros]] to create weekly, monthly etc. notes\r\n- Draw [[diagrams-in-markdown]]\r\n- Prettify your links, [[automatically-expand-urls-to-well-titled-links]]\r\n- Style your environment with [[custom-markdown-preview-styles]]\r\n- Paste and link [[add-images-to-notes]]\r\n- [[shows-image-preview-on-hover]]\r\n- [Markdown All-in-One](https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one) features [[todo]] [[good-first-task]]\r\n  - Manage checklists\r\n  - Automatic Table of Contents\r\n  - Live preview markdown\r\n  - _More..._\r\n- VS Code Advanced Features [[todo]] [[good-first-task]]\r\n  - Focus with Zen Mode\r\n\r\n## Version control\r\n\r\n- Quick commits with VS Code's built in [[git-integration]]\r\n- Store your workspace in an auto-synced GitHub repo with [[write-your-notes-in-github-gist]]\r\n- Sync your GitHub repo automatically [[todo]].\r\n\r\n## Publish\r\n\r\n- Publish using official Foam template\r\n  - Publish to [[publish-to-github-pages]]\r\n  - Publish to [[publish-to-gitlab-pages]]\r\n  - Publish to [[publish-to-azure-devops-wiki]]\r\n  - Publish to [[publish-to-vercel]]\r\n- Publish using community templates\r\n  - [[publish-to-netlify-with-eleventy]] by [@juanfrank77](https://github.com/juanfrank77)\r\n  - [[generate-gatsby-site]] by [@mathieudutour](https://github.com/mathieudutour) and [@hikerpig](https://github.com/hikerpig)\r\n  - [foamy-nextjs](https://github.com/yenly/foamy-nextjs) by [@yenly](https://github.com/yenly)\r\n- Make the site your own by [[publish-to-github]].\r\n- Render math symbols, by either\r\n  - adding client-side [[math-support-with-mathjax]] to the default [[publish-to-github-pages]] site\r\n  - adding a custom Jekyll plugin to support [[math-support-with-katex]]\r\n\r\n## Collaborate\r\n\r\n- Give your team push access to your GitHub repo [[todo]]\r\n- Real-time collaboration via VS Code Live Share [[todo]]\r\n- Accept patches via GitHub PRs [[todo]]\r\n\r\n## Workflow\r\n\r\n- Capture notes from Drafts app on iOS [[capture-notes-with-drafts-pro]]\r\n- Capture notes from iOS Shortcuts [[capture-notes-with-shortcuts-and-github-actions]]\r\n\r\n## Creative ideas\r\n\r\nCreative ideas welcome!\r\n\r\n- Support [Anki](https://apps.ankiweb.net/) cards from notes like [Remnote](https://www.remnote.io/) [[todo]]\r\n\r\n_See [[contribution-guide]] and [[how-to-write-recipes]]._\r\n\r\n## Other\r\n\r\nThought of a recipe but don't see a category for them? Add them here and we'll organise them once we detect a theme.\r\n\r\n_See [[contribution-guide]] and [[how-to-write-recipes]]._\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[contribution-guide]: ../contribution-guide.md \"Contribution Guide\"\r\n[how-to-write-recipes]: how-to-write-recipes.md \"How to Write Recipes\"\r\n[todo]: ../dev/todo.md \"Todo\"\r\n[web-clipper]: web-clipper.md \"Web Clipper\"\r\n[graph-visualisation]: ../features/graph-visualisation.md \"Graph Visualisation\"\r\n[backlinking]: ../features/backlinking.md \"Backlinking\"\r\n[unlinked-references]: ../dev/unlinked-references.md \"Unlinked references (stub)\"\r\n[wikilinks]: ../wikilinks.md \"Wikilinks\"\r\n[creating-new-notes]: ../features/creating-new-notes.md \"Creating New Notes\"\r\n[daily-notes]: ../features/daily-notes.md \"Daily notes\"\r\n[tags]: ../features/tags.md \"Tags\"\r\n[note-templates]: ../features/note-templates.md \"Note Templates\"\r\n[orphans]: ../features/orphans.md \"Orphans\"\r\n[note-macros]: note-macros.md \"Custom Note Macros\"\r\n[diagrams-in-markdown]: diagrams-in-markdown.md \"Diagrams in Markdown\"\r\n[automatically-expand-urls-to-well-titled-links]: automatically-expand-urls-to-well-titled-links.md \"Automatically Expand URLs to Well-Titled Links\"\r\n[custom-markdown-preview-styles]: ../features/custom-markdown-preview-styles.md \"Custom Markdown Preview Styles\"\r\n[add-images-to-notes]: add-images-to-notes.md \"Add images to your notes\"\r\n[shows-image-preview-on-hover]: shows-image-preview-on-hover.md \"Shows Image Preview on Hover\"\r\n[good-first-task]: ../dev/good-first-task.md \"Good First Task\"\r\n[git-integration]: ../features/git-integration.md \"Git Integration\"\r\n[write-your-notes-in-github-gist]: write-your-notes-in-github-gist.md \"Write your notes in GitHub Gist\"\r\n[publish-to-github-pages]: ../publishing/publish-to-github-pages.md \"GitHub Pages\"\r\n[publish-to-gitlab-pages]: ../publishing/publish-to-gitlab-pages.md \"GitLab Pages\"\r\n[publish-to-azure-devops-wiki]: ../publishing/publish-to-azure-devops-wiki.md \"Publish to Azure DevOps Wiki\"\r\n[publish-to-vercel]: ../publishing/publish-to-vercel.md \"Publish to Vercel\"\r\n[publish-to-netlify-with-eleventy]: ../publishing/publish-to-netlify-with-eleventy.md \"Publish to Netlify with Eleventy\"\r\n[generate-gatsby-site]: ../publishing/generate-gatsby-site.md \"Generate a site using Gatsby\"\r\n[publish-to-github]: ../publishing/publish-to-github.md \"Publish to GitHub\"\r\n[math-support-with-mathjax]: ../publishing/math-support-with-mathjax.md \"Math Support\"\r\n[math-support-with-katex]: ../publishing/math-support-with-katex.md \"Katex Math Rendering\"\r\n[capture-notes-with-drafts-pro]: capture-notes-with-drafts-pro.md \"Capture Notes With Drafts Pro\"\r\n[capture-notes-with-shortcuts-and-github-actions]: capture-notes-with-shortcuts-and-github-actions.md \"Capture Notes With Shortcuts and GitHub Actions\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/recipes/search-for-notes/","title":"Search for Notes"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Search for Notes\r\n\r\nThis #recipe contains tips on how to leverage VS Code search features.\r\n\r\n[[todo]] Add more VS Code search power user tips here\r\n\r\nRun `Cmd` + `P` ( `Ctrl` + `P` on Windows ) and type a name (like 'issues') to find a note associated with that name (like 'known-issues.md' )\r\n\r\nRun `Cmd` + `Shift` + `F` ( `Ctrl` + `Shift` + `F` on Windows ) and type a word (like 'links') to find all the notes that contain that term.\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[todo]: ../dev/todo.md \"Todo\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/recipes/shows-image-preview-on-hover/","title":"Shows Image Preview on Hover"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Shows Image Preview on Hover\r\n\r\nThis #recipe allows you to see a preview of an image on hover.\r\n\r\nUse extension: [Image preview](https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview) to shows image preview in the gutter and on hover\r\n\r\nIt looks like this\r\n\r\n![picture 1](../assets/images/preview-image-on-hover.png)\r\n![picture 2](../assets/images/preview-image-in-glutter.png)\r\n"},{"fields":{"slug":"/recipes/take-notes-from-mobile-phone/","title":"Take notes on mobile phones"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Take notes on mobile phones\r\n\r\nThis #recipe offers solutions to taking Foam notes on the go.\r\n\r\nFor the time being we have decided to not build a mobile app, but rely on third parties (see [[build-vs-assemble]]).\r\n\r\nThe most promising options are:\r\n\r\n### [GitJournal](https://gitjournal.io/)\r\n\r\nPros\r\n\r\n- Open source\r\n- Already a usable solution.\r\n- Provides functionality to edit, create, and browser markdown files.\r\n- Support journal mode, todo lists, and free writing\r\n- Syncs to GitHub repo\r\n- Supports Wikilinks\r\n- Supports Backlinks\r\n- Developer is happy to prioritize Foam compatibility\r\n\r\nCons\r\n\r\n- Doesn't generate link reference lists (but this is ok, since [[workspace-janitor]] as a GitHub action can solve this)\r\n- Not as sleek as Apple/Google notes, some keyboard state glitching on Android, etc.\r\n- Lack of control over roadmap. Established product with a paid plan, so may not be open to Foam-supportive changes and additions that don't benefit most users.\r\n\r\nVerdict: Good. By far best effort/outcome ratio would be to help improve GitJournal rather than building a [bespoke mobile app](#bespoke-mobile-app-for-foam).\r\n\r\n### GitHub Codespaces\r\n\r\nPros\r\n\r\n- Works out of the box just like the desktop app\r\n\r\nCons\r\n\r\n- not generally available quite yet\r\n- [Pricing](https://docs.github.com/en/free-pro-team@latest/github/developing-online-with-codespaces/about-billing-for-codespaces)\r\n\r\nFor a quick demo, see <https://www.youtube.com/watch?v=KI5m4Uy8_4I>.\r\n\r\nVerdict: Good. Pricing should be reasonable for taking notes on the fly. Harder to assess for people who would constantly use Foam from mobile phone.\r\n\r\n## Bespoke mobile app for Foam\r\n\r\nGiven we already have a solution, why would we spend time and effort building a bespoke mobile app?\r\n\r\n- Taking notes on the go is a key part of a good note taking process, and the process should feel effortless\r\n- Having a custom app could help us support key user workflows in a more Foam-specific manner\r\n\r\nIf such an app was worth building, it would have to have the following features:\r\n\r\n- Instant loading and syncing for quick notes\r\n- Sleek, simple, beautifully designed user experience.\r\n- Ability to search and navigate forward links and back links (onlly in paid GitJournal version)\r\n- Killer feature that makes it the best note taking tool for Foam (?)\r\n\r\nGiven the effort vs reward ratio, it's a low priority for core team, but if someone wants to work on this, we can provide support! Talk to us on the #mobile-apps channel on [Foam Discord](https://foambubble.github.io/join-discord/w).\r\n\r\n[//begin]: # \"Autogenerated link references for markdown compatibility\"\r\n[build-vs-assemble]: ../dev/build-vs-assemble.md \"Build vs Assemble\"\r\n[workspace-janitor]: ../features/workspace-janitor.md \"Janitor\"\r\n[//end]: # \"Autogenerated link references\"\r\n"},{"fields":{"slug":"/recipes/web-clipper/","title":"Web Clipper"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Web Clipper\r\n\r\nThis #recipe allows you to convert any web content into Markdown for storing them in your notes.\r\n\r\nThere are a couple of options when it comes to clipping web pages:\r\n\r\n- [Web Clipper](https://marketplace.visualstudio.com/items?itemName=jsartelle.web-clipper)\r\n\r\n  - This is a Web Clipper as a VSCode extension, takes a webpage URL and outputs Markdown. Uses [mercury](https://github.com/postlight/mercury-parser)\r\n\r\n- [Markdown Clipper](https://github.com/deathau/markdownload)\r\n  - A Firefox and Google Chrome extension to clip websites and download them into a readable markdown file.\r\n"},{"fields":{"slug":"/recipes/write-your-notes-in-github-gist/","title":"Write your notes in GitHub Gist"},"frontmatter":{"draft":false},"rawBody":"---\r\ntags:\r\n  - Recipes\r\n---\r\n\r\n# Write your notes in GitHub Gist\r\n\r\nThis #recipe will allow you to persist your notes in a GitHub repository, and automatically sync changes without needing to manually commit/push/pull, then GistPad might be an option worth exploring.\r\n\r\n[GistPad](https://aka.ms/gistpad) is a Visual Studio Code extension that allows you to edit your GitHub gists and repos, without needing to clone anything locally.\r\n\r\nIt provides support for editing Foam workspaces, complete with `[[link]]` [completion/navigation](https://github.com/vsls-contrib/gistpad#links), [daily pages](https://github.com/vsls-contrib/gistpad#daily-pages), [pasting images](https://github.com/vsls-contrib/gistpad#pasting-images-1) and [backlinks](https://github.com/vsls-contrib/gistpad#backlinks).\r\n\r\n<img width=\"700px\" src=\"https://user-images.githubusercontent.com/116461/87234714-96ba9400-c388-11ea-92c3-544d9a3bb633.png\" />\r\n\r\n## Getting started\r\n\r\nTo start using GistPad for your Foam-based knowledge base, simply perform the following steps:\r\n\r\n1. Download the [GistPad extension](https://aka.ms/gistpad) and then re-start Visual Studio Code\r\n\r\n1. Run the `GistPad: Sign In` command and then complete the authentication flow using your GitHub account\r\n\r\n1. Run the `GistPad: Open Repository` command and select the `Create repo from template...` or `Create private repo from template...` depending on your preference\r\n\r\n1. Select the `Foam-style wiki` template, and then specify a name for your Foam workspace (e.g. `my-foam-notes`, `johns-knowledge-base`)\r\n\r\nYour new repo will be created in your GitHub account, and the `Foam` welcome page will be automatically opened. If you already have an existing Foam workspace in GitHub, then when you run step #3 above, simply select or specify the name of the GitHub repository instead.\r\n\r\n> Note: If you have any and all feedback on how GistPad can be improved to support your Foam workflow, please don't hesitate to [let us know](https://github.com/vsls-contrib/gistpad)! 👍\r\n\r\n<img width=\"700px\" src=\"https://user-images.githubusercontent.com/116461/87863222-c1b76180-c90d-11ea-87d9-04bee1c58a0d.png\" />\r\n\r\n## Managing your workspace\r\n\r\nOnce you've opened/created the Foam repository, it will appear in the `Repositories` view of the `GistPad` tab (the one with the little notebook icon). From this tree view, you can add/edit/delete/rename new pages, upload local files, as well as view the backlinks for each page (they appear as child notes of a page).\r\n\r\n<img width=\"250px\" src=\"https://user-images.githubusercontent.com/116461/87234704-83a7c400-c388-11ea-90a8-2a660bef4dc5.png\" />\r\n\r\n## Editing your workspace\r\n\r\nWhen you create or open a page, you can edit the markdown content as usual, as well as [paste images](https://github.com/vsls-contrib/gistpad#pasting-images-1), and create [`[[links]]` to other pages](https://github.com/vsls-contrib/gistpad#links). When you type `[[`, you'll recieve auto-completion for the existing pages in your workspace, and you can also automatically create new pages by simply creating a link to it.\r\n\r\nSince you're using the Visual Studio Code markdown editor, you can benefit from all of the rich language services (e.g. syntax highlighting, header collapsing), as well as the extension ecosystem (e.g. [Emojisense](https://marketplace.visualstudio.com/items?itemName=bierner.emojisense)).\r\n\r\n## Navigating your workspace\r\n\r\nWhen editing a file, you can easily navigate `[[links]]` by hovering over them to see a preview of their contents and/or `cmd+clicking` on them in order to jump to the respective page. Furthermore, when you add a link to a page, a [backlink](https://github.com/vsls-contrib/gistpad#backlinks) is automatically added to it.\r\n\r\nYou can view a page's backlinks using either of the following techniques:\r\n\r\n1. Expanding the file's node in the `Repositories` tree, since it's child nodes will represent backlinks. This makes it easy to browse your pages and their backlinks in a single hierachical view.\r\n\r\n1. Opening a file, and then viewing it's backlinks list at the bottom of the editor view. This makes it easy to read a page and then see its backlinks in a contextually rich way.\r\n\r\n## Daily Pages\r\n\r\nIn addition to creating arbitrary pages, you can use GistPad for journaling or capturing [daily notes](https://github.com/vsls-contrib/gistpad#daily-pages). Simply click the calendar icon in the `Repositories` tree, which will open up the page that represents today. If the page doesn't already exist, then it will be created in the workspace before being opened.\r\n\r\n<img width=\"700px\" src=\"https://user-images.githubusercontent.com/116461/87234721-b356cc00-c388-11ea-946a-e7f9c92258a6.png\" />\r\n"},{"fields":{"slug":"/placeholder/","title":"This Is a Placeholder File for Mdx"},"frontmatter":{"draft":true},"rawBody":"---\r\ntitle: This Is a Placeholder File for Mdx\r\ndraft: true\r\ntags:\r\n  - gatsby-theme-primer-wiki-placeholder\r\n---\r\n"}]}}}