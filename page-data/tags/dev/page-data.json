{
    "componentChunkName": "component---theme-src-templates-tag-query-js",
    "path": "/tags/dev/",
    "result": {"data":{"site":{"pathPrefix":"/wiki","siteMetadata":{"siteUrl":"https://demo-wiki.owenyoung.com"}},"allMdx":{"nodes":[{"frontmatter":{"title":"","draft":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"architecture\", \"Dev\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"architecture\"\n  }, \"Architecture\"), mdx(\"p\", null, \"This document aims to provide a quick overview of the Foam architecture!\"), mdx(\"p\", null, \"Foam code and documentation live in the monorepo at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/foambubble/foam/\"\n  }, \"foambubble/foam\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/foam/tree/master/docs\"\n  }, \"/docs\"), \": documentation and \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/recipes/recipes/\",\n    \"title\": \"Recipes\"\n  }, \"recipes\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/foam/tree/master/packages/foam-core\"\n  }, \"/packages/foam-core\"), \" - Powers the core functionality in Foam across all platforms.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/foam/tree/master/packages/foam-vscode\"\n  }, \"/packages/foam-vscode\"), \" - The core VSCode plugin.\")), mdx(\"p\", null, \"Exceptions to the monorepo are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The starter template at \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/\"\n  }, \"foambubble/foam-template\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All other \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/recommended-extensions/\",\n    \"title\": \"Recommended Extensions\"\n  }, \"recommended-extensions\"), \" live in their respective GitHub repos.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/foam-cli\"\n  }, \"foam-cli\"), \" - The Foam CLI tool.\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/architecture/","title":"Architecture","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","draft":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"build-vs-assemble\"\n  }, \"Build vs Assemble\"), mdx(\"p\", null, \"The Foam prototype is built by assembling third-party extensions, which seems like a good strategy because\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It supports picking and mixing of tools and workflows\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Less code to write an maintain\")), mdx(\"p\", null, \"But there's also a bunch of roadmap items that are hard to implement this way, as the third party plugins don't do exactly what we want them to do (e.g. Markdown All In One is not compatible with [\", \"[referencing-notes-by-title]\", \"].\"), mdx(\"p\", null, \"Overall, we should strive to build big things from small things. Focused, interoperable modules are better, because they allow users to pick and mix which features work for them. A good example of why this matters is the Markdown All In One extension we rely on: While it provides many of the things we need, a few of its features are incompatible with how I would like to work, and therefore it becomes a limiter of how well I can improve my own workflow.\"), mdx(\"p\", null, \"However, there becomes a point where we may benefit from implementing a centralised solution, e.g. a syntax, an extension or perhaps a VSCode language server. As much as possible, we should allow users to operate in a decentralised manner.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/build-vs-assemble/","title":"Build vs Assemble","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","draft":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\", \"Core\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"foam-core\"\n  }, \"Foam Core\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foam-core\"), \" is a (future) package that powers the core functionality in Foam across all platforms:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"VS Code Extension\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/workspace-janitor/\",\n    \"title\": \"Janitor\"\n  }, \"workspace-janitor\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/cli/\",\n    \"title\": \"Command Line Interface\"\n  }, \"cli\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Future initiatives\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Visualizations\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tag clouds\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Graph\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Should we have a package for visualisation?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/build-vs-assemble/\",\n    \"title\": \"Build vs Assemble\"\n  }, \"build-vs-assemble\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Not everything needs to live in the Foam repo\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Web based UI (Monaco)\")))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foam-core\"), \"'s primary responsibility is to build an API on top of a workspace of markdown files, which allows us to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Treat files as a graph, based on links\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can be either \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/wikilinks/\",\n    \"title\": \"Wikilinks\"\n  }, \"wikilinks\"), \" or relative \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[markdown](links.md)\"), \" style\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We need to know about the edges (connections) as well as nodes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What link points to what other file, etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Needs to have the exact link text, e.g. even if \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[some-page]]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[some-page.md]]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[Some Page]]\"), \" point to the same document (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./some-page.md\"), \"), we need to know which format was used, so \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/link-reference-definitions/\",\n    \"title\": \"Link Reference Definitions\"\n  }, \"link-reference-definitions\"), \" can be generated correctly\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Treat each file as semi-structured data\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Title, headings, lists, paragraphs, images, links, data, code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Also, possible Foam-specific meta stuff, like \\\"backlinks\\\" or \\\"block references\\\".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This can power advanced search features (e.g. showing entire context of paragraph in back links, find all documents)\")))), mdx(\"p\", null, \"Ideally, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"foam-core\"), \" will be generic enough that in can be used by third parties to build their own tools that operate on markdown directories.\"), mdx(\"h2\", {\n    \"id\": \"technical-requirements\"\n  }, \"Technical requirements\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The graph should be relatively inexpensive to compute (for running in CI, mobile etc)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If necessary, we can implement caching inside a dot folder, but ideally not\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In memory cache already exist, can prime from disk if needed\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The graph should be mutable (or immutable but easy to deep clone) so that persistent processes (VS Code) can cheaply update it when\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Document content changes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Links update -> Graph change\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Heading changes -> Metadata change\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Anything in the document changes, update AST for individual note\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Files are added\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Files are removed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Files are renamed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Aliasing, call the same thing by multiple names\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Doesn't exist yet, should we support?\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The graph should be observable (EventEmitter?) so changes can be applied\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"EventEmitter w/ cross platform dependency\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Wonka (staltz's callbag)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can be a long term goal\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Short term fix: Just run the build fully on every change\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ideally, the it should accept file/structure changes from the outside from some sort of event source, so we can decouple source of updates (VS Code Workspace events, file system events...)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If this gets complicated, we can delay this for now\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We should not take on platform-specific dependencies\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Should work in any JS environment\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Written in TypeScript (preferably tsdx)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Published to NPM\")), mdx(\"h2\", {\n    \"id\": \"use-cases\"\n  }, \"Use cases\"), mdx(\"p\", null, \"Here are some example use cases that the core should support. They don't need to be built into the core, but may help us design correct solutions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Adding and editing page content\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/materialized-backlinks/\",\n    \"title\": \"Materialized Backlinks (stub)\"\n  }, \"materialized-backlinks\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/link-reference-definitions/\",\n    \"title\": \"Link Reference Definitions\"\n  }, \"link-reference-definitions\"), \" for \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/wikilinks/\",\n    \"title\": \"Wikilinks\"\n  }, \"wikilinks\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://jekyllrb.com/docs/front-matter/\"\n  }, \"Frontmatter\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Finding all documents with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#tag\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Finding all documents with instances of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[link]]\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Visualisations\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Full text search\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or, if search is too expensive/complex, when given a list of file names and line/column positions from VS Code search API, can return the document context (e.g. full paragraph, preceding/following line etc)\")))), mdx(\"h2\", {\n    \"id\": \"collaboration\"\n  }, \"Collaboration\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This week\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"List of things to work in order\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provide more vision on future state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Write about working and collaboration philosophy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \" Prioritise roadmap\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Week of July 13\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jani is available full time to work on this\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Janne: Write proposals, maybe more\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Riccardo: Available\")))), mdx(\"h2\", {\n    \"id\": \"configuration-management\"\n  }, \"Configuration management\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Other tools may not be able to use vscode\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \" Discuss with Janne and Riccardo\")), mdx(\"h2\", {\n    \"id\": \"feature-comparison\"\n  }, \"Feature comparison\"), mdx(\"p\", null, \"Useful for knowing what needs to be supported. See [\", \"[feature-comparison]\", \"].\"), mdx(\"h2\", {\n    \"id\": \"meeting-notes\"\n  }, \"Meeting notes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/meeting-notes/foam-core-2020-07-11/\",\n    \"title\": \"Foam Core 2020-07-11\"\n  }, \"foam-core-2020-07-11\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/foam-core/","title":"Foam Core","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","draft":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\", \"Format\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"foam-file-format\"\n  }, \"Foam File Format\"), mdx(\"p\", null, \"This file is an example of a valid Foam file. Essentially it's just a markdown file with a bit of additional support for MediaWiki-style \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[wikilinks]]\"), \".\"), mdx(\"p\", null, \"Here are a few specific constraints, mainly because our tooling is a bit fragmented. Most of these should be eventually lifted, and our requirement should just be \\\"Markdown with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[[wikilinks]]\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"The first top level \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"# Heading\"), \" will be used as title for the note.\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If not available, we will use the file name\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"File name should have extension \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \".md\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is a temporary limitation and will be lifted in future versions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"At least \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".mdx\"), \" will be supported, but ideally we'll support any file that you can map to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Markdown\"), \" language mode in VS Code\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"In addition to normal Markdown Links syntax you can use \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"[[MediaWiki]]\"), \" links.\"), \" See \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/wikilinks/\",\n    \"title\": \"Wikilinks\"\n  }, \"wikilinks\"), \" for more details.\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/foam-file-format/","title":"Foam File Format","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","draft":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\", \"Task\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"good-first-task\"\n  }, \"Good First Task\"), mdx(\"p\", null, \"See the backlinks of this page for good first contribution opportunities.\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/materialized-backlinks/\",\n    \"title\": \"Materialized Backlinks (stub)\"\n  }, \"materialized-backlinks\"), \" would help here.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/good-first-task/","title":"Good First Task","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","draft":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"link-reference-definition-improvements\"\n  }, \"Link Reference Definition Improvements\"), mdx(\"h2\", {\n    \"id\": \"current-problems\"\n  }, \"Current Problems\"), mdx(\"h3\", {\n    \"id\": \"file-by-file-insertion\"\n  }, \"File-by-file Insertion\"), mdx(\"p\", null, \"For the time being, if you want to get \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/wikilinks/\",\n    \"title\": \"Wikilinks\"\n  }, \"wikilinks\"), \" into all files within the workspace, you'll need to generate the link reference definitions yourself file-by-file (with the assistance of Foam).\"), mdx(\"h3\", {\n    \"id\": \"wikilinks-dont-work-on-github\"\n  }, \"Wikilinks don't work on GitHub\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TL;DR;\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/#workaround/\"\n  }, \"workaround\"), \" in the end of the chapter.\")), mdx(\"p\", null, \"If you click any of the wikilinks on GitHub web UI (such as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"README.md\"), \" of a project), you'll notice that the links break with a 404 error.\"), mdx(\"p\", null, \"At the time of writing (June 28 2020) this is a known, but unsolved error. To understand why this is the case, we need to understand what we are trading off.\"), mdx(\"p\", null, \"So, why don't they work on GitHub?\"), mdx(\"p\", null, \"The three components of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/features/link-reference-definitions/\",\n    \"title\": \"Link Reference Definitions\"\n  }, \"link-reference-definitions\"), \" are link label, link destination and Link Title.\"), mdx(\"p\", null, \"The issue is the middle \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"link destination\"), \" component. It's configured to point to the file name \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"without file extension\"), \", i.e. \\\"file-name\\\" instead of \\\"file-name.md\\\". This is to make the GitHub Pages rendering work, because if we generated the links to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"file-name.md\"), \", the links would point to the raw markdown files instead of their generated HTML versions.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Environment\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"file-name\")), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"th\"\n  }, \"file-name.md\")))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"VS Code\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Works\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Works\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"GitHub pages\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Works\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Breaks\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"GitHub UI\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Breaks\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Works\")))), mdx(\"p\", null, \"So as you can see, we've prioritised GitHub Pages over GitHub Web UI for the time being.\"), mdx(\"p\", null, \"Ideally, we'd like a solution that works with both, but it's not defined yet (see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/features/link-reference-definitions/\",\n    \"title\": \"Link Reference Definitions\"\n  }, \"link-reference-definitions\"), \" for more details)\"), mdx(\"h4\", {\n    \"id\": \"workaround\"\n  }, \"Workaround\"), mdx(\"p\", null, \"For the time being, you can use relative \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[markdown links](markdown-link.md)\"), \" syntax.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Pros:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This will work on all platforms.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Cons:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It will break the Markdown Notes \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/backlinking/\",\n    \"title\": \"Backlinking\"\n  }, \"backlinking\"), \" support\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Less convenient to write\")), mdx(\"h3\", {\n    \"id\": \"finding-certain-words-clutter-the-vs-code-search-results\"\n  }, \"Finding certain words clutter the VS Code search results\"), mdx(\"p\", null, \"Since link reference definitions have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[//begin]\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[//end]\"), \" guards with explanatory text that use certain words, these words (like \\\"generate\\\") appear in VS Code search results if you happen to search matching strings from the workspace.\"), mdx(\"h2\", {\n    \"id\": \"improvement-proposal\"\n  }, \"Improvement Proposal\"), mdx(\"p\", null, \"Problem space in essence:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"During edit-time (when modifying the markdown files in an editor)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"link reference definitions are needed if user uses editor extensions that don't understand wikilinks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"link reference definitions may be annoying since they\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add content to files that the user hasn't typed in by themselves\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"get out of date if user uses a tool that doesn't autogenerate them\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"may clutter the search results\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"During build-time (when converting markdown to html for publishing purposes)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"link reference definitions are needed, if the files are published via such tools (or to such platforms) that don't understand wikilinks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"link reference definitions might have to be in different formats depending on the publish target (e.g. GitHub pages vs GitHub UI)\")))), mdx(\"p\", null, \"The potential solution:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For edit-time\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make edit-time link reference definition generation optional via user settings. They should be on by default, and generating valid markdown links with a relative path to a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".md\"), \" file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make format of the link reference definition configurable (whether to include '.md' or not)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Out of recommended extensions, currently only \\\"markdown links\\\" doesn't support them (?). However even its \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/tchayen/markdown-links/blob/master/src/parsing.ts#L25\"\n  }, \"code\"), \" seems to include wikilink parser, so it might just be a bug?\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For build-time\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To satisfy mutually incompatible constraints between GitHub UI, VSCode UI, and GitHub Pages, we should add a pre-processing/build step for pushing to GitHub Pages.\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This would be a GitHub action (or a local script, ran via foam-cli) that outputs publish-friendly markdown format for static site generators and other publishing tools\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This build step should be pluggable, so that other transformations could be ran during it\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Have publish targets defined in settings, that support both turning the link reference definitions on/off and defining their format (.md or not). Example draft (including also edit-time aspect):\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"// settings json\\n// see enumerations below for explanations on values\\n{\\n  \\\"foam\\\": {\\n    \\\"publish\\\": [\\n      {\\n        \\\"name\\\": \\\"Gitlab Mirror\\\",     // name of the publish target\\n        \\\"linkTranspilation\\\": \\\"Off\\\",\\n        \\\"linkReferenceDefinitions\\\": \\\"withExtensions\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"GitHub Pages\\\",\\n        \\\"linkTranspilation\\\": \\\"Off\\\",\\n        \\\"linkReferenceDefinitions\\\": \\\"withoutExtensions\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"Blog\\\",\\n        \\\"linkTranspilation\\\": \\\"Off\\\",\\n        \\\"linkReferenceDefinitions\\\": \\\"Off\\\"\\n      },\\n      {\\n        \\\"name\\\": \\\"My Amazing PDF book\\\",\\n        \\\"linkTranspilation\\\": \\\"WikiLinksToMarkdown\\\"\\n      }\\n    ],\\n    \\\"edit\\\": {\\n      \\\"linkReferenceDefinitions\\\": \\\"Off\\\"\\n    }\\n  }\\n}\\n\\n// Defines if and how links in markdown files are somehow converted (in-place) during build time\\n// Note that this enumeration is not valid edit-time, since we (probably) don't want to change text like this while user is editing it\\nenum LinkTranspilation {\\n  Off,                   // links are not transpiled\\n  WikiLinksToMarkdown,   // links using wiki-format [[link]] are converted to normal md links: [link](./some/file.md)\\n                         // if this is set, not link reference definitions are generated (not needed)\\n}\\n\\n// Defines if and how link reference definition section is generated\\nenum LinkReferenceDefinitions {\\n  Off,               // link reference definitions are not generated\\n  WithExtensions,    // link reference definitions contain .md (or similar) file extensions\\n  WithoutExtensions  // link reference definitions do not contain file extenions\\n}\\n\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"With Foam repo, just use edit-time link reference definitions with '.md' extension - this makes the links work in the GitHub UI\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Have publish target defined for GitHub pages, that doesn't use '.md' extension, but still has the link reference definitions. Generate the output into gh-pages branch (or separate repo) with automation.\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This naturally requires first removing the existing link reference definitions during the build\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Other\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To clean up the search results, remove link reference definition section guards (assuming that these are not defined by the markdown spec). Use unifiedjs parse trees to identify if there's missing (or surplus) definitions (check if they are identified properly by the library), and just add the needed definitions to the bottom of the file (without guards) AND remove them if they are not needed (anywhere from the file).\")))), mdx(\"p\", null, \"Note that the proposal above supports both (build-time) inline transpilation of wikilinks as well as creation reference definitions. Depending on the direction of Foam, also only one of them could be selected. In that case the other could be implemented at later point of time.\"), mdx(\"p\", null, \"UI-wise, the publish targets could be picked in some similar fashion as the run/debug targets in vscode by implementing a separate panel, or maybe through command execution (CTRL+SHIFT+P) - not yet defined at this point.\"), mdx(\"h2\", {\n    \"id\": \"links\"\n  }, \"Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/foam/issues/16\"\n  }, \"tracking issue on GitHub\"))));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/link-reference-definition-improvements/","title":"Link Reference Definition Improvements","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","draft":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"materialized-backlinks-stub\"\n  }, \"Materialized Backlinks (stub)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \" This \", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/dev/roadmap/\",\n    \"title\": \"Roadmap\"\n  }, \"roadmap\"), \" item needs more specification work.\")), mdx(\"p\", null, \"If you're interested in working on it, please start a conversation in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/foambubble/foam/issues\"\n  }, \"GitHub issues\"), \".\"), mdx(\"h2\", {\n    \"id\": \"notes\"\n  }, \"Notes\"), mdx(\"p\", null, \"The idea would be to automatically generate lists of backlinks (and optionally, also forward links) into the bottom of every markdown document to\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make every link two-way navigable in published sites\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make Foam notes more portable to different apps and long-term storage\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/materialized-backlinks/","title":"Materialized Backlinks (stub)","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","draft":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"publishing-permissionsstub\"\n  }, \"Publishing Permissions(stub)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \" This \", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/dev/roadmap/\",\n    \"title\": \"Roadmap\"\n  }, \"roadmap\"), \" item needs more specification work.\")), mdx(\"p\", null, \"If you're interested in working on it, please start a conversation in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/foambubble/foam/issues\"\n  }, \"GitHub issues\"), \".\"), mdx(\"h2\", {\n    \"id\": \"notes\"\n  }, \"Notes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Public and private pages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Share specific page (with private hash)\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/publishing-permissions/","title":"Publishing Permissions(stub)","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","draft":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\", \"Mdx\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"mdx-by-defaultstub\"\n  }, \"MDX by Default(stub)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \" This \", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/dev/roadmap/\",\n    \"title\": \"Roadmap\"\n  }, \"roadmap\"), \" item needs more specification work.\")), mdx(\"p\", null, \"If you're interested in working on it, please start a conversation in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/foambubble/foam/issues\"\n  }, \"GitHub issues\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/mdx-by-default/","title":"MDX by Default(stub)","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","draft":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\", \"Roadmap\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"roadmap\"\n  }, \"Roadmap\"), mdx(\"p\", null, \"Some of these items can be achieved by combining existing tools, but others may require us to build bespoke software solutions. See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/build-vs-assemble/\",\n    \"title\": \"Build vs Assemble\"\n  }, \"build-vs-assemble\"), \" to understand trade-offs between these approaches. If a feature can be implemented by contributing to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/recipes/recipes/\",\n    \"title\": \"Recipes\"\n  }, \"recipes\"), \", it should.\"), mdx(\"h2\", {\n    \"id\": \"in-progress\"\n  }, \"In progress\"), mdx(\"p\", null, \"Items that are already being worked on. Roadmap items in this stage should have an owner.\"), mdx(\"h2\", {\n    \"id\": \"high-priority\"\n  }, \"High priority\"), mdx(\"p\", null, \"Items we plan on working next. Items in this stage don't need to have an owner, but before we start working on them should have enough specification that they can be picked up and worked on without having to seek consensus.\"), mdx(\"p\", null, \"If you want to pick up work in this category, you should have a plan on how long the implementation will approximately take so we don't block progress by sitting on high priority issues.\"), mdx(\"h2\", {\n    \"id\": \"backlog\"\n  }, \"Backlog\"), mdx(\"p\", null, \"Everything else, categorised into themes. Just because something is on this list doesn't mean it'll get done. If you're interested in working on items in this category, check the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/contribution-guide/\",\n    \"title\": \"Contribution Guide\"\n  }, \"contribution-guide\"), \" for how to get started.\"), mdx(\"p\", null, \"If a roadmap item is a stub, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"consider\"), \" opening a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/foambubble/foam/issues\"\n  }, \"GitHub issue\"), \" to start a conversation to avoid situations where the implementation does not fit long term vision and roadmap. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Note that this is optional. The only centralised governance in Foam is to decide what ends up in the official \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://github.com/foambubble/foam-template\"\n  }, \"template\"), \", \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://github.com/foambubble/foam\"\n  }, \"documentation\"), \" and \", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"https://github.com/foambubble/foam/tree/master/packages/foam-vscode\"\n  }, \"extension\"), \". You are free to build whatever you want for yourself, and we'd love if you shared it with us, but you are by no means obligated to do so!\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"When creating GitHub issues to discuss roadmap items, link them here.\")), mdx(\"h3\", {\n    \"id\": \"known-issues\"\n  }, \"Known issues\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[improve-default-workspace-settings]\", \"]\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discussion: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/foam/issues/270\"\n  }, \"foam#270\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Improve \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/git-integration/\",\n    \"title\": \"Git Integration\"\n  }, \"git-integration\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fix \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/wikilinks/\",\n    \"title\": \"Wikilinks\"\n  }, \"wikilinks\"), \" compatibility issues\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Simplify \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/foam-file-format/\",\n    \"title\": \"Foam File Format\"\n  }, \"foam-file-format\"), \"\")), mdx(\"h3\", {\n    \"id\": \"core-features\"\n  }, \"Core features\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[renaming-files]\", \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/unlinked-references/\",\n    \"title\": \"Unlinked references (stub)\"\n  }, \"unlinked-references\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[block-references]\", \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[improved-backlinking]\", \"]\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"UX: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/recipes/make-backlinks-more-prominent/\",\n    \"title\": \"Make Backlinks More Prominent\"\n  }, \"make-backlinks-more-prominent\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/materialized-backlinks/\",\n    \"title\": \"Materialized Backlinks (stub)\"\n  }, \"materialized-backlinks\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/recipes/automatic-git-syncing/\",\n    \"title\": \"Automatically Sync with Git\"\n  }, \"automatic-git-syncing\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[git-flows-for-teams]\", \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[user-settings]\", \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/link-reference-definitions/\",\n    \"title\": \"Link Reference Definitions\"\n  }, \"link-reference-definitions\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/recipes/predefined-user-snippets/\",\n    \"title\": \"Pre-defined User Snippets\"\n  }, \"predefined-user-snippets\"), \"\")), mdx(\"h3\", {\n    \"id\": \"publishing\"\n  }, \"Publishing\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[officially-support-alternative-templates]\", \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[improved-static-site-generation]\", \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/mdx-by-default/\",\n    \"title\": \"MDX by Default(stub)\"\n  }, \"mdx-by-default\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[search-in-published-workspace]\", \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[graph-in-published-workspace]\", \"]\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discussion: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/foam/issues/58\"\n  }, \"foam#58\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[linking-between-published-workspaces]\", \"]\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discussion: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/foam/issues/59\"\n  }, \"foam#59\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/dev/publishing-permissions/\",\n    \"title\": \"Publishing Permissions(stub)\"\n  }, \"publishing-permissions\"), \"\")), mdx(\"h3\", {\n    \"id\": \"platforms\"\n  }, \"Platforms\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/features/cli/\",\n    \"title\": \"Command Line Interface\"\n  }, \"cli\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[mobile-apps]\", \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[packaged-desktop-app]\", \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[web-editor]\", \"]\")), mdx(\"h3\", {\n    \"id\": \"migration\"\n  }, \"Migration\"), mdx(\"p\", null, \"The community is working on a number of automated scripts to help you migrate to Foam. The main work of developing such a method involves exporting your notes, converting them to the Markdown format, and then making sure that the links between notes (if you had those) still work.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/recipes/migrating-from-roam/\",\n    \"title\": \"Migrating from Roam (stub)\"\n  }, \"migrating-from-roam\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discussion: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/foam/issues/55\"\n  }, \"foam#55\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/recipes/migrating-from-obsidian/\",\n    \"title\": \"Migrating from Obsidian (stub)\"\n  }, \"migrating-from-obsidian\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discussion: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/foam/issues/46\"\n  }, \"foam#46\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/recipes/migrating-from-onenote/\",\n    \"title\": \"Migrating from OneNote\"\n  }, \"migrating-from-onenote\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discussion: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/foambubble/foam/issues/151\"\n  }, \"foam#151\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Migration from other tools...\"))), mdx(\"h3\", {\n    \"id\": \"integration\"\n  }, \"Integration\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Integrations to third party tools\"), \"...\")), mdx(\"h3\", {\n    \"id\": \"wild-ideas\"\n  }, \"Wild ideas\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[foam-linter]\", \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", \"[refactoring-via-language-server-protocol]\", \"]\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/roadmap/","title":"Roadmap","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","draft":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\", \"Todo\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"todo\"\n  }, \"Todo\"), mdx(\"p\", null, \"Features belong on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/roadmap/\",\n    \"title\": \"Roadmap\"\n  }, \"roadmap\"), \".\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"Write out Roadmap\", mdx(\"ul\", {\n    parentName: \"li\",\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"Isolate tasks for MLH fellows\"))), mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"Create better structure for Recipes\"), mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"Connect to folks at GitHub\"), mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"Learn more about VS Code Extension APIs\", mdx(\"ul\", {\n    parentName: \"li\",\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"Workspace fs/events\"), mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"Reloading changes from outside vscode\"), mdx(\"li\", {\n    parentName: \"ul\",\n    \"className\": \"task-list-item\"\n  }, mdx(\"input\", {\n    parentName: \"li\",\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  }), \" \", \"Expanding, editable snippets\")))), mdx(\"p\", null, \"For more things to do, check backlinks for Pages that annotate \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/todo/","title":"Todo","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}},{"frontmatter":{"title":"","draft":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"Dev\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"unlinked-references-stub\"\n  }, \"Unlinked references (stub)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/dev/todo/\",\n    \"title\": \"Todo\"\n  }, \"todo\"), \" This \", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/dev/roadmap/\",\n    \"title\": \"Roadmap\"\n  }, \"roadmap\"), \" item needs more specification work.\")), mdx(\"p\", null, \"If you're interested in working on it, please start a conversation in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/foambubble/foam/issues\"\n  }, \"GitHub issues\"), \".\"), mdx(\"h2\", {\n    \"id\": \"notes\"\n  }, \"Notes\"), mdx(\"p\", null, \"One of Foam's big features is the ability to find all instances of a reference, create a page for it and update all the references to link to the new page.\"), mdx(\"p\", null, \"Implementing this is on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dev/roadmap/\",\n    \"title\": \"Roadmap\"\n  }, \"roadmap\"), \", but for the time being you can achieve similar things by:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Cmd\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Shift\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"F\"), \" ( \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Shift\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"F\"), \" on Windows ) to find all the references, e.g. \\\"Cat food\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Cmd\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Shift\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"H\"), \" ( \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Shift\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"H\"), \" on Windows ) to replace them with [\", \"[cat-food]\", \"].\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click any of the references to create a new note.\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/dev/unlinked-references/","title":"Unlinked references (stub)","lastUpdated":"8/31/2021","lastUpdatedAt":"2021-08-31T04:06:30.000Z","gitCreatedAt":"2021-08-31T04:06:30.000Z"}}]}},"pageContext":{"slug":"/tags/dev/","tag":"Dev","sidebarItems":[{"title":"","items":[{"title":"Links","url":"","external":false,"items":[{"title":"Foam Template","url":"https://github.com/theowenyoung/foam-template-gatsby-theme-primer-wiki","external":true,"items":[]},{"title":"Obsidian Template","url":"https://github.com/theowenyoung/obsidian-template-gatsby-theme-primer-wiki","external":true,"items":[]},{"title":"Real World Wiki","url":"https://wiki.owenyoung.com","external":true,"items":[]}],"indent":false,"collapse":true}],"collapse":true},{"title":"","items":[{"title":"Recently Updated","url":"/latest/","collapse":true,"indent":false,"items":[{"title":"10-14: Summary","url":"/SUMMARY/"},{"title":"09-09: Foam","url":"/"},{"title":"08-31: Page not found!","url":"/404/"},{"title":"08-31: Big Vision","url":"/big-vision/"},{"title":"08-31: Code of Conduct","url":"/code-of-conduct/"},{"title":"08-31: Contribution Guide","url":"/contribution-guide/"},{"title":"08-31: Inbox","url":"/inbox/"},{"title":"08-31: Frequently Asked Questions","url":"/frequently-asked-questions/"},{"title":"08-31: Principles","url":"/principles/"},{"title":"08-31: Reading list","url":"/reading-list/"}]}]},{"title":"Tags","items":[{"title":"Awesome","type":"tag","url":"/tags/awesome/","items":[{"title":"Reading list","url":"/reading-list/"},{"title":"Terminology","url":"/terminology/"}]},{"title":"Backlink","type":"tag","url":"/tags/backlink/","items":[{"title":"Backlinking","url":"/features/backlinking/"}]},{"title":"CLI","type":"tag","url":"/tags/cli/","items":[{"title":"Command Line Interface","url":"/features/cli/"}]},{"title":"Conduct","type":"tag","url":"/tags/conduct/","items":[{"title":"Code of Conduct","url":"/code-of-conduct/"}]},{"title":"Contribution","type":"tag","url":"/tags/contribution/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]},{"title":"Core","type":"tag","url":"/tags/core/","items":[{"title":"Foam Core","url":"/dev/foam-core/"}]},{"title":"Dev","type":"tag","url":"/tags/dev/","items":[{"title":"Architecture","url":"/dev/architecture/"},{"title":"Build vs Assemble","url":"/dev/build-vs-assemble/"},{"title":"Foam Core","url":"/dev/foam-core/"},{"title":"Foam File Format","url":"/dev/foam-file-format/"},{"title":"Good First Task","url":"/dev/good-first-task/"},{"title":"Link Reference Definition Improvements","url":"/dev/link-reference-definition-improvements/"},{"title":"Materialized Backlinks (stub)","url":"/dev/materialized-backlinks/"},{"title":"Publishing Permissions(stub)","url":"/dev/publishing-permissions/"},{"title":"MDX by Default(stub)","url":"/dev/mdx-by-default/"},{"title":"Roadmap","url":"/dev/roadmap/"},{"title":"Todo","url":"/dev/todo/"},{"title":"Unlinked references (stub)","url":"/dev/unlinked-references/"}]},{"title":"Extensions","type":"tag","url":"/tags/extensions/","items":[{"title":"Recommended Extensions","url":"/recommended-extensions/"}]},{"title":"FAQ","type":"tag","url":"/tags/faq/","items":[{"title":"Frequently Asked Questions","url":"/frequently-asked-questions/"}]},{"title":"Features","type":"tag","url":"/tags/features/","items":[{"title":"Backlinking","url":"/features/backlinking/"},{"title":"Command Line Interface","url":"/features/cli/"},{"title":"Creating New Notes","url":"/features/creating-new-notes/"},{"title":"Custom Markdown Preview Styles","url":"/features/custom-markdown-preview-styles/"},{"title":"Daily notes","url":"/features/daily-notes/"},{"title":"Adding Custom Snippets","url":"/features/custom-snippets/"},{"title":"Foam logging in VsCode","url":"/features/foam-logging-in-vscode/"},{"title":"Git Integration","url":"/features/git-integration/"},{"title":"Graph Visualisation","url":"/features/graph-visualisation/"},{"title":"Key Bindings","url":"/features/key-bindings/"},{"title":"Link Reference Definitions","url":"/features/link-reference-definitions/"},{"title":"Note Templates","url":"/features/note-templates/"},{"title":"Orphans","url":"/features/orphans/"},{"title":"Tags","url":"/features/tags/"},{"title":"Janitor","url":"/features/workspace-janitor/"}]},{"title":"Foam","type":"tag","url":"/tags/foam/","items":[{"title":"Foam","url":"/"}]},{"title":"Format","type":"tag","url":"/tags/format/","items":[{"title":"Foam File Format","url":"/dev/foam-file-format/"}]},{"title":"Gatsby","type":"tag","url":"/tags/gatsby/","items":[{"title":"Generate a site using Gatsby","url":"/publishing/generate-gatsby-site/"}]},{"title":"Git","type":"tag","url":"/tags/git/","items":[{"title":"Git Integration","url":"/features/git-integration/"}]},{"title":"Github","type":"tag","url":"/tags/github/","items":[{"title":"GitHub Pages","url":"/publishing/publish-to-github-pages/"}]},{"title":"Graph-Visualisation","type":"tag","url":"/tags/graph-visualisation/","items":[{"title":"Graph Visualisation","url":"/features/graph-visualisation/"}]},{"title":"Inbox","type":"tag","url":"/tags/inbox/","items":[{"title":"Inbox","url":"/inbox/"}]},{"title":"Link","type":"tag","url":"/tags/link/","items":[{"title":"Link Reference Definitions","url":"/features/link-reference-definitions/"}]},{"title":"Mdx","type":"tag","url":"/tags/mdx/","items":[{"title":"MDX by Default(stub)","url":"/dev/mdx-by-default/"}]},{"title":"Meetings","type":"tag","url":"/tags/meetings/","items":[{"title":"Foam Core 2020-07-11","url":"/meeting-notes/foam-core-2020-07-11/"}]},{"title":"New","type":"tag","url":"/tags/new/","items":[{"title":"Creating New Notes","url":"/features/creating-new-notes/"}]},{"title":"Orphans","type":"tag","url":"/tags/orphans/","items":[{"title":"Orphans","url":"/features/orphans/"}]},{"title":"Principles","type":"tag","url":"/tags/principles/","items":[{"title":"Principles","url":"/principles/"}]},{"title":"Publish","type":"tag","url":"/tags/publish/","items":[{"title":"Generate a site using Gatsby","url":"/publishing/generate-gatsby-site/"},{"title":"Publishing pages","url":"/publishing/"},{"title":"Katex Math Rendering","url":"/publishing/math-support-with-katex/"},{"title":"Publish to Azure DevOps Wiki","url":"/publishing/publish-to-azure-devops-wiki/"},{"title":"GitHub Pages","url":"/publishing/publish-to-github-pages/"},{"title":"Math Support","url":"/publishing/math-support-with-mathjax/"},{"title":"GitLab Pages","url":"/publishing/publish-to-gitlab-pages/"},{"title":"Publish to GitHub","url":"/publishing/publish-to-github/"},{"title":"Publish to Netlify with Eleventy","url":"/publishing/publish-to-netlify-with-eleventy/"},{"title":"Publish to Vercel","url":"/publishing/publish-to-vercel/"}]},{"title":"Recipes","type":"tag","url":"/tags/recipes/","items":[{"title":"Add images to your notes","url":"/recipes/add-images-to-notes/"},{"title":"Automatically Sync with Git","url":"/recipes/automatic-git-syncing/"},{"title":"Automatically Expand URLs to Well-Titled Links","url":"/recipes/automatically-expand-urls-to-well-titled-links/"},{"title":"Capture Notes With Drafts Pro","url":"/recipes/capture-notes-with-drafts-pro/"},{"title":"Capture Notes With Shortcuts and GitHub Actions","url":"/recipes/capture-notes-with-shortcuts-and-github-actions/"},{"title":"How to Write Recipes","url":"/recipes/how-to-write-recipes/"},{"title":"Diagrams in Markdown","url":"/recipes/diagrams-in-markdown/"},{"title":"Make Backlinks More Prominent","url":"/recipes/make-backlinks-more-prominent/"},{"title":"Migrating from Obsidian (stub)","url":"/recipes/migrating-from-obsidian/"},{"title":"Migrating from OneNote","url":"/recipes/migrating-from-onenote/"},{"title":"Migrating from Roam (stub)","url":"/recipes/migrating-from-roam/"},{"title":"Custom Note Macros","url":"/recipes/note-macros/"},{"title":"Pre-defined User Snippets","url":"/recipes/predefined-user-snippets/"},{"title":"Real-time Collaboration","url":"/recipes/real-time-collaboration/"},{"title":"Recipes","url":"/recipes/recipes/"},{"title":"Shows Image Preview on Hover","url":"/recipes/shows-image-preview-on-hover/"},{"title":"Search for Notes","url":"/recipes/search-for-notes/"},{"title":"Take notes on mobile phones","url":"/recipes/take-notes-from-mobile-phone/"},{"title":"Web Clipper","url":"/recipes/web-clipper/"},{"title":"Write your notes in GitHub Gist","url":"/recipes/write-your-notes-in-github-gist/"}]},{"title":"Roadmap","type":"tag","url":"/tags/roadmap/","items":[{"title":"Roadmap","url":"/dev/roadmap/"}]},{"title":"Tags","type":"tag","url":"/tags/tags/","items":[{"title":"Tags","url":"/features/tags/"}]},{"title":"Task","type":"tag","url":"/tags/task/","items":[{"title":"Good First Task","url":"/dev/good-first-task/"}]},{"title":"Template","type":"tag","url":"/tags/template/","items":[{"title":"Note Templates","url":"/features/note-templates/"}]},{"title":"Templates","type":"tag","url":"/tags/templates/","items":[{"title":"Templates v2 Proposal <!-- omit in TOC -->","url":"/proposals/templates-v2/"}]},{"title":"Todo","type":"tag","url":"/tags/todo/","items":[{"title":"Todo","url":"/dev/todo/"}]},{"title":"Vercel","type":"tag","url":"/tags/vercel/","items":[{"title":"Publish to Vercel","url":"/publishing/publish-to-vercel/"}]},{"title":"Vision","type":"tag","url":"/tags/vision/","items":[{"title":"Big Vision","url":"/big-vision/"}]},{"title":"Wikilinks","type":"tag","url":"/tags/wikilinks/","items":[{"title":"Wikilinks","url":"/wikilinks/"}]},{"title":"architecture","type":"tag","url":"/tags/architecture/","items":[{"title":"Architecture","url":"/dev/architecture/"}]},{"title":"good-first-task","type":"tag","url":"/tags/good-first-task/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]},{"title":"todo","type":"tag","url":"/tags/todo/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]}]}],"tagsGroups":[{"title":"Awesome","type":"tag","url":"/tags/awesome/","items":[{"title":"Reading list","url":"/reading-list/"},{"title":"Terminology","url":"/terminology/"}]},{"title":"Backlink","type":"tag","url":"/tags/backlink/","items":[{"title":"Backlinking","url":"/features/backlinking/"}]},{"title":"CLI","type":"tag","url":"/tags/cli/","items":[{"title":"Command Line Interface","url":"/features/cli/"}]},{"title":"Conduct","type":"tag","url":"/tags/conduct/","items":[{"title":"Code of Conduct","url":"/code-of-conduct/"}]},{"title":"Contribution","type":"tag","url":"/tags/contribution/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]},{"title":"Core","type":"tag","url":"/tags/core/","items":[{"title":"Foam Core","url":"/dev/foam-core/"}]},{"title":"Dev","type":"tag","url":"/tags/dev/","items":[{"title":"Architecture","url":"/dev/architecture/"},{"title":"Build vs Assemble","url":"/dev/build-vs-assemble/"},{"title":"Foam Core","url":"/dev/foam-core/"},{"title":"Foam File Format","url":"/dev/foam-file-format/"},{"title":"Good First Task","url":"/dev/good-first-task/"},{"title":"Link Reference Definition Improvements","url":"/dev/link-reference-definition-improvements/"},{"title":"Materialized Backlinks (stub)","url":"/dev/materialized-backlinks/"},{"title":"Publishing Permissions(stub)","url":"/dev/publishing-permissions/"},{"title":"MDX by Default(stub)","url":"/dev/mdx-by-default/"},{"title":"Roadmap","url":"/dev/roadmap/"},{"title":"Todo","url":"/dev/todo/"},{"title":"Unlinked references (stub)","url":"/dev/unlinked-references/"}]},{"title":"Extensions","type":"tag","url":"/tags/extensions/","items":[{"title":"Recommended Extensions","url":"/recommended-extensions/"}]},{"title":"FAQ","type":"tag","url":"/tags/faq/","items":[{"title":"Frequently Asked Questions","url":"/frequently-asked-questions/"}]},{"title":"Features","type":"tag","url":"/tags/features/","items":[{"title":"Backlinking","url":"/features/backlinking/"},{"title":"Command Line Interface","url":"/features/cli/"},{"title":"Creating New Notes","url":"/features/creating-new-notes/"},{"title":"Custom Markdown Preview Styles","url":"/features/custom-markdown-preview-styles/"},{"title":"Daily notes","url":"/features/daily-notes/"},{"title":"Adding Custom Snippets","url":"/features/custom-snippets/"},{"title":"Foam logging in VsCode","url":"/features/foam-logging-in-vscode/"},{"title":"Git Integration","url":"/features/git-integration/"},{"title":"Graph Visualisation","url":"/features/graph-visualisation/"},{"title":"Key Bindings","url":"/features/key-bindings/"},{"title":"Link Reference Definitions","url":"/features/link-reference-definitions/"},{"title":"Note Templates","url":"/features/note-templates/"},{"title":"Orphans","url":"/features/orphans/"},{"title":"Tags","url":"/features/tags/"},{"title":"Janitor","url":"/features/workspace-janitor/"}]},{"title":"Foam","type":"tag","url":"/tags/foam/","items":[{"title":"Foam","url":"/"}]},{"title":"Format","type":"tag","url":"/tags/format/","items":[{"title":"Foam File Format","url":"/dev/foam-file-format/"}]},{"title":"Gatsby","type":"tag","url":"/tags/gatsby/","items":[{"title":"Generate a site using Gatsby","url":"/publishing/generate-gatsby-site/"}]},{"title":"Git","type":"tag","url":"/tags/git/","items":[{"title":"Git Integration","url":"/features/git-integration/"}]},{"title":"Github","type":"tag","url":"/tags/github/","items":[{"title":"GitHub Pages","url":"/publishing/publish-to-github-pages/"}]},{"title":"Graph-Visualisation","type":"tag","url":"/tags/graph-visualisation/","items":[{"title":"Graph Visualisation","url":"/features/graph-visualisation/"}]},{"title":"Inbox","type":"tag","url":"/tags/inbox/","items":[{"title":"Inbox","url":"/inbox/"}]},{"title":"Link","type":"tag","url":"/tags/link/","items":[{"title":"Link Reference Definitions","url":"/features/link-reference-definitions/"}]},{"title":"Mdx","type":"tag","url":"/tags/mdx/","items":[{"title":"MDX by Default(stub)","url":"/dev/mdx-by-default/"}]},{"title":"Meetings","type":"tag","url":"/tags/meetings/","items":[{"title":"Foam Core 2020-07-11","url":"/meeting-notes/foam-core-2020-07-11/"}]},{"title":"New","type":"tag","url":"/tags/new/","items":[{"title":"Creating New Notes","url":"/features/creating-new-notes/"}]},{"title":"Orphans","type":"tag","url":"/tags/orphans/","items":[{"title":"Orphans","url":"/features/orphans/"}]},{"title":"Principles","type":"tag","url":"/tags/principles/","items":[{"title":"Principles","url":"/principles/"}]},{"title":"Publish","type":"tag","url":"/tags/publish/","items":[{"title":"Generate a site using Gatsby","url":"/publishing/generate-gatsby-site/"},{"title":"Publishing pages","url":"/publishing/"},{"title":"Katex Math Rendering","url":"/publishing/math-support-with-katex/"},{"title":"Publish to Azure DevOps Wiki","url":"/publishing/publish-to-azure-devops-wiki/"},{"title":"GitHub Pages","url":"/publishing/publish-to-github-pages/"},{"title":"Math Support","url":"/publishing/math-support-with-mathjax/"},{"title":"GitLab Pages","url":"/publishing/publish-to-gitlab-pages/"},{"title":"Publish to GitHub","url":"/publishing/publish-to-github/"},{"title":"Publish to Netlify with Eleventy","url":"/publishing/publish-to-netlify-with-eleventy/"},{"title":"Publish to Vercel","url":"/publishing/publish-to-vercel/"}]},{"title":"Recipes","type":"tag","url":"/tags/recipes/","items":[{"title":"Add images to your notes","url":"/recipes/add-images-to-notes/"},{"title":"Automatically Sync with Git","url":"/recipes/automatic-git-syncing/"},{"title":"Automatically Expand URLs to Well-Titled Links","url":"/recipes/automatically-expand-urls-to-well-titled-links/"},{"title":"Capture Notes With Drafts Pro","url":"/recipes/capture-notes-with-drafts-pro/"},{"title":"Capture Notes With Shortcuts and GitHub Actions","url":"/recipes/capture-notes-with-shortcuts-and-github-actions/"},{"title":"How to Write Recipes","url":"/recipes/how-to-write-recipes/"},{"title":"Diagrams in Markdown","url":"/recipes/diagrams-in-markdown/"},{"title":"Make Backlinks More Prominent","url":"/recipes/make-backlinks-more-prominent/"},{"title":"Migrating from Obsidian (stub)","url":"/recipes/migrating-from-obsidian/"},{"title":"Migrating from OneNote","url":"/recipes/migrating-from-onenote/"},{"title":"Migrating from Roam (stub)","url":"/recipes/migrating-from-roam/"},{"title":"Custom Note Macros","url":"/recipes/note-macros/"},{"title":"Pre-defined User Snippets","url":"/recipes/predefined-user-snippets/"},{"title":"Real-time Collaboration","url":"/recipes/real-time-collaboration/"},{"title":"Recipes","url":"/recipes/recipes/"},{"title":"Shows Image Preview on Hover","url":"/recipes/shows-image-preview-on-hover/"},{"title":"Search for Notes","url":"/recipes/search-for-notes/"},{"title":"Take notes on mobile phones","url":"/recipes/take-notes-from-mobile-phone/"},{"title":"Web Clipper","url":"/recipes/web-clipper/"},{"title":"Write your notes in GitHub Gist","url":"/recipes/write-your-notes-in-github-gist/"}]},{"title":"Roadmap","type":"tag","url":"/tags/roadmap/","items":[{"title":"Roadmap","url":"/dev/roadmap/"}]},{"title":"Tags","type":"tag","url":"/tags/tags/","items":[{"title":"Tags","url":"/features/tags/"}]},{"title":"Task","type":"tag","url":"/tags/task/","items":[{"title":"Good First Task","url":"/dev/good-first-task/"}]},{"title":"Template","type":"tag","url":"/tags/template/","items":[{"title":"Note Templates","url":"/features/note-templates/"}]},{"title":"Templates","type":"tag","url":"/tags/templates/","items":[{"title":"Templates v2 Proposal <!-- omit in TOC -->","url":"/proposals/templates-v2/"}]},{"title":"Todo","type":"tag","url":"/tags/todo/","items":[{"title":"Todo","url":"/dev/todo/"}]},{"title":"Vercel","type":"tag","url":"/tags/vercel/","items":[{"title":"Publish to Vercel","url":"/publishing/publish-to-vercel/"}]},{"title":"Vision","type":"tag","url":"/tags/vision/","items":[{"title":"Big Vision","url":"/big-vision/"}]},{"title":"Wikilinks","type":"tag","url":"/tags/wikilinks/","items":[{"title":"Wikilinks","url":"/wikilinks/"}]},{"title":"architecture","type":"tag","url":"/tags/architecture/","items":[{"title":"Architecture","url":"/dev/architecture/"}]},{"title":"good-first-task","type":"tag","url":"/tags/good-first-task/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]},{"title":"todo","type":"tag","url":"/tags/todo/","items":[{"title":"Contribution Guide","url":"/contribution-guide/"}]}]}},
    "staticQueryHashes": ["2230547434","2320115945","3495835395","451533639"]}